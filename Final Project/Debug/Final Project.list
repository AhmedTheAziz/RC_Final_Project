
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002c08  08002c08  00003c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ccc  08002ccc  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ccc  08002ccc  00003ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cd4  08002cd4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08002cd4  08002cd4  00003cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08002ce0  08002ce0  00003ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002cec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b60  2000005c  08002d48  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bbc  08002d48  00004bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e1f  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aff  00000000  00000000  00018ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0001b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053f  00000000  00000000  0001c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019122  00000000  00000000  0001c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a508  00000000  00000000  00035719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f021  00000000  00000000  0003fc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dec42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  000dec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e2050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002bf0 	.word	0x08002bf0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08002bf0 	.word	0x08002bf0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_ZN6configC1Ev>:
 *  Created on: Sep 11, 2024
 *      Author: AHMED ABDELAZIZ
 */
#include "config.h"
/// <Instructor>
 config::config()
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 {
	 RCC->APB2ENR =0x00000000;
 8000168:	4b05      	ldr	r3, [pc, #20]	@ (8000180 <_ZN6configC1Ev+0x20>)
 800016a:	2200      	movs	r2, #0
 800016c:	619a      	str	r2, [r3, #24]
	 RCC->APB1ENR=0x00000000;
 800016e:	4b04      	ldr	r3, [pc, #16]	@ (8000180 <_ZN6configC1Ev+0x20>)
 8000170:	2200      	movs	r2, #0
 8000172:	61da      	str	r2, [r3, #28]
 }
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4618      	mov	r0, r3
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	40021000 	.word	0x40021000

08000184 <_ZN6config4ENPAEv>:

 /// <Enable Ports and AFIOs>
 void config::ENPA()
 {
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	 RCC->APB2ENR |=(1<<2);
 800018c:	4b05      	ldr	r3, [pc, #20]	@ (80001a4 <_ZN6config4ENPAEv+0x20>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a04      	ldr	r2, [pc, #16]	@ (80001a4 <_ZN6config4ENPAEv+0x20>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6193      	str	r3, [r2, #24]
 }
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <_ZN6config4ENPBEv>:
 void config::ENPB()
 {
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	 RCC->APB2ENR |=(1<<3);
 80001b0:	4b05      	ldr	r3, [pc, #20]	@ (80001c8 <_ZN6config4ENPBEv+0x20>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a04      	ldr	r2, [pc, #16]	@ (80001c8 <_ZN6config4ENPBEv+0x20>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
 }
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	40021000 	.word	0x40021000

080001cc <_ZN7ControlC1EP5MotorS1_>:
 *      Author: AHMED ABDELAZIZ
 */

#include "control.h"

	Control::Control(Motor *m1,Motor *m2) : m1_{m1},m2_{m2}
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	607a      	str	r2, [r7, #4]
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	68ba      	ldr	r2, [r7, #8]
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	605a      	str	r2, [r3, #4]
	{
		m1_->STOP();
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fc2b 	bl	8000a44 <_ZN5Motor4STOPEv>
		m2_->STOP();
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fc26 	bl	8000a44 <_ZN5Motor4STOPEv>
		//BREAK();
	}
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	4618      	mov	r0, r3
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <_ZN7Control7ForwardEv>:
	void Control::Forward()
	{
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
		m1_->CW();
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fbe6 	bl	80009e0 <_ZN5Motor2CWEv>
		m2_->CCW();
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fbfa 	bl	8000a12 <_ZN5Motor3CCWEv>
	}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <_ZN7Control8BackwardEv>:
void Control::Backward()
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b082      	sub	sp, #8
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
	m2_->CW();
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fbd4 	bl	80009e0 <_ZN5Motor2CWEv>
	m1_->CCW();
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fbe8 	bl	8000a12 <_ZN5Motor3CCWEv>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <_ZN7Control5RightEv>:
	void Control::Right()
	{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
		m1_->STOP();
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fbf4 	bl	8000a44 <_ZN5Motor4STOPEv>
		m2_->CCW();
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fbd6 	bl	8000a12 <_ZN5Motor3CCWEv>

	}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}

0800026e <_ZN7Control4LeftEv>:
	void Control::Left()
	{
 800026e:	b580      	push	{r7, lr}
 8000270:	b082      	sub	sp, #8
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
		m1_->CW();
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fbb0 	bl	80009e0 <_ZN5Motor2CWEv>
		m2_->STOP();
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fbdd 	bl	8000a44 <_ZN5Motor4STOPEv>
	}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <_ZN7Control5BREAKEv>:
	void Control::BREAK()
	{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
		m1_->STOP();
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fbd0 	bl	8000a44 <_ZN5Motor4STOPEv>
		m2_->STOP();
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fbcb 	bl	8000a44 <_ZN5Motor4STOPEv>
	}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	@ 0x28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d022      	beq.n	8000310 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80002ca:	2308      	movs	r3, #8
 80002cc:	43db      	mvns	r3, r3
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d81b      	bhi.n	800030c <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80002d4:	2208      	movs	r2, #8
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4413      	add	r3, r2
 80002da:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f003 0307 	and.w	r3, r3, #7
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d014      	beq.n	8000310 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f003 0307 	and.w	r3, r3, #7
 80002ec:	f1c3 0308 	rsb	r3, r3, #8
 80002f0:	617b      	str	r3, [r7, #20]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	43db      	mvns	r3, r3
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d804      	bhi.n	8000306 <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	4413      	add	r3, r2
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	e004      	b.n	8000310 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	e001      	b.n	8000310 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8000310:	f001 fb6e 	bl	80019f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000314:	4b3b      	ldr	r3, [pc, #236]	@ (8000404 <pvPortMalloc+0x14c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d104      	bne.n	8000326 <pvPortMalloc+0x6e>
        {
            prvHeapInit();
 800031c:	f000 f8c6 	bl	80004ac <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8000320:	4b38      	ldr	r3, [pc, #224]	@ (8000404 <pvPortMalloc+0x14c>)
 8000322:	2201      	movs	r2, #1
 8000324:	601a      	str	r2, [r3, #0]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2b00      	cmp	r3, #0
 800032a:	db63      	blt.n	80003f4 <pvPortMalloc+0x13c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d060      	beq.n	80003f4 <pvPortMalloc+0x13c>
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <pvPortMalloc+0x150>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	d85b      	bhi.n	80003f4 <pvPortMalloc+0x13c>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800033c:	4b33      	ldr	r3, [pc, #204]	@ (800040c <pvPortMalloc+0x154>)
 800033e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000340:	4b32      	ldr	r3, [pc, #200]	@ (800040c <pvPortMalloc+0x154>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000346:	e004      	b.n	8000352 <pvPortMalloc+0x9a>
                {
                    pxPreviousBlock = pxBlock;
 8000348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800034a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800034c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	429a      	cmp	r2, r3
 800035a:	d903      	bls.n	8000364 <pvPortMalloc+0xac>
 800035c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1f1      	bne.n	8000348 <pvPortMalloc+0x90>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 8000364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000366:	4a2a      	ldr	r2, [pc, #168]	@ (8000410 <pvPortMalloc+0x158>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d043      	beq.n	80003f4 <pvPortMalloc+0x13c>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800036c:	6a3b      	ldr	r3, [r7, #32]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2208      	movs	r2, #8
 8000372:	4413      	add	r3, r2
 8000374:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	6a3b      	ldr	r3, [r7, #32]
 800037c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800037e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000380:	685a      	ldr	r2, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	1ad2      	subs	r2, r2, r3
 8000386:	2308      	movs	r3, #8
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	429a      	cmp	r2, r3
 800038c:	d922      	bls.n	80003d4 <pvPortMalloc+0x11c>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800038e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	1ad2      	subs	r2, r2, r3
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80003a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks.
                         * The list of free blocks is sorted by their size, we have to
                         * iterate to find the right place to insert new block. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <pvPortMalloc+0x154>)
 80003b0:	61bb      	str	r3, [r7, #24]
 80003b2:	e002      	b.n	80003ba <pvPortMalloc+0x102>
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	61bb      	str	r3, [r7, #24]
 80003ba:	69bb      	ldr	r3, [r7, #24]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d8f6      	bhi.n	80003b4 <pvPortMalloc+0xfc>
 80003c6:	69bb      	ldr	r3, [r7, #24]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	693a      	ldr	r2, [r7, #16]
 80003d2:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <pvPortMalloc+0x150>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <pvPortMalloc+0x150>)
 80003e0:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80003e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80003ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ec:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80003ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80003f4:	f001 fb0a 	bl	8001a0c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80003f8:	69fb      	ldr	r3, [r7, #28]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3728      	adds	r7, #40	@ 0x28
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20002888 	.word	0x20002888
 8000408:	20000000 	.word	0x20000000
 800040c:	20002878 	.word	0x20002878
 8000410:	20002880 	.word	0x20002880

08000414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d039      	beq.n	800049a <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000426:	2308      	movs	r3, #8
 8000428:	425b      	negs	r3, r3
 800042a:	693a      	ldr	r2, [r7, #16]
 800042c:	4413      	add	r3, r2
 800042e:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	0fdb      	lsrs	r3, r3, #31
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d02a      	beq.n	800049a <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d126      	bne.n	800049a <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8000458:	f001 faca 	bl	80019f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <vPortFree+0x90>)
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e002      	b.n	800046e <vPortFree+0x5a>
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	68ba      	ldr	r2, [r7, #8]
 8000476:	429a      	cmp	r2, r3
 8000478:	d8f6      	bhi.n	8000468 <vPortFree+0x54>
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	685a      	ldr	r2, [r3, #4]
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <vPortFree+0x94>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <vPortFree+0x94>)
 8000494:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 8000496:	f001 fab9 	bl	8001a0c <xTaskResumeAll>
            }
        }
    }
}
 800049a:	bf00      	nop
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20002878 	.word	0x20002878
 80004a8:	20000000 	.word	0x20000000

080004ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <prvHeapInit+0x44>)
 80004b4:	f023 0307 	bic.w	r3, r3, #7
 80004b8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80004ba:	4a0e      	ldr	r2, [pc, #56]	@ (80004f4 <prvHeapInit+0x48>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <prvHeapInit+0x48>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <prvHeapInit+0x4c>)
 80004c8:	f242 72f8 	movw	r2, #10232	@ 0x27f8
 80004cc:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 80004ce:	4b0a      	ldr	r3, [pc, #40]	@ (80004f8 <prvHeapInit+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	f242 72f8 	movw	r2, #10232	@ 0x27f8
 80004de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	4a05      	ldr	r2, [pc, #20]	@ (80004f8 <prvHeapInit+0x4c>)
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	2000007f 	.word	0x2000007f
 80004f4:	20002878 	.word	0x20002878
 80004f8:	20002880 	.word	0x20002880

080004fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f103 0208 	add.w	r2, r3, #8
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f04f 32ff 	mov.w	r2, #4294967295
 8000514:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f103 0208 	add.w	r2, r3, #8
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f103 0208 	add.w	r2, r3, #8
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000568:	d103      	bne.n	8000572 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e00c      	b.n	800058c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3308      	adds	r3, #8
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	e002      	b.n	8000580 <vListInsert+0x2e>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	429a      	cmp	r2, r3
 800058a:	d2f6      	bcs.n	800057a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	685a      	ldr	r2, [r3, #4]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	6892      	ldr	r2, [r2, #8]
 80005d8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	6852      	ldr	r2, [r2, #4]
 80005e2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d103      	bne.n	80005f6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1e5a      	subs	r2, r3, #1
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <_Z17uartTimerCallbackPv>:
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
	OP BUZZ(GPIOB,9,MODE::Gen);// PIN B9 is a 50MHZ output (Buzzer)
///<declerations ENDS>
///<UART Task Begins>
void uartTimerCallback(void *pv)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	bl_test->INIT(1);
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <_Z17uartTimerCallbackPv+0x40>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2101      	movs	r1, #1
 8000622:	4618      	mov	r0, r3
 8000624:	f001 ff6c 	bl	8002500 <_ZN4UART4INITEi>
    // Queue sender
	while(1)
	{
    char control = bl_test->Read();
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <_Z17uartTimerCallbackPv+0x40>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ffd5 	bl	80025dc <_ZN4UART4ReadEv>
 8000632:	4603      	mov	r3, r0
 8000634:	73fb      	strb	r3, [r7, #15]
    xQueueSendToBack(xQueue, &control, portMAX_DELAY);
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <_Z17uartTimerCallbackPv+0x44>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f107 010f 	add.w	r1, r7, #15
 800063e:	2300      	movs	r3, #0
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	f000 fd14 	bl	8001070 <xQueueGenericSend>
   // bl_test->Send(control);
	vTaskDelay(100/portTICK_RATE_MS);
 8000648:	2064      	movs	r0, #100	@ 0x64
 800064a:	f001 f933 	bl	80018b4 <vTaskDelay>
	}
 800064e:	bf00      	nop
 8000650:	e7ea      	b.n	8000628 <_Z17uartTimerCallbackPv+0x14>
 8000652:	bf00      	nop
 8000654:	200028ac 	.word	0x200028ac
 8000658:	200028a4 	.word	0x200028a4

0800065c <_Z9uart_READPv>:
}
void uart_READ(void *pv)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	char reading=0;
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
while(1)
{
	xQueueReceive(xQueue, &reading, portMAX_DELAY);
 8000668:	4b3a      	ldr	r3, [pc, #232]	@ (8000754 <_Z9uart_READPv+0xf8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f107 010f 	add.w	r1, r7, #15
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fda5 	bl	80011c4 <xQueueReceive>
	if(reading =='w')
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	2b77      	cmp	r3, #119	@ 0x77
 800067e:	d10f      	bne.n	80006a0 <_Z9uart_READPv+0x44>
	{
		LED_G.ON();
 8000680:	4835      	ldr	r0, [pc, #212]	@ (8000758 <_Z9uart_READPv+0xfc>)
 8000682:	f000 fa83 	bl	8000b8c <_ZN2OP2ONEv>
		LED_B.OFF();
 8000686:	4835      	ldr	r0, [pc, #212]	@ (800075c <_Z9uart_READPv+0x100>)
 8000688:	f000 fa96 	bl	8000bb8 <_ZN2OP3OFFEv>
		LED_R.OFF();
 800068c:	4834      	ldr	r0, [pc, #208]	@ (8000760 <_Z9uart_READPv+0x104>)
 800068e:	f000 fa93 	bl	8000bb8 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 8000692:	4834      	ldr	r0, [pc, #208]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000694:	f000 fa90 	bl	8000bb8 <_ZN2OP3OFFEv>
		motion.Forward();
 8000698:	4833      	ldr	r0, [pc, #204]	@ (8000768 <_Z9uart_READPv+0x10c>)
 800069a:	f7ff fdb2 	bl	8000202 <_ZN7Control7ForwardEv>
 800069e:	e7e3      	b.n	8000668 <_Z9uart_READPv+0xc>
	//	vTaskDelay(200/portTICK_RATE_MS);
	}
	else if(reading =='s')
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b73      	cmp	r3, #115	@ 0x73
 80006a4:	d10c      	bne.n	80006c0 <_Z9uart_READPv+0x64>
	{
		//BUZZ.ON();
		LED_R.ON();
 80006a6:	482e      	ldr	r0, [pc, #184]	@ (8000760 <_Z9uart_READPv+0x104>)
 80006a8:	f000 fa70 	bl	8000b8c <_ZN2OP2ONEv>
		LED_B.OFF();
 80006ac:	482b      	ldr	r0, [pc, #172]	@ (800075c <_Z9uart_READPv+0x100>)
 80006ae:	f000 fa83 	bl	8000bb8 <_ZN2OP3OFFEv>
		LED_G.OFF();
 80006b2:	4829      	ldr	r0, [pc, #164]	@ (8000758 <_Z9uart_READPv+0xfc>)
 80006b4:	f000 fa80 	bl	8000bb8 <_ZN2OP3OFFEv>
		motion.Backward();
 80006b8:	482b      	ldr	r0, [pc, #172]	@ (8000768 <_Z9uart_READPv+0x10c>)
 80006ba:	f7ff fdb4 	bl	8000226 <_ZN7Control8BackwardEv>
 80006be:	e7d3      	b.n	8000668 <_Z9uart_READPv+0xc>
		//vTaskDelay(200/portTICK_RATE_MS);

	}
	else if (reading=='d')
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b64      	cmp	r3, #100	@ 0x64
 80006c4:	d10f      	bne.n	80006e6 <_Z9uart_READPv+0x8a>
	{
		LED_B.ON();
 80006c6:	4825      	ldr	r0, [pc, #148]	@ (800075c <_Z9uart_READPv+0x100>)
 80006c8:	f000 fa60 	bl	8000b8c <_ZN2OP2ONEv>
		LED_R.OFF();
 80006cc:	4824      	ldr	r0, [pc, #144]	@ (8000760 <_Z9uart_READPv+0x104>)
 80006ce:	f000 fa73 	bl	8000bb8 <_ZN2OP3OFFEv>
		LED_G.OFF();
 80006d2:	4821      	ldr	r0, [pc, #132]	@ (8000758 <_Z9uart_READPv+0xfc>)
 80006d4:	f000 fa70 	bl	8000bb8 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <_Z9uart_READPv+0x108>)
 80006da:	f000 fa6d 	bl	8000bb8 <_ZN2OP3OFFEv>
		motion.Right();
 80006de:	4822      	ldr	r0, [pc, #136]	@ (8000768 <_Z9uart_READPv+0x10c>)
 80006e0:	f7ff fdb3 	bl	800024a <_ZN7Control5RightEv>
 80006e4:	e7c0      	b.n	8000668 <_Z9uart_READPv+0xc>

		//	vTaskDelay(200/portTICK_RATE_MS);

	}
	else if(reading =='a')
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	2b61      	cmp	r3, #97	@ 0x61
 80006ea:	d10f      	bne.n	800070c <_Z9uart_READPv+0xb0>
	{
		LED_B.ON();
 80006ec:	481b      	ldr	r0, [pc, #108]	@ (800075c <_Z9uart_READPv+0x100>)
 80006ee:	f000 fa4d 	bl	8000b8c <_ZN2OP2ONEv>
		LED_G.OFF();
 80006f2:	4819      	ldr	r0, [pc, #100]	@ (8000758 <_Z9uart_READPv+0xfc>)
 80006f4:	f000 fa60 	bl	8000bb8 <_ZN2OP3OFFEv>
		LED_R.OFF();
 80006f8:	4819      	ldr	r0, [pc, #100]	@ (8000760 <_Z9uart_READPv+0x104>)
 80006fa:	f000 fa5d 	bl	8000bb8 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 80006fe:	4819      	ldr	r0, [pc, #100]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000700:	f000 fa5a 	bl	8000bb8 <_ZN2OP3OFFEv>
		motion.Left();
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <_Z9uart_READPv+0x10c>)
 8000706:	f7ff fdb2 	bl	800026e <_ZN7Control4LeftEv>
 800070a:	e7ad      	b.n	8000668 <_Z9uart_READPv+0xc>

		//	vTaskDelay(200/portTICK_RATE_MS);

	}
	else if(reading =='p')
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	2b70      	cmp	r3, #112	@ 0x70
 8000710:	d10f      	bne.n	8000732 <_Z9uart_READPv+0xd6>
	{
		LED_R.ON();
 8000712:	4813      	ldr	r0, [pc, #76]	@ (8000760 <_Z9uart_READPv+0x104>)
 8000714:	f000 fa3a 	bl	8000b8c <_ZN2OP2ONEv>
		LED_B.ON();
 8000718:	4810      	ldr	r0, [pc, #64]	@ (800075c <_Z9uart_READPv+0x100>)
 800071a:	f000 fa37 	bl	8000b8c <_ZN2OP2ONEv>
		LED_G.ON();
 800071e:	480e      	ldr	r0, [pc, #56]	@ (8000758 <_Z9uart_READPv+0xfc>)
 8000720:	f000 fa34 	bl	8000b8c <_ZN2OP2ONEv>
		BUZZ.OFF();
 8000724:	480f      	ldr	r0, [pc, #60]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000726:	f000 fa47 	bl	8000bb8 <_ZN2OP3OFFEv>
		motion.BREAK();
 800072a:	480f      	ldr	r0, [pc, #60]	@ (8000768 <_Z9uart_READPv+0x10c>)
 800072c:	f7ff fdb1 	bl	8000292 <_ZN7Control5BREAKEv>
 8000730:	e79a      	b.n	8000668 <_Z9uart_READPv+0xc>
//vTaskDelay(200/portTICK_RATE_MS);
	}
	else
	{
		LED_B.ON();
 8000732:	480a      	ldr	r0, [pc, #40]	@ (800075c <_Z9uart_READPv+0x100>)
 8000734:	f000 fa2a 	bl	8000b8c <_ZN2OP2ONEv>
		LED_R.ON();
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <_Z9uart_READPv+0x104>)
 800073a:	f000 fa27 	bl	8000b8c <_ZN2OP2ONEv>
		LED_G.OFF();
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <_Z9uart_READPv+0xfc>)
 8000740:	f000 fa3a 	bl	8000bb8 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000746:	f000 fa37 	bl	8000bb8 <_ZN2OP3OFFEv>
		motion.BREAK();
 800074a:	4807      	ldr	r0, [pc, #28]	@ (8000768 <_Z9uart_READPv+0x10c>)
 800074c:	f7ff fda1 	bl	8000292 <_ZN7Control5BREAKEv>
	xQueueReceive(xQueue, &reading, portMAX_DELAY);
 8000750:	e78a      	b.n	8000668 <_Z9uart_READPv+0xc>
 8000752:	bf00      	nop
 8000754:	200028a4 	.word	0x200028a4
 8000758:	20002914 	.word	0x20002914
 800075c:	20002908 	.word	0x20002908
 8000760:	20002920 	.word	0x20002920
 8000764:	2000292c 	.word	0x2000292c
 8000768:	20002900 	.word	0x20002900

0800076c <main>:
}
}
///< UART Tasks ENDS	>

int main()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
///<configurations BEGINS>
config port;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fcf3 	bl	8000160 <_ZN6configC1Ev>
port.ENPA();//enable RCC for port A
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd01 	bl	8000184 <_ZN6config4ENPAEv>
port.ENPB();//enable RCC for port B
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd0f 	bl	80001a8 <_ZN6config4ENPBEv>
   oled.setDisplayOptions(1, 1, 0); // Set display options (fontSize, fontColor, orientation)
   oled.display("Hello, World!"); // Send a string to the OLED screen at (0, 0) coordinates
*/
///<Activating OLED ENDS>
///<Activating RTOS BEGINS>
xQueue =xQueueCreate(10, sizeof(char));
 800078a:	2200      	movs	r2, #0
 800078c:	2101      	movs	r1, #1
 800078e:	200a      	movs	r0, #10
 8000790:	f000 fbda 	bl	8000f48 <xQueueGenericCreate>
 8000794:	4603      	mov	r3, r0
 8000796:	4a13      	ldr	r2, [pc, #76]	@ (80007e4 <main+0x78>)
 8000798:	6013      	str	r3, [r2, #0]
semaphore = xSemaphoreCreateMutex();
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fc50 	bl	8001040 <xQueueCreateMutex>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <main+0x7c>)
 80007a4:	6013      	str	r3, [r2, #0]
if(xQueue != NULL)
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <main+0x78>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d018      	beq.n	80007e0 <main+0x74>
{
	xTaskCreate(uartTimerCallback,"uart_com",400,NULL,3,NULL); //Receiving Data from (HC-05//TTL) and send it to Queue
 80007ae:	2300      	movs	r3, #0
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2303      	movs	r3, #3
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007bc:	490b      	ldr	r1, [pc, #44]	@ (80007ec <main+0x80>)
 80007be:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <main+0x84>)
 80007c0:	f000 ff4c 	bl	800165c <xTaskCreate>
	xTaskCreate(uart_READ,"uart_rec",400,NULL,3,NULL); // Fetching Data From Queue and Execute
 80007c4:	2300      	movs	r3, #0
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	2303      	movs	r3, #3
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007d2:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <main+0x88>)
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <main+0x8c>)
 80007d6:	f000 ff41 	bl	800165c <xTaskCreate>
	vTaskStartScheduler();
 80007da:	f001 f8db 	bl	8001994 <vTaskStartScheduler>
}
///<Activating RTOS ENDS>
while(1)
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <main+0x74>
 80007e4:	200028a4 	.word	0x200028a4
 80007e8:	200028a8 	.word	0x200028a8
 80007ec:	08002c08 	.word	0x08002c08
 80007f0:	08000615 	.word	0x08000615
 80007f4:	08002c14 	.word	0x08002c14
 80007f8:	0800065d 	.word	0x0800065d

080007fc <_ZN11Moto_ConfigD1Ev>:
#define INC_MOTOR_H_
#include "op.h"


///<Struct for Pins to be configured as O/P
struct Moto_Config
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3318      	adds	r3, #24
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f9ec 	bl	8000be6 <_ZN2OPD1Ev>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	330c      	adds	r3, #12
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f9e7 	bl	8000be6 <_ZN2OPD1Ev>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f9e3 	bl	8000be6 <_ZN2OPD1Ev>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <_Z41__static_initialization_and_destruction_0ii>:
{
	//not needed infinte loop
}
return 0;
}
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d169      	bne.n	8000910 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000842:	4293      	cmp	r3, r2
 8000844:	d164      	bne.n	8000910 <_Z41__static_initialization_and_destruction_0ii+0xe4>
	UART2INS = 0x40004400,
	UART3INS = 0x40004800,

};
const double USART_div = FOSC/(BAUD);
const std::string msg= "NO UART with this address is Available!! \r\n" ;
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f001 ff83 	bl	8002756 <_ZNSaIcEC1Ev>
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	461a      	mov	r2, r3
 8000856:	493f      	ldr	r1, [pc, #252]	@ (8000954 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8000858:	483f      	ldr	r0, [pc, #252]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800085a:	f001 ffe9 	bl	8002830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4618      	mov	r0, r3
 8000864:	f001 ff78 	bl	8002758 <_ZNSaIcED1Ev>
 UART* bl_test = new(UART1INS) UART(UART1INS);
 8000868:	493c      	ldr	r1, [pc, #240]	@ (800095c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800086a:	201c      	movs	r0, #28
 800086c:	f001 ff01 	bl	8002672 <_ZN4UARTnwEj13UART_Instance>
 8000870:	4604      	mov	r4, r0
 8000872:	493a      	ldr	r1, [pc, #232]	@ (800095c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8000874:	4620      	mov	r0, r4
 8000876:	f001 fe11 	bl	800249c <_ZN4UARTC1Ei>
 800087a:	4b39      	ldr	r3, [pc, #228]	@ (8000960 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800087c:	601c      	str	r4, [r3, #0]
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {GPIOB, 1,MODE::Gen}, {GPIOA, 6,MODE::Gen}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 800087e:	2303      	movs	r3, #3
 8000880:	2205      	movs	r2, #5
 8000882:	4938      	ldr	r1, [pc, #224]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8000884:	4838      	ldr	r0, [pc, #224]	@ (8000968 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8000886:	f000 f8f7 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 800088a:	2303      	movs	r3, #3
 800088c:	2201      	movs	r2, #1
 800088e:	4937      	ldr	r1, [pc, #220]	@ (800096c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8000890:	4837      	ldr	r0, [pc, #220]	@ (8000970 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8000892:	f000 f8f1 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000896:	2303      	movs	r3, #3
 8000898:	2206      	movs	r2, #6
 800089a:	4932      	ldr	r1, [pc, #200]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800089c:	4835      	ldr	r0, [pc, #212]	@ (8000974 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800089e:	f000 f8eb 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {GPIOB, 0,MODE::Gen}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 80008a2:	2303      	movs	r3, #3
 80008a4:	2204      	movs	r2, #4
 80008a6:	492f      	ldr	r1, [pc, #188]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80008a8:	4833      	ldr	r0, [pc, #204]	@ (8000978 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80008aa:	f000 f8e5 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 80008ae:	2303      	movs	r3, #3
 80008b0:	2200      	movs	r2, #0
 80008b2:	492c      	ldr	r1, [pc, #176]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80008b4:	4831      	ldr	r0, [pc, #196]	@ (800097c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80008b6:	f000 f8df 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 80008ba:	2303      	movs	r3, #3
 80008bc:	2200      	movs	r2, #0
 80008be:	492b      	ldr	r1, [pc, #172]	@ (800096c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80008c0:	482f      	ldr	r0, [pc, #188]	@ (8000980 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80008c2:	f000 f8d9 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	Motor M1(&m1_c); /// OBJ Motor has the name M1 and the address of m1_c
 80008c6:	4928      	ldr	r1, [pc, #160]	@ (8000968 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80008c8:	482e      	ldr	r0, [pc, #184]	@ (8000984 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80008ca:	f000 f879 	bl	80009c0 <_ZN5MotorC1EP11Moto_Config>
	Motor M2(&m2_c); /// OBJ Motor has the name M2 and the address of m2_c
 80008ce:	492a      	ldr	r1, [pc, #168]	@ (8000978 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80008d0:	482d      	ldr	r0, [pc, #180]	@ (8000988 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80008d2:	f000 f875 	bl	80009c0 <_ZN5MotorC1EP11Moto_Config>
	Control motion(&M1,&M2); // controlling both motors with motion go forward, backward,right or left
 80008d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80008d8:	492a      	ldr	r1, [pc, #168]	@ (8000984 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80008da:	482c      	ldr	r0, [pc, #176]	@ (800098c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80008dc:	f7ff fc76 	bl	80001cc <_ZN7ControlC1EP5MotorS1_>
	OP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 80008e0:	2303      	movs	r3, #3
 80008e2:	2201      	movs	r2, #1
 80008e4:	491f      	ldr	r1, [pc, #124]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80008e6:	482a      	ldr	r0, [pc, #168]	@ (8000990 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80008e8:	f000 f8c6 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP LED_G(GPIOA,2,MODE::Gen); // PIN A2 is a 50MHZ Output (Green LED)
 80008ec:	2303      	movs	r3, #3
 80008ee:	2202      	movs	r2, #2
 80008f0:	491c      	ldr	r1, [pc, #112]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80008f2:	4828      	ldr	r0, [pc, #160]	@ (8000994 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80008f4:	f000 f8c0 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 80008f8:	2303      	movs	r3, #3
 80008fa:	2203      	movs	r2, #3
 80008fc:	4919      	ldr	r1, [pc, #100]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80008fe:	4826      	ldr	r0, [pc, #152]	@ (8000998 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000900:	f000 f8ba 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP BUZZ(GPIOB,9,MODE::Gen);// PIN B9 is a 50MHZ output (Buzzer)
 8000904:	2303      	movs	r3, #3
 8000906:	2209      	movs	r2, #9
 8000908:	4918      	ldr	r1, [pc, #96]	@ (800096c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800090a:	4824      	ldr	r0, [pc, #144]	@ (800099c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800090c:	f000 f8b4 	bl	8000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d119      	bne.n	800094a <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800091c:	4293      	cmp	r3, r2
 800091e:	d114      	bne.n	800094a <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8000920:	481e      	ldr	r0, [pc, #120]	@ (800099c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8000922:	f000 f960 	bl	8000be6 <_ZN2OPD1Ev>
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 8000926:	481c      	ldr	r0, [pc, #112]	@ (8000998 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000928:	f000 f95d 	bl	8000be6 <_ZN2OPD1Ev>
	OP LED_G(GPIOA,2,MODE::Gen); // PIN A2 is a 50MHZ Output (Green LED)
 800092c:	4819      	ldr	r0, [pc, #100]	@ (8000994 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800092e:	f000 f95a 	bl	8000be6 <_ZN2OPD1Ev>
	OP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 8000932:	4817      	ldr	r0, [pc, #92]	@ (8000990 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8000934:	f000 f957 	bl	8000be6 <_ZN2OPD1Ev>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {GPIOB, 0,MODE::Gen}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 8000938:	480f      	ldr	r0, [pc, #60]	@ (8000978 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800093a:	f7ff ff5f 	bl	80007fc <_ZN11Moto_ConfigD1Ev>
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {GPIOB, 1,MODE::Gen}, {GPIOA, 6,MODE::Gen}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 800093e:	480a      	ldr	r0, [pc, #40]	@ (8000968 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8000940:	f7ff ff5c 	bl	80007fc <_ZN11Moto_ConfigD1Ev>
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8000946:	f001 ff4f 	bl	80027e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bd90      	pop	{r4, r7, pc}
 8000952:	bf00      	nop
 8000954:	08002c20 	.word	0x08002c20
 8000958:	2000288c 	.word	0x2000288c
 800095c:	40013800 	.word	0x40013800
 8000960:	200028ac 	.word	0x200028ac
 8000964:	40010800 	.word	0x40010800
 8000968:	200028b0 	.word	0x200028b0
 800096c:	40010c00 	.word	0x40010c00
 8000970:	200028bc 	.word	0x200028bc
 8000974:	200028c8 	.word	0x200028c8
 8000978:	200028d4 	.word	0x200028d4
 800097c:	200028e0 	.word	0x200028e0
 8000980:	200028ec 	.word	0x200028ec
 8000984:	200028f8 	.word	0x200028f8
 8000988:	200028fc 	.word	0x200028fc
 800098c:	20002900 	.word	0x20002900
 8000990:	20002908 	.word	0x20002908
 8000994:	20002914 	.word	0x20002914
 8000998:	20002920 	.word	0x20002920
 800099c:	2000292c 	.word	0x2000292c

080009a0 <_GLOBAL__sub_I_xQueue>:
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff3f 	bl	800082c <_Z41__static_initialization_and_destruction_0ii>
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_GLOBAL__sub_D_xQueue>:
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff37 	bl	800082c <_Z41__static_initialization_and_destruction_0ii>
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_ZN5MotorC1EP11Moto_Config>:
 *      Author: AHMED ABDELAZIZ
 */

#include "motor.h"

Motor::Motor(Moto_Config * config) : Config_{config}
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	601a      	str	r2, [r3, #0]
{
STOP();
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f837 	bl	8000a44 <_ZN5Motor4STOPEv>
}
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_ZN5Motor2CWEv>:

void Motor::CW()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	Config_->in1.ON();
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f8cd 	bl	8000b8c <_ZN2OP2ONEv>
	Config_->in2.OFF();
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	330c      	adds	r3, #12
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8dd 	bl	8000bb8 <_ZN2OP3OFFEv>
	Config_->en.ON();
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3318      	adds	r3, #24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f8c1 	bl	8000b8c <_ZN2OP2ONEv>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_ZN5Motor3CCWEv>:
void Motor::CCW()
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	Config_->in1.OFF();
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f8ca 	bl	8000bb8 <_ZN2OP3OFFEv>
	Config_->in2.ON();
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f8ae 	bl	8000b8c <_ZN2OP2ONEv>
	Config_->en.ON();
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3318      	adds	r3, #24
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f8a8 	bl	8000b8c <_ZN2OP2ONEv>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZN5Motor4STOPEv>:

void Motor::STOP()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	Config_->in1.OFF();
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f8b1 	bl	8000bb8 <_ZN2OP3OFFEv>
	Config_->in2.OFF();
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	330c      	adds	r3, #12
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f8ab 	bl	8000bb8 <_ZN2OP3OFFEv>
	Config_->en.OFF();
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3318      	adds	r3, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f8a5 	bl	8000bb8 <_ZN2OP3OFFEv>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE>:
 *      Author: AHMED ABDELAZIZ
 */
#include "op.h"

uint8_t OP::Count;
	OP::OP(GPIO_TypeDef * GPIO, uint8_t pin, MODE mode) : Port_{GPIO}, Pin_{pin}, mode_{mode}
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	79fa      	ldrb	r2, [r7, #7]
 8000a92:	711a      	strb	r2, [r3, #4]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	609a      	str	r2, [r3, #8]
	{
		if(mode == MODE::Gen)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d135      	bne.n	8000b0c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x94>
		{
			if(Count ==0)
 8000aa0:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x110>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d107      	bne.n	8000ab8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x40>
			{
				Port_->CRL = 0x00000000;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
			}
			Count++;
 8000ab8:	4b33      	ldr	r3, [pc, #204]	@ (8000b88 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x110>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b31      	ldr	r3, [pc, #196]	@ (8000b88 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x110>)
 8000ac2:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d80c      	bhi.n	8000ae6 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x6e>
			{
				Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	2203      	movs	r2, #3
 8000ada:	409a      	lsls	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e00e      	b.n	8000b04 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x8c>
			}
			else
			{
				Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6859      	ldr	r1, [r3, #4]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000af4:	3b08      	subs	r3, #8
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	2203      	movs	r2, #3
 8000afa:	409a      	lsls	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	605a      	str	r2, [r3, #4]
			}
			OFF();
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 f857 	bl	8000bb8 <_ZN2OP3OFFEv>
 8000b0a:	e037      	b.n	8000b7c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x104>
		}
		else if (mode == MODE::AF)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b0b      	cmp	r3, #11
 8000b10:	d134      	bne.n	8000b7c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x104>
		{
			if(Count ==0)
 8000b12:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x110>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d107      	bne.n	8000b2a <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xb2>
			{
				Port_->CRL = 0x00000000;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
			}
			Count++;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x110>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x110>)
 8000b34:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	791b      	ldrb	r3, [r3, #4]
 8000b3a:	2b07      	cmp	r3, #7
 8000b3c:	d80c      	bhi.n	8000b58 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xe0>
			{
				Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220b      	movs	r2, #11
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e00e      	b.n	8000b76 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xfe>
			}
			else
			{
				Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6859      	ldr	r1, [r3, #4]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b66:	3b08      	subs	r3, #8
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220b      	movs	r2, #11
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	430a      	orrs	r2, r1
 8000b74:	605a      	str	r2, [r3, #4]
			}
			OFF();
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f000 f81e 	bl	8000bb8 <_ZN2OP3OFFEv>
		}

	}
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20002938 	.word	0x20002938

08000b8c <_ZN2OP2ONEv>:
	void OP::ON()
	{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
		Port_->ODR|=(1<<Pin_);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	408b      	lsls	r3, r1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	60da      	str	r2, [r3, #12]
	}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <_ZN2OP3OFFEv>:
	void OP::OFF()
	{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
		Port_->ODR&=~(1<<Pin_);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2301      	movs	r3, #1
 8000bce:	408b      	lsls	r3, r1
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	400a      	ands	r2, r1
 8000bda:	60da      	str	r2, [r3, #12]
	}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <_ZN2OPD1Ev>:
	void OP::TOGGLE()
	{
		Port_->ODR ^=(1<<Pin_);
	}

	OP::~OP()
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	{
		OFF();
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffe2 	bl	8000bb8 <_ZN2OP3OFFEv>
	}
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000c18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3b04      	subs	r3, #4
 8000c1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	f023 0201 	bic.w	r2, r3, #1
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3b04      	subs	r3, #4
 8000c2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000c30:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <pxPortInitialiseStack+0x54>)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3b14      	subs	r3, #20
 8000c3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3b20      	subs	r3, #32
 8000c46:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000c48:	68fb      	ldr	r3, [r7, #12]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	08000c59 	.word	0x08000c59

08000c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000c62:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8000c66:	f383 8811 	msr	BASEPRI, r3
 8000c6a:	f3bf 8f6f 	isb	sy
 8000c6e:	f3bf 8f4f 	dsb	sy
 8000c72:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000c74:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000c76:	bf00      	nop
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0fc      	beq.n	8000c78 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	0000      	movs	r0, r0
 8000c8c:	0000      	movs	r0, r0
	...

08000c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <pxCurrentTCBConst2>)
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	6808      	ldr	r0, [r1, #0]
 8000c96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c9a:	f380 8809 	msr	PSP, r0
 8000c9e:	f3bf 8f6f 	isb	sy
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	f380 8811 	msr	BASEPRI, r0
 8000caa:	f04e 0e0d 	orr.w	lr, lr, #13
 8000cae:	4770      	bx	lr

08000cb0 <pxCurrentTCBConst2>:
 8000cb0:	20002940 	.word	0x20002940
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop

08000cb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000cb8:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <prvPortStartFirstTask+0x1c>)
 8000cba:	6800      	ldr	r0, [r0, #0]
 8000cbc:	6800      	ldr	r0, [r0, #0]
 8000cbe:	f380 8808 	msr	MSP, r0
 8000cc2:	b662      	cpsie	i
 8000cc4:	b661      	cpsie	f
 8000cc6:	f3bf 8f4f 	dsb	sy
 8000cca:	f3bf 8f6f 	isb	sy
 8000cce:	df00      	svc	0
 8000cd0:	bf00      	nop
 8000cd2:	0000      	.short	0x0000
 8000cd4:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop

08000cdc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <xPortStartScheduler+0x4c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <xPortStartScheduler+0x50>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	@ (8000d2c <xPortStartScheduler+0x50>)
 8000cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8000cf2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <xPortStartScheduler+0x50>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d2c <xPortStartScheduler+0x50>)
 8000cfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000cfe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <xPortStartScheduler+0x54>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000d06:	f000 f891 	bl	8000e2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <xPortStartScheduler+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000d10:	f7ff ffd2 	bl	8000cb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000d14:	f001 f87a 	bl	8001e0c <vTaskSwitchContext>
    prvTaskExitError();
 8000d18:	f7ff ff9e 	bl	8000c58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000ed08 	.word	0xe000ed08
 8000d2c:	e000ed20 	.word	0xe000ed20
 8000d30:	e000ed1c 	.word	0xe000ed1c
 8000d34:	20000004 	.word	0x20000004

08000d38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
    __asm volatile
 8000d3e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8000d42:	f383 8811 	msr	BASEPRI, r3
 8000d46:	f3bf 8f6f 	isb	sy
 8000d4a:	f3bf 8f4f 	dsb	sy
 8000d4e:	607b      	str	r3, [r7, #4]
}
 8000d50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <vPortEnterCritical+0x30>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a03      	ldr	r2, [pc, #12]	@ (8000d68 <vPortEnterCritical+0x30>)
 8000d5a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000004 	.word	0x20000004

08000d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <vPortExitCritical+0x30>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <vPortExitCritical+0x30>)
 8000d7a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000d7c:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <vPortExitCritical+0x30>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d105      	bne.n	8000d90 <vPortExitCritical+0x24>
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000d8e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000004 	.word	0x20000004

08000da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000da0:	f3ef 8009 	mrs	r0, PSP
 8000da4:	f3bf 8f6f 	isb	sy
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <pxCurrentTCBConst>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000db0:	6010      	str	r0, [r2, #0]
 8000db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000db6:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8000dba:	f380 8811 	msr	BASEPRI, r0
 8000dbe:	f001 f825 	bl	8001e0c <vTaskSwitchContext>
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f380 8811 	msr	BASEPRI, r0
 8000dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000dce:	6819      	ldr	r1, [r3, #0]
 8000dd0:	6808      	ldr	r0, [r1, #0]
 8000dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000dd6:	f380 8809 	msr	PSP, r0
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	4770      	bx	lr

08000de0 <pxCurrentTCBConst>:
 8000de0:	20002940 	.word	0x20002940
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop

08000de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
    __asm volatile
 8000dee:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	607b      	str	r3, [r7, #4]
}
 8000e00:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000e02:	f000 fefb 	bl	8001bfc <xTaskIncrementTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SysTick_Handler+0x40>)
 8000e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
    __asm volatile
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f383 8811 	msr	BASEPRI, r3
}
 8000e1e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	e000ed04 	.word	0xe000ed04

08000e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <vPortSetupTimerInterrupt+0x28>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <vPortSetupTimerInterrupt+0x2c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <vPortSetupTimerInterrupt+0x30>)
 8000e3e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000e42:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <vPortSetupTimerInterrupt+0x28>)
 8000e46:	2207      	movs	r2, #7
 8000e48:	601a      	str	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010
 8000e58:	e000e018 	.word	0xe000e018
 8000e5c:	e000e014 	.word	0xe000e014

08000e60 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d05d      	beq.n	8000f34 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d059      	beq.n	8000f34 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d000      	beq.n	8000e94 <xQueueGenericReset+0x34>
 8000e92:	2101      	movs	r1, #1
 8000e94:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d14c      	bne.n	8000f34 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8000e9a:	f7ff ff4d 	bl	8000d38 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000eaa:	fb01 f303 	mul.w	r3, r1, r3
 8000eae:	441a      	add	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ed0:	fb01 f303 	mul.w	r3, r1, r3
 8000ed4:	441a      	add	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	22ff      	movs	r2, #255	@ 0xff
 8000ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	22ff      	movs	r2, #255	@ 0xff
 8000ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d114      	bne.n	8000f1a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01a      	beq.n	8000f2e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3310      	adds	r3, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 ffe1 	bl	8001ec4 <xTaskRemoveFromEventList>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d012      	beq.n	8000f2e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <xQueueGenericReset+0xe4>)
 8000f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	f3bf 8f4f 	dsb	sy
 8000f14:	f3bf 8f6f 	isb	sy
 8000f18:	e009      	b.n	8000f2e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff faec 	bl	80004fc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	3324      	adds	r3, #36	@ 0x24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fae7 	bl	80004fc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000f2e:	f7ff ff1d 	bl	8000d6c <vPortExitCritical>
 8000f32:	e001      	b.n	8000f38 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000ed04 	.word	0xe000ed04

08000f48 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	4613      	mov	r3, r2
 8000f54:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d02d      	beq.n	8000fbc <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000f60:	2100      	movs	r1, #0
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	fba3 2302 	umull	r2, r3, r3, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d000      	beq.n	8000f70 <xQueueGenericCreate+0x28>
 8000f6e:	2101      	movs	r1, #1
 8000f70:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d122      	bne.n	8000fbc <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000f7e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000f82:	d81b      	bhi.n	8000fbc <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	3350      	adds	r3, #80	@ 0x50
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f990 	bl	80002b8 <pvPortMalloc>
 8000f98:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00d      	beq.n	8000fbc <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3350      	adds	r3, #80	@ 0x50
 8000fa8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f805 	bl	8000fc6 <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000fbc:	69fb      	ldr	r3, [r7, #28]
    }
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d103      	bne.n	8000fe2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e002      	b.n	8000fe8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	69b8      	ldr	r0, [r7, #24]
 8000ff8:	f7ff ff32 	bl	8000e60 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00e      	beq.n	8001038 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800102c:	2300      	movs	r3, #0
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f81c 	bl	8001070 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	461a      	mov	r2, r3
 8001056:	6939      	ldr	r1, [r7, #16]
 8001058:	6978      	ldr	r0, [r7, #20]
 800105a:	f7ff ff75 	bl	8000f48 <xQueueGenericCreate>
 800105e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff ffd3 	bl	800100c <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8001066:	68fb      	ldr	r3, [r7, #12]
    }
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001086:	f7ff fe57 	bl	8000d38 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001092:	429a      	cmp	r2, r3
 8001094:	d302      	bcc.n	800109c <xQueueGenericSend+0x2c>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d129      	bne.n	80010f0 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	68b9      	ldr	r1, [r7, #8]
 80010a0:	6a38      	ldr	r0, [r7, #32]
 80010a2:	f000 f931 	bl	8001308 <prvCopyDataToQueue>
 80010a6:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d010      	beq.n	80010d2 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	3324      	adds	r3, #36	@ 0x24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 ff05 	bl	8001ec4 <xTaskRemoveFromEventList>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80010c0:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <xQueueGenericSend+0x150>)
 80010c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	f3bf 8f4f 	dsb	sy
 80010cc:	f3bf 8f6f 	isb	sy
 80010d0:	e00a      	b.n	80010e8 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80010d8:	4b39      	ldr	r3, [pc, #228]	@ (80011c0 <xQueueGenericSend+0x150>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80010e8:	f7ff fe40 	bl	8000d6c <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e063      	b.n	80011b8 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80010f6:	f7ff fe39 	bl	8000d6c <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e05c      	b.n	80011b8 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ffa5 	bl	8002058 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001112:	f7ff fe2b 	bl	8000d6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001116:	f000 fc6b 	bl	80019f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800111a:	f7ff fe0d 	bl	8000d38 <vPortEnterCritical>
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d103      	bne.n	8001134 <xQueueGenericSend+0xc4>
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d103      	bne.n	800114a <xQueueGenericSend+0xda>
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800114a:	f7ff fe0f 	bl	8000d6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f000 ff94 	bl	8002084 <xTaskCheckForTimeOut>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d124      	bne.n	80011ac <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001162:	6a38      	ldr	r0, [r7, #32]
 8001164:	f000 f9c8 	bl	80014f8 <prvIsQueueFull>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d018      	beq.n	80011a0 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	3310      	adds	r3, #16
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fe8e 	bl	8001e98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800117c:	6a38      	ldr	r0, [r7, #32]
 800117e:	f000 f953 	bl	8001428 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001182:	f000 fc43 	bl	8001a0c <xTaskResumeAll>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f47f af7c 	bne.w	8001086 <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <xQueueGenericSend+0x150>)
 8001190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	f3bf 8f6f 	isb	sy
 800119e:	e772      	b.n	8001086 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80011a0:	6a38      	ldr	r0, [r7, #32]
 80011a2:	f000 f941 	bl	8001428 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80011a6:	f000 fc31 	bl	8001a0c <xTaskResumeAll>
 80011aa:	e76c      	b.n	8001086 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80011ac:	6a38      	ldr	r0, [r7, #32]
 80011ae:	f000 f93b 	bl	8001428 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80011b2:	f000 fc2b 	bl	8001a0c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80011b6:	2300      	movs	r3, #0
        }
    }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	e000ed04 	.word	0xe000ed04

080011c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80011d8:	f7ff fdae 	bl	8000d38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01f      	beq.n	8001228 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6a38      	ldr	r0, [r7, #32]
 80011ec:	f000 f8f6 	bl	80013dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00f      	beq.n	8001220 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	3310      	adds	r3, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fe5d 	bl	8001ec4 <xTaskRemoveFromEventList>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001210:	4b3c      	ldr	r3, [pc, #240]	@ (8001304 <xQueueReceive+0x140>)
 8001212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	f3bf 8f4f 	dsb	sy
 800121c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001220:	f7ff fda4 	bl	8000d6c <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8001224:	2301      	movs	r3, #1
 8001226:	e069      	b.n	80012fc <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800122e:	f7ff fd9d 	bl	8000d6c <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8001232:	2300      	movs	r3, #0
 8001234:	e062      	b.n	80012fc <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	2b00      	cmp	r3, #0
 800123a:	d106      	bne.n	800124a <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f000 ff09 	bl	8002058 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001246:	2301      	movs	r3, #1
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800124a:	f7ff fd8f 	bl	8000d6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800124e:	f000 fbcf 	bl	80019f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001252:	f7ff fd71 	bl	8000d38 <vPortEnterCritical>
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800125c:	b25b      	sxtb	r3, r3
 800125e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001262:	d103      	bne.n	800126c <xQueueReceive+0xa8>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001272:	b25b      	sxtb	r3, r3
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d103      	bne.n	8001282 <xQueueReceive+0xbe>
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001282:	f7ff fd73 	bl	8000d6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001286:	1d3a      	adds	r2, r7, #4
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fef8 	bl	8002084 <xTaskCheckForTimeOut>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d123      	bne.n	80012e2 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800129a:	6a38      	ldr	r0, [r7, #32]
 800129c:	f000 f916 	bl	80014cc <prvIsQueueEmpty>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d017      	beq.n	80012d6 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	3324      	adds	r3, #36	@ 0x24
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fdf2 	bl	8001e98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f000 f8b7 	bl	8001428 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80012ba:	f000 fba7 	bl	8001a0c <xTaskResumeAll>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d189      	bne.n	80011d8 <xQueueReceive+0x14>
                {
                    taskYIELD_WITHIN_API();
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <xQueueReceive+0x140>)
 80012c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	f3bf 8f4f 	dsb	sy
 80012d0:	f3bf 8f6f 	isb	sy
 80012d4:	e780      	b.n	80011d8 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80012d6:	6a38      	ldr	r0, [r7, #32]
 80012d8:	f000 f8a6 	bl	8001428 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80012dc:	f000 fb96 	bl	8001a0c <xTaskResumeAll>
 80012e0:	e77a      	b.n	80011d8 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80012e2:	6a38      	ldr	r0, [r7, #32]
 80012e4:	f000 f8a0 	bl	8001428 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80012e8:	f000 fb90 	bl	8001a0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012ec:	6a38      	ldr	r0, [r7, #32]
 80012ee:	f000 f8ed 	bl	80014cc <prvIsQueueEmpty>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f43f af6f 	beq.w	80011d8 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80012fa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3728      	adds	r7, #40	@ 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	e000ed04 	.word	0xe000ed04

08001308 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10d      	bne.n	8001342 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d14d      	bne.n	80013ca <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 ffac 	bl	8002290 <xTaskPriorityDisinherit>
 8001338:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	e043      	b.n	80013ca <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d119      	bne.n	800137c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6858      	ldr	r0, [r3, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	461a      	mov	r2, r3
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	f001 fbf6 	bl	8002b44 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	441a      	add	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	429a      	cmp	r2, r3
 8001370:	d32b      	bcc.n	80013ca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	e026      	b.n	80013ca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68d8      	ldr	r0, [r3, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	461a      	mov	r2, r3
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	f001 fbdc 	bl	8002b44 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	425b      	negs	r3, r3
 8001396:	441a      	add	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	425b      	negs	r3, r3
 80013b2:	441a      	add	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d105      	bne.n	80013ca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80013d2:	697b      	ldr	r3, [r7, #20]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d018      	beq.n	8001420 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	441a      	add	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	d303      	bcc.n	8001410 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68d9      	ldr	r1, [r3, #12]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	461a      	mov	r2, r3
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f001 fb92 	bl	8002b44 <memcpy>
    }
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001430:	f7ff fc82 	bl	8000d38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800143a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800143c:	e011      	b.n	8001462 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	2b00      	cmp	r3, #0
 8001444:	d012      	beq.n	800146c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3324      	adds	r3, #36	@ 0x24
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd3a 	bl	8001ec4 <xTaskRemoveFromEventList>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001456:	f000 fe5f 	bl	8002118 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3b01      	subs	r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	2b00      	cmp	r3, #0
 8001468:	dce9      	bgt.n	800143e <prvUnlockQueue+0x16>
 800146a:	e000      	b.n	800146e <prvUnlockQueue+0x46>
                    break;
 800146c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	22ff      	movs	r2, #255	@ 0xff
 8001472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001476:	f7ff fc79 	bl	8000d6c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800147a:	f7ff fc5d 	bl	8000d38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001484:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001486:	e011      	b.n	80014ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d012      	beq.n	80014b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3310      	adds	r3, #16
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fd15 	bl	8001ec4 <xTaskRemoveFromEventList>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80014a0:	f000 fe3a 	bl	8002118 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80014ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dce9      	bgt.n	8001488 <prvUnlockQueue+0x60>
 80014b4:	e000      	b.n	80014b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80014b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	22ff      	movs	r2, #255	@ 0xff
 80014bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80014c0:	f7ff fc54 	bl	8000d6c <vPortExitCritical>
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80014d4:	f7ff fc30 	bl	8000d38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e001      	b.n	80014ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80014ea:	f7ff fc3f 	bl	8000d6c <vPortExitCritical>

    return xReturn;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001500:	f7ff fc1a 	bl	8000d38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800150c:	429a      	cmp	r2, r3
 800150e:	d102      	bne.n	8001516 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001510:	2301      	movs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e001      	b.n	800151a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800151a:	f7ff fc27 	bl	8000d6c <vPortExitCritical>

    return xReturn;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <_kill>:

int _kill(int pid, int sig)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001540:	f001 fad4 	bl	8002aec <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	2216      	movs	r2, #22
 8001548:	601a      	str	r2, [r3, #0]
  return -1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_exit>:

void _exit (int status)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800155e:	f04f 31ff 	mov.w	r1, #4294967295
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffe7 	bl	8001536 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <_exit+0x12>

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f001 faa6 	bl	8002aec <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20005000 	.word	0x20005000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	2000293c 	.word	0x2000293c
 80015d4:	20002bc0 	.word	0x20002bc0

080015d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe5e 	bl	80002b8 <pvPortMalloc>
 80015fc:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001604:	205c      	movs	r0, #92	@ 0x5c
 8001606:	f7fe fe57 	bl	80002b8 <pvPortMalloc>
 800160a:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001612:	225c      	movs	r2, #92	@ 0x5c
 8001614:	2100      	movs	r1, #0
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f001 fa0c 	bl	8002a34 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	631a      	str	r2, [r3, #48]	@ 0x30
 8001622:	e005      	b.n	8001630 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001624:	6938      	ldr	r0, [r7, #16]
 8001626:	f7fe fef5 	bl	8000414 <vPortFree>
 800162a:	e001      	b.n	8001630 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00d      	beq.n	8001652 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001636:	2300      	movs	r3, #0
 8001638:	9303      	str	r3, [sp, #12]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f828 	bl	80016a2 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001652:	697b      	ldr	r3, [r7, #20]
    }
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff ffb3 	bl	80015e4 <prvCreateTask>
 800167e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001686:	6938      	ldr	r0, [r7, #16]
 8001688:	f000 f87c 	bl	8001784 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e002      	b.n	8001698 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001698:	697b      	ldr	r3, [r7, #20]
    }
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80016b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	461a      	mov	r2, r3
 80016ba:	21a5      	movs	r1, #165	@ 0xa5
 80016bc:	f001 f9ba 	bl	8002a34 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80016c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016ca:	3b01      	subs	r3, #1
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f023 0307 	bic.w	r3, r3, #7
 80016d8:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01e      	beq.n	800171e <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e012      	b.n	800170c <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	7819      	ldrb	r1, [r3, #0]
 80016ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	3334      	adds	r3, #52	@ 0x34
 80016f6:	460a      	mov	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	d9e9      	bls.n	80016e6 <prvInitialiseNewTask+0x44>
 8001712:	e000      	b.n	8001716 <prvInitialiseNewTask+0x74>
            {
                break;
 8001714:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d901      	bls.n	8001728 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001724:	2305      	movs	r3, #5
 8001726:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172a:	6a3a      	ldr	r2, [r7, #32]
 800172c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	6a3a      	ldr	r2, [r7, #32]
 8001732:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001736:	3304      	adds	r3, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fefe 	bl	800053a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800173e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001740:	3318      	adds	r3, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fef9 	bl	800053a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800174c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f1c3 0206 	rsb	r2, r3, #6
 8001754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001756:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	6938      	ldr	r0, [r7, #16]
 8001764:	f7ff fa4c 	bl	8000c00 <pxPortInitialiseStack>
 8001768:	4602      	mov	r2, r0
 800176a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001778:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800178c:	f7ff fad4 	bl	8000d38 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001790:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <prvAddNewTaskToReadyList+0x114>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a40      	ldr	r2, [pc, #256]	@ (8001898 <prvAddNewTaskToReadyList+0x114>)
 8001798:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800179a:	4b40      	ldr	r3, [pc, #256]	@ (800189c <prvAddNewTaskToReadyList+0x118>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80017a2:	4a3e      	ldr	r2, [pc, #248]	@ (800189c <prvAddNewTaskToReadyList+0x118>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <prvAddNewTaskToReadyList+0x114>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d110      	bne.n	80017d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80017b0:	f000 fcd6 	bl	8002160 <prvInitialiseTaskLists>
 80017b4:	e00d      	b.n	80017d2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80017b6:	4b3a      	ldr	r3, [pc, #232]	@ (80018a0 <prvAddNewTaskToReadyList+0x11c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017be:	4b37      	ldr	r3, [pc, #220]	@ (800189c <prvAddNewTaskToReadyList+0x118>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d802      	bhi.n	80017d2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80017cc:	4a33      	ldr	r2, [pc, #204]	@ (800189c <prvAddNewTaskToReadyList+0x118>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80017d2:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <prvAddNewTaskToReadyList+0x120>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a32      	ldr	r2, [pc, #200]	@ (80018a4 <prvAddNewTaskToReadyList+0x120>)
 80017da:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017dc:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <prvAddNewTaskToReadyList+0x120>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e8:	2201      	movs	r2, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	4b2e      	ldr	r3, [pc, #184]	@ (80018a8 <prvAddNewTaskToReadyList+0x124>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	4a2d      	ldr	r2, [pc, #180]	@ (80018a8 <prvAddNewTaskToReadyList+0x124>)
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fa:	492c      	ldr	r1, [pc, #176]	@ (80018ac <prvAddNewTaskToReadyList+0x128>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	3304      	adds	r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	3204      	adds	r2, #4
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <prvAddNewTaskToReadyList+0x128>)
 800183a:	441a      	add	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001844:	4919      	ldr	r1, [pc, #100]	@ (80018ac <prvAddNewTaskToReadyList+0x128>)
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	4814      	ldr	r0, [pc, #80]	@ (80018ac <prvAddNewTaskToReadyList+0x128>)
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4403      	add	r3, r0
 8001864:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001866:	f7ff fa81 	bl	8000d6c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800186a:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <prvAddNewTaskToReadyList+0x11c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00e      	beq.n	8001890 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <prvAddNewTaskToReadyList+0x118>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <prvAddNewTaskToReadyList+0x10c>
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <prvAddNewTaskToReadyList+0x12c>)
 8001882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f3bf 8f4f 	dsb	sy
 800188c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20002a2c 	.word	0x20002a2c
 800189c:	20002940 	.word	0x20002940
 80018a0:	20002a38 	.word	0x20002a38
 80018a4:	20002a48 	.word	0x20002a48
 80018a8:	20002a34 	.word	0x20002a34
 80018ac:	20002944 	.word	0x20002944
 80018b0:	e000ed04 	.word	0xe000ed04

080018b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 80018c6:	f000 f893 	bl	80019f0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018ca:	2100      	movs	r1, #0
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 fd63 	bl	8002398 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80018d2:	f000 f89b 	bl	8001a0c <xTaskResumeAll>
 80018d6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d107      	bne.n	80018ee <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <vTaskDelay+0x44>)
 80018e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f3bf 8f4f 	dsb	sy
 80018ea:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000ed04 	.word	0xe000ed04

080018fc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001902:	2301      	movs	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e011      	b.n	8001934 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001910:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <prvCreateIdleTasks+0x8c>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	7819      	ldrb	r1, [r3, #0]
 8001918:	463a      	mov	r2, r7
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4413      	add	r3, r2
 800191e:	460a      	mov	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001922:	463a      	mov	r2, r7
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	ddea      	ble.n	8001910 <prvCreateIdleTasks+0x14>
 800193a:	e000      	b.n	800193e <prvCreateIdleTasks+0x42>
        {
            break;
 800193c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	e016      	b.n	8001972 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <prvCreateIdleTasks+0x90>)
 8001946:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4a10      	ldr	r2, [pc, #64]	@ (8001990 <prvCreateIdleTasks+0x94>)
 800194e:	4413      	add	r3, r2
 8001950:	4639      	mov	r1, r7
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800195e:	6938      	ldr	r0, [r7, #16]
 8001960:	f7ff fe7c 	bl	800165c <xTaskCreate>
 8001964:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	3301      	adds	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dde5      	ble.n	8001944 <prvCreateIdleTasks+0x48>
 8001978:	e000      	b.n	800197c <prvCreateIdleTasks+0x80>
        {
            break;
 800197a:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800197c:	69fb      	ldr	r3, [r7, #28]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	08002c4c 	.word	0x08002c4c
 800198c:	08002131 	.word	0x08002131
 8001990:	20002a50 	.word	0x20002a50

08001994 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800199a:	f7ff ffaf 	bl	80018fc <prvCreateIdleTasks>
 800199e:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d115      	bne.n	80019d2 <vTaskStartScheduler+0x3e>
    __asm volatile
 80019a6:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80019aa:	f383 8811 	msr	BASEPRI, r3
 80019ae:	f3bf 8f6f 	isb	sy
 80019b2:	f3bf 8f4f 	dsb	sy
 80019b6:	603b      	str	r3, [r7, #0]
}
 80019b8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <vTaskStartScheduler+0x4c>)
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <vTaskStartScheduler+0x50>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <vTaskStartScheduler+0x54>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80019ce:	f7ff f985 	bl	8000cdc <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <vTaskStartScheduler+0x58>)
 80019d4:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20002a4c 	.word	0x20002a4c
 80019e4:	20002a38 	.word	0x20002a38
 80019e8:	20002a30 	.word	0x20002a30
 80019ec:	20000008 	.word	0x20000008

080019f0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <vTaskSuspendAll+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a03      	ldr	r2, [pc, #12]	@ (8001a08 <vTaskSuspendAll+0x18>)
 80019fc:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20002a54 	.word	0x20002a54

08001a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001a1a:	f7ff f98d 	bl	8000d38 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001a22:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd8 <xTaskResumeAll+0x1cc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd8 <xTaskResumeAll+0x1cc>)
 8001a2a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd8 <xTaskResumeAll+0x1cc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 80ca 	bne.w	8001bca <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a36:	4b69      	ldr	r3, [pc, #420]	@ (8001bdc <xTaskResumeAll+0x1d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80c5 	beq.w	8001bca <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a40:	e08e      	b.n	8001b60 <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001a42:	4b67      	ldr	r3, [pc, #412]	@ (8001be0 <xTaskResumeAll+0x1d4>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	6a12      	ldr	r2, [r2, #32]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	69d2      	ldr	r2, [r2, #28]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d103      	bne.n	8001a78 <xTaskResumeAll+0x6c>
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	6892      	ldr	r2, [r2, #8]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d103      	bne.n	8001ab6 <xTaskResumeAll+0xaa>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1e5a      	subs	r2, r3, #1
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <xTaskResumeAll+0x1d8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	4a43      	ldr	r2, [pc, #268]	@ (8001be4 <xTaskResumeAll+0x1d8>)
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001adc:	4942      	ldr	r1, [pc, #264]	@ (8001be8 <xTaskResumeAll+0x1dc>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3304      	adds	r3, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	3204      	adds	r2, #4
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	1d1a      	adds	r2, r3, #4
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4a33      	ldr	r2, [pc, #204]	@ (8001be8 <xTaskResumeAll+0x1dc>)
 8001b1c:	441a      	add	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b26:	4930      	ldr	r1, [pc, #192]	@ (8001be8 <xTaskResumeAll+0x1dc>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b38:	1c59      	adds	r1, r3, #1
 8001b3a:	482b      	ldr	r0, [pc, #172]	@ (8001be8 <xTaskResumeAll+0x1dc>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4403      	add	r3, r0
 8001b46:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <xTaskResumeAll+0x1e0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d904      	bls.n	8001b60 <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001b56:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <xTaskResumeAll+0x1e4>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b60:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <xTaskResumeAll+0x1d4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f af6c 	bne.w	8001a42 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001b70:	f000 fb74 	bl	800225c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b74:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <xTaskResumeAll+0x1e8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d012      	beq.n	8001ba6 <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001b80:	f000 f83c 	bl	8001bfc <xTaskIncrementTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001b8a:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <xTaskResumeAll+0x1e4>)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ef      	bne.n	8001b80 <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <xTaskResumeAll+0x1e8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <xTaskResumeAll+0x1e4>)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <xTaskResumeAll+0x1e0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <xTaskResumeAll+0x1ec>)
 8001bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f3bf 8f4f 	dsb	sy
 8001bc6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001bca:	f7ff f8cf 	bl	8000d6c <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001bce:	69bb      	ldr	r3, [r7, #24]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20002a54 	.word	0x20002a54
 8001bdc:	20002a2c 	.word	0x20002a2c
 8001be0:	200029ec 	.word	0x200029ec
 8001be4:	20002a34 	.word	0x20002a34
 8001be8:	20002944 	.word	0x20002944
 8001bec:	20002940 	.word	0x20002940
 8001bf0:	20002a40 	.word	0x20002a40
 8001bf4:	20002a3c 	.word	0x20002a3c
 8001bf8:	e000ed04 	.word	0xe000ed04

08001bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001c06:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <xTaskIncrementTick+0x1e4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 80de 	bne.w	8001dcc <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c10:	4b74      	ldr	r3, [pc, #464]	@ (8001de4 <xTaskIncrementTick+0x1e8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001c18:	4a72      	ldr	r2, [pc, #456]	@ (8001de4 <xTaskIncrementTick+0x1e8>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d110      	bne.n	8001c46 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001c24:	4b70      	ldr	r3, [pc, #448]	@ (8001de8 <xTaskIncrementTick+0x1ec>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	4b70      	ldr	r3, [pc, #448]	@ (8001dec <xTaskIncrementTick+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001de8 <xTaskIncrementTick+0x1ec>)
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4a6e      	ldr	r2, [pc, #440]	@ (8001dec <xTaskIncrementTick+0x1f0>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b6d      	ldr	r3, [pc, #436]	@ (8001df0 <xTaskIncrementTick+0x1f4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	4a6c      	ldr	r2, [pc, #432]	@ (8001df0 <xTaskIncrementTick+0x1f4>)
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	f000 fb0b 	bl	800225c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001c46:	4b6b      	ldr	r3, [pc, #428]	@ (8001df4 <xTaskIncrementTick+0x1f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f0c0 80a8 	bcc.w	8001da2 <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c52:	4b65      	ldr	r3, [pc, #404]	@ (8001de8 <xTaskIncrementTick+0x1ec>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001c5c:	4b65      	ldr	r3, [pc, #404]	@ (8001df4 <xTaskIncrementTick+0x1f8>)
 8001c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c62:	601a      	str	r2, [r3, #0]
                    break;
 8001c64:	e09d      	b.n	8001da2 <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c66:	4b60      	ldr	r3, [pc, #384]	@ (8001de8 <xTaskIncrementTick+0x1ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d203      	bcs.n	8001c86 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001c7e:	4a5d      	ldr	r2, [pc, #372]	@ (8001df4 <xTaskIncrementTick+0x1f8>)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6013      	str	r3, [r2, #0]
                        break;
 8001c84:	e08d      	b.n	8001da2 <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68d2      	ldr	r2, [r2, #12]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	6892      	ldr	r2, [r2, #8]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d103      	bne.n	8001cb4 <xTaskIncrementTick+0xb8>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01e      	beq.n	8001d0a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	6a12      	ldr	r2, [r2, #32]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	69d2      	ldr	r2, [r2, #28]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	3318      	adds	r3, #24
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d103      	bne.n	8001cfa <xTaskIncrementTick+0xfe>
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0e:	2201      	movs	r2, #1
 8001d10:	409a      	lsls	r2, r3
 8001d12:	4b39      	ldr	r3, [pc, #228]	@ (8001df8 <xTaskIncrementTick+0x1fc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	4a37      	ldr	r2, [pc, #220]	@ (8001df8 <xTaskIncrementTick+0x1fc>)
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d20:	4936      	ldr	r1, [pc, #216]	@ (8001dfc <xTaskIncrementTick+0x200>)
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	3204      	adds	r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1d1a      	adds	r2, r3, #4
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4a27      	ldr	r2, [pc, #156]	@ (8001dfc <xTaskIncrementTick+0x200>)
 8001d60:	441a      	add	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	615a      	str	r2, [r3, #20]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6a:	4924      	ldr	r1, [pc, #144]	@ (8001dfc <xTaskIncrementTick+0x200>)
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	481f      	ldr	r0, [pc, #124]	@ (8001dfc <xTaskIncrementTick+0x200>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4403      	add	r3, r0
 8001d8a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <xTaskIncrementTick+0x204>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	429a      	cmp	r2, r3
 8001d98:	f67f af5b 	bls.w	8001c52 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001da0:	e757      	b.n	8001c52 <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <xTaskIncrementTick+0x204>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da8:	4914      	ldr	r1, [pc, #80]	@ (8001dfc <xTaskIncrementTick+0x200>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d901      	bls.n	8001dbe <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <xTaskIncrementTick+0x208>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e004      	b.n	8001dd6 <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <xTaskIncrementTick+0x20c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <xTaskIncrementTick+0x20c>)
 8001dd4:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20002a54 	.word	0x20002a54
 8001de4:	20002a30 	.word	0x20002a30
 8001de8:	200029e4 	.word	0x200029e4
 8001dec:	200029e8 	.word	0x200029e8
 8001df0:	20002a44 	.word	0x20002a44
 8001df4:	20002a4c 	.word	0x20002a4c
 8001df8:	20002a34 	.word	0x20002a34
 8001dfc:	20002944 	.word	0x20002944
 8001e00:	20002940 	.word	0x20002940
 8001e04:	20002a40 	.word	0x20002a40
 8001e08:	20002a3c 	.word	0x20002a3c

08001e0c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <vTaskSwitchContext+0x78>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <vTaskSwitchContext+0x7c>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001e20:	e02b      	b.n	8001e7a <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <vTaskSwitchContext+0x7c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001e28:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <vTaskSwitchContext+0x80>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f1c3 031f 	rsb	r3, r3, #31
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <vTaskSwitchContext+0x84>)
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3308      	adds	r3, #8
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d103      	bne.n	8001e6c <vTaskSwitchContext+0x60>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <vTaskSwitchContext+0x88>)
 8001e74:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <vTaskSwitchContext+0x88>)
 8001e78:	681b      	ldr	r3, [r3, #0]
    }
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20002a54 	.word	0x20002a54
 8001e88:	20002a40 	.word	0x20002a40
 8001e8c:	20002a34 	.word	0x20002a34
 8001e90:	20002944 	.word	0x20002944
 8001e94:	20002940 	.word	0x20002940

08001e98 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <vTaskPlaceOnEventList+0x28>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fb51 	bl	8000552 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f000 fa70 	bl	8002398 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20002940 	.word	0x20002940

08001ec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	6a12      	ldr	r2, [r2, #32]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	69d2      	ldr	r2, [r2, #28]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d103      	bne.n	8001f02 <xTaskRemoveFromEventList+0x3e>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	6a1a      	ldr	r2, [r3, #32]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001f12:	4b4b      	ldr	r3, [pc, #300]	@ (8002040 <xTaskRemoveFromEventList+0x17c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d160      	bne.n	8001fdc <xTaskRemoveFromEventList+0x118>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	68d2      	ldr	r2, [r2, #12]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d103      	bne.n	8001f48 <xTaskRemoveFromEventList+0x84>
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <xTaskRemoveFromEventList+0x180>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	4a37      	ldr	r2, [pc, #220]	@ (8002044 <xTaskRemoveFromEventList+0x180>)
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f6e:	4936      	ldr	r1, [pc, #216]	@ (8002048 <xTaskRemoveFromEventList+0x184>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	3204      	adds	r2, #4
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	1d1a      	adds	r2, r3, #4
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4a26      	ldr	r2, [pc, #152]	@ (8002048 <xTaskRemoveFromEventList+0x184>)
 8001fae:	441a      	add	r2, r3
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb8:	4923      	ldr	r1, [pc, #140]	@ (8002048 <xTaskRemoveFromEventList+0x184>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	481e      	ldr	r0, [pc, #120]	@ (8002048 <xTaskRemoveFromEventList+0x184>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4403      	add	r3, r0
 8001fd8:	6019      	str	r1, [r3, #0]
 8001fda:	e01b      	b.n	8002014 <xTaskRemoveFromEventList+0x150>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <xTaskRemoveFromEventList+0x188>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	61da      	str	r2, [r3, #28]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	621a      	str	r2, [r3, #32]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	3218      	adds	r2, #24
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f103 0218 	add.w	r2, r3, #24
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	4a11      	ldr	r2, [pc, #68]	@ (800204c <xTaskRemoveFromEventList+0x188>)
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <xTaskRemoveFromEventList+0x188>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a0e      	ldr	r2, [pc, #56]	@ (800204c <xTaskRemoveFromEventList+0x188>)
 8002012:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002018:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <xTaskRemoveFromEventList+0x18c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	429a      	cmp	r2, r3
 8002020:	d905      	bls.n	800202e <xTaskRemoveFromEventList+0x16a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002022:	2301      	movs	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <xTaskRemoveFromEventList+0x190>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e001      	b.n	8002032 <xTaskRemoveFromEventList+0x16e>
        }
        else
        {
            xReturn = pdFALSE;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002032:	69fb      	ldr	r3, [r7, #28]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3724      	adds	r7, #36	@ 0x24
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20002a54 	.word	0x20002a54
 8002044:	20002a34 	.word	0x20002a34
 8002048:	20002944 	.word	0x20002944
 800204c:	200029ec 	.word	0x200029ec
 8002050:	20002940 	.word	0x20002940
 8002054:	20002a40 	.word	0x20002a40

08002058 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <vTaskInternalSetTimeOutState+0x24>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <vTaskInternalSetTimeOutState+0x28>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20002a44 	.word	0x20002a44
 8002080:	20002a30 	.word	0x20002a30

08002084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800208e:	f7fe fe53 	bl	8000d38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002092:	4b1f      	ldr	r3, [pc, #124]	@ (8002110 <xTaskCheckForTimeOut+0x8c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020aa:	d102      	bne.n	80020b2 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e026      	b.n	8002100 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <xTaskCheckForTimeOut+0x90>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d00a      	beq.n	80020d4 <xTaskCheckForTimeOut+0x50>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d305      	bcc.n	80020d4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e015      	b.n	8002100 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20b      	bcs.n	80020f6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad2      	subs	r2, r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffb4 	bl	8002058 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e004      	b.n	8002100 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80020fc:	2301      	movs	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002100:	f7fe fe34 	bl	8000d6c <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002104:	697b      	ldr	r3, [r7, #20]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20002a30 	.word	0x20002a30
 8002114:	20002a44 	.word	0x20002a44

08002118 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <vTaskMissedYield+0x14>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20002a40 	.word	0x20002a40

08002130 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002138:	f000 f852 	bl	80021e0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <prvIdleTask+0x28>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d9f9      	bls.n	8002138 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002144:	4b05      	ldr	r3, [pc, #20]	@ (800215c <prvIdleTask+0x2c>)
 8002146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002154:	e7f0      	b.n	8002138 <prvIdleTask+0x8>
 8002156:	bf00      	nop
 8002158:	20002944 	.word	0x20002944
 800215c:	e000ed04 	.word	0xe000ed04

08002160 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	e00c      	b.n	8002186 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <prvInitialiseTaskLists+0x60>)
 8002178:	4413      	add	r3, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9be 	bl	80004fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3301      	adds	r3, #1
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d9ef      	bls.n	800216c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800218c:	480d      	ldr	r0, [pc, #52]	@ (80021c4 <prvInitialiseTaskLists+0x64>)
 800218e:	f7fe f9b5 	bl	80004fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002192:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <prvInitialiseTaskLists+0x68>)
 8002194:	f7fe f9b2 	bl	80004fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <prvInitialiseTaskLists+0x6c>)
 800219a:	f7fe f9af 	bl	80004fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800219e:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <prvInitialiseTaskLists+0x70>)
 80021a0:	f7fe f9ac 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80021a4:	480b      	ldr	r0, [pc, #44]	@ (80021d4 <prvInitialiseTaskLists+0x74>)
 80021a6:	f7fe f9a9 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80021aa:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <prvInitialiseTaskLists+0x78>)
 80021ac:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <prvInitialiseTaskLists+0x64>)
 80021ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <prvInitialiseTaskLists+0x7c>)
 80021b2:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <prvInitialiseTaskLists+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20002944 	.word	0x20002944
 80021c4:	200029bc 	.word	0x200029bc
 80021c8:	200029d0 	.word	0x200029d0
 80021cc:	200029ec 	.word	0x200029ec
 80021d0:	20002a00 	.word	0x20002a00
 80021d4:	20002a18 	.word	0x20002a18
 80021d8:	200029e4 	.word	0x200029e4
 80021dc:	200029e8 	.word	0x200029e8

080021e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80021e6:	e019      	b.n	800221c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80021e8:	f7fe fda6 	bl	8000d38 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80021ec:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <prvCheckTasksWaitingTermination+0x50>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f9e2 	bl	80005c2 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <prvCheckTasksWaitingTermination+0x54>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3b01      	subs	r3, #1
 8002204:	4a0b      	ldr	r2, [pc, #44]	@ (8002234 <prvCheckTasksWaitingTermination+0x54>)
 8002206:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <prvCheckTasksWaitingTermination+0x58>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <prvCheckTasksWaitingTermination+0x58>)
 8002210:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002212:	f7fe fdab 	bl	8000d6c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f810 	bl	800223c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <prvCheckTasksWaitingTermination+0x58>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1e1      	bne.n	80021e8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20002a00 	.word	0x20002a00
 8002234:	20002a2c 	.word	0x20002a2c
 8002238:	20002a14 	.word	0x20002a14

0800223c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f8e3 	bl	8000414 <vPortFree>
            vPortFree( pxTCB );
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe f8e0 	bl	8000414 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <prvResetNextTaskUnblockTime+0x2c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <prvResetNextTaskUnblockTime+0x30>)
 800226c:	f04f 32ff 	mov.w	r2, #4294967295
 8002270:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002272:	e005      	b.n	8002280 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <prvResetNextTaskUnblockTime+0x2c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a03      	ldr	r2, [pc, #12]	@ (800228c <prvResetNextTaskUnblockTime+0x30>)
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	200029e4 	.word	0x200029e4
 800228c:	20002a4c 	.word	0x20002a4c

08002290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d06e      	beq.n	8002384 <xTaskPriorityDisinherit+0xf4>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d063      	beq.n	8002384 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d15f      	bne.n	8002384 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f97a 	bl	80005c2 <uxListRemove>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	2201      	movs	r2, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <xTaskPriorityDisinherit+0x100>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4013      	ands	r3, r2
 80022e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002390 <xTaskPriorityDisinherit+0x100>)
 80022e8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f1c3 0206 	rsb	r2, r3, #6
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	2201      	movs	r2, #1
 8002304:	409a      	lsls	r2, r3
 8002306:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <xTaskPriorityDisinherit+0x100>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	4a20      	ldr	r2, [pc, #128]	@ (8002390 <xTaskPriorityDisinherit+0x100>)
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002314:	491f      	ldr	r1, [pc, #124]	@ (8002394 <xTaskPriorityDisinherit+0x104>)
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	3204      	adds	r2, #4
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1d1a      	adds	r2, r3, #4
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <xTaskPriorityDisinherit+0x104>)
 8002354:	441a      	add	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235e:	490d      	ldr	r1, [pc, #52]	@ (8002394 <xTaskPriorityDisinherit+0x104>)
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	4808      	ldr	r0, [pc, #32]	@ (8002394 <xTaskPriorityDisinherit+0x104>)
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4403      	add	r3, r0
 800237e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002380:	2301      	movs	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002384:	697b      	ldr	r3, [r7, #20]
    }
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20002a34 	.word	0x20002a34
 8002394:	20002944 	.word	0x20002944

08002398 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80023a2:	4b37      	ldr	r3, [pc, #220]	@ (8002480 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80023a8:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <prvAddCurrentTaskToDelayedList+0xec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80023ae:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <prvAddCurrentTaskToDelayedList+0xf0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023b4:	4b35      	ldr	r3, [pc, #212]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3304      	adds	r3, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f901 	bl	80005c2 <uxListRemove>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	2201      	movs	r2, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002490 <prvAddCurrentTaskToDelayedList+0xf8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4013      	ands	r3, r2
 80023da:	4a2d      	ldr	r2, [pc, #180]	@ (8002490 <prvAddCurrentTaskToDelayedList+0xf8>)
 80023dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d124      	bne.n	8002430 <prvAddCurrentTaskToDelayedList+0x98>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d021      	beq.n	8002430 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b26      	ldr	r3, [pc, #152]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	4b24      	ldr	r3, [pc, #144]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	6892      	ldr	r2, [r2, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	4b21      	ldr	r3, [pc, #132]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	3204      	adds	r2, #4
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1d1a      	adds	r2, r3, #4
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	4b1c      	ldr	r3, [pc, #112]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002420:	615a      	str	r2, [r3, #20]
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	4a1a      	ldr	r2, [pc, #104]	@ (8002494 <prvAddCurrentTaskToDelayedList+0xfc>)
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800242e:	e022      	b.n	8002476 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002438:	4b14      	ldr	r3, [pc, #80]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002448:	4b10      	ldr	r3, [pc, #64]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3304      	adds	r3, #4
 800244e:	4619      	mov	r1, r3
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	f7fe f87e 	bl	8000552 <vListInsert>
}
 8002456:	e00e      	b.n	8002476 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <prvAddCurrentTaskToDelayedList+0xf4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3304      	adds	r3, #4
 800245e:	4619      	mov	r1, r3
 8002460:	69b8      	ldr	r0, [r7, #24]
 8002462:	f7fe f876 	bl	8000552 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <prvAddCurrentTaskToDelayedList+0x100>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d202      	bcs.n	8002476 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002470:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <prvAddCurrentTaskToDelayedList+0x100>)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6013      	str	r3, [r2, #0]
}
 8002476:	bf00      	nop
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20002a30 	.word	0x20002a30
 8002484:	200029e4 	.word	0x200029e4
 8002488:	200029e8 	.word	0x200029e8
 800248c:	20002940 	.word	0x20002940
 8002490:	20002a34 	.word	0x20002a34
 8002494:	20002a18 	.word	0x20002a18
 8002498:	20002a4c 	.word	0x20002a4c

0800249c <_ZN4UARTC1Ei>:
 *      Author: AHMED ABDELAZIZ
 */

#include "uart.h"

	UART::UART(int data)
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	{
		if(this == reinterpret_cast<UART*>(UART1INS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <_ZN4UARTC1Ei+0x54>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d104      	bne.n	80024b8 <_ZN4UARTC1Ei+0x1c>
		{
			INIT(1);
 80024ae:	2101      	movs	r1, #1
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f825 	bl	8002500 <_ZN4UART4INITEi>
 80024b6:	e015      	b.n	80024e4 <_ZN4UARTC1Ei+0x48>
		}
		else if (this == reinterpret_cast<UART*>(UART2INS))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	@ (80024f4 <_ZN4UARTC1Ei+0x58>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d104      	bne.n	80024ca <_ZN4UARTC1Ei+0x2e>
		{
			INIT(2);
 80024c0:	2102      	movs	r1, #2
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f81c 	bl	8002500 <_ZN4UART4INITEi>
 80024c8:	e00c      	b.n	80024e4 <_ZN4UARTC1Ei+0x48>
		}
		else if(this == reinterpret_cast<UART*>(UART3INS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <_ZN4UARTC1Ei+0x5c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d104      	bne.n	80024dc <_ZN4UARTC1Ei+0x40>
		{
			INIT(3);
 80024d2:	2103      	movs	r1, #3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f813 	bl	8002500 <_ZN4UART4INITEi>
 80024da:	e003      	b.n	80024e4 <_ZN4UARTC1Ei+0x48>
		}
		else
		{
			Send(msg);
 80024dc:	4907      	ldr	r1, [pc, #28]	@ (80024fc <_ZN4UARTC1Ei+0x60>)
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8ac 	bl	800263c <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		}
	}
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40004800 	.word	0x40004800
 80024fc:	20002a58 	.word	0x20002a58

08002500 <_ZN4UART4INITEi>:
	void UART::INIT(int UART_NUMBER)
	{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
		switch(UART_NUMBER)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d03e      	beq.n	800258e <_ZN4UART4INITEi+0x8e>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b03      	cmp	r3, #3
 8002514:	dc57      	bgt.n	80025c6 <_ZN4UART4INITEi+0xc6>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d003      	beq.n	8002524 <_ZN4UART4INITEi+0x24>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d019      	beq.n	8002556 <_ZN4UART4INITEi+0x56>
			//Enable Transmission and Receiving
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
			CR1|=(1<<13); // USART Enable
			break;
	}
	}
 8002522:	e050      	b.n	80025c6 <_ZN4UART4INITEi+0xc6>
			RCC->APB2ENR = (1<<0) | (1<<2) | (1<<14);
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <_ZN4UART4INITEi+0xd0>)
 8002526:	f244 0205 	movw	r2, #16389	@ 0x4005
 800252a:	619a      	str	r2, [r3, #24]
			GPIOA->CRH = (0x000B<<4); // PA9 OutPut AFIO TX
 800252c:	4b29      	ldr	r3, [pc, #164]	@ (80025d4 <_ZN4UART4INITEi+0xd4>)
 800252e:	22b0      	movs	r2, #176	@ 0xb0
 8002530:	605a      	str	r2, [r3, #4]
			GPIOA->CRH = (4<<8); //PA10 InPut Floating RX
 8002532:	4b28      	ldr	r3, [pc, #160]	@ (80025d4 <_ZN4UART4INITEi+0xd4>)
 8002534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002538:	605a      	str	r2, [r3, #4]
			BRR = USART_div;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f240 3241 	movw	r2, #833	@ 0x341
 8002540:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	220c      	movs	r2, #12
 8002546:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]
			break;
 8002554:	e037      	b.n	80025c6 <_ZN4UART4INITEi+0xc6>
			RCC->APB1ENR =(1<<17); // USART2
 8002556:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <_ZN4UART4INITEi+0xd0>)
 8002558:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800255c:	61da      	str	r2, [r3, #28]
			RCC->APB2ENR |= (1<<0) | (1<<2); //  AFIO and PortA
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <_ZN4UART4INITEi+0xd0>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <_ZN4UART4INITEi+0xd0>)
 8002564:	f043 0305 	orr.w	r3, r3, #5
 8002568:	6193      	str	r3, [r2, #24]
			GPIOA->CRL =(0x004B<<8);
 800256a:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <_ZN4UART4INITEi+0xd4>)
 800256c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002570:	601a      	str	r2, [r3, #0]
			BRR=USART_div;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f240 3241 	movw	r2, #833	@ 0x341
 8002578:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	220c      	movs	r2, #12
 800257e:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]
			break;
 800258c:	e01b      	b.n	80025c6 <_ZN4UART4INITEi+0xc6>
			RCC->APB1ENR =(1<<18); // USART3
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <_ZN4UART4INITEi+0xd0>)
 8002590:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002594:	61da      	str	r2, [r3, #28]
			RCC->APB2ENR |=(1<<0) | (1<<3); //AFIO & Port B
 8002596:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <_ZN4UART4INITEi+0xd0>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <_ZN4UART4INITEi+0xd0>)
 800259c:	f043 0309 	orr.w	r3, r3, #9
 80025a0:	6193      	str	r3, [r2, #24]
			GPIOB->CRH =(0x004B<<8); //
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <_ZN4UART4INITEi+0xd8>)
 80025a4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80025a8:	605a      	str	r2, [r3, #4]
			BRR=USART_div;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f240 3241 	movw	r2, #833	@ 0x341
 80025b0:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	220c      	movs	r2, #12
 80025b6:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	60da      	str	r2, [r3, #12]
			break;
 80025c4:	bf00      	nop
	}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00

080025dc <_ZN4UART4ReadEv>:
	char UART::Read()
	{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
		while(!(SR&(1<<5))); //Bit 5 RXNE: Read data register not empty
 80025e4:	bf00      	nop
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f9      	beq.n	80025e6 <_ZN4UART4ReadEv+0xa>
		unsigned char mread=USART1->DR &0x00ff;
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <_ZN4UART4ReadEv+0x28>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
		return mread; //DR &0x00FF;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
	}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40013800 	.word	0x40013800

08002608 <_ZN4UART4SendEc>:
	void UART::Send (char data)
	{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
		unsigned char mread=USART1->DR=data &0x00FF;
 8002614:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <_ZN4UART4SendEc+0x30>)
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	6053      	str	r3, [r2, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
		while(!(SR&(1<<7)));
 800261c:	bf00      	nop
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f9      	beq.n	800261e <_ZN4UART4SendEc+0x16>
	}
 800262a:	bf00      	nop
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40013800 	.word	0x40013800

0800263c <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	void UART::Send(const std::string& data) // (std::string data) Succeed
	// (std::string_view data) // (char* data) Failed ??!
	{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
		auto i{0};
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
		while(i!='\0')
 800264a:	e00a      	b.n	8002662 <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
		{
			Send(data[i]);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4619      	mov	r1, r3
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f000 f8cf 	bl	80027f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002656:	4603      	mov	r3, r0
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ffd3 	bl	8002608 <_ZN4UART4SendEc>
		while(i!='\0')
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f1      	bne.n	800264c <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
		}
	}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZN4UARTnwEj13UART_Instance>:
	void* UART::operator new(size_t, UART_Instance uart)
	{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
		return reinterpret_cast<void*>(uart); // return uart-instance as a pointer not as an Address.
 800267c:	683b      	ldr	r3, [r7, #0]
	}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <_Z41__static_initialization_and_destruction_0ii>:
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d115      	bne.n	80026c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800269e:	4293      	cmp	r3, r2
 80026a0:	d110      	bne.n	80026c4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f855 	bl	8002756 <_ZNSaIcEC1Ev>
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	461a      	mov	r2, r3
 80026b2:	490c      	ldr	r1, [pc, #48]	@ (80026e4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80026b6:	f000 f8bb 	bl	8002830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f84a 	bl	8002758 <_ZNSaIcED1Ev>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <_Z41__static_initialization_and_destruction_0ii+0x52>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d102      	bne.n	80026da <_Z41__static_initialization_and_destruction_0ii+0x52>
 80026d4:	4804      	ldr	r0, [pc, #16]	@ (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80026d6:	f000 f887 	bl	80027e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	08002c54 	.word	0x08002c54
 80026e8:	20002a58 	.word	0x20002a58

080026ec <_GLOBAL__sub_I__ZN4UARTC2Ei>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff ffc7 	bl	8002688 <_Z41__static_initialization_and_destruction_0ii>
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_GLOBAL__sub_D__ZN4UARTC2Ei>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
 8002700:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff ffbf 	bl	8002688 <_Z41__static_initialization_and_destruction_0ii>
 800270a:	bd80      	pop	{r7, pc}

0800270c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800270c:	f7fe ff64 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002710:	480b      	ldr	r0, [pc, #44]	@ (8002740 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002712:	490c      	ldr	r1, [pc, #48]	@ (8002744 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002714:	4a0c      	ldr	r2, [pc, #48]	@ (8002748 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002718:	e002      	b.n	8002720 <LoopCopyDataInit>

0800271a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800271c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271e:	3304      	adds	r3, #4

08002720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002724:	d3f9      	bcc.n	800271a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002726:	4a09      	ldr	r2, [pc, #36]	@ (800274c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002728:	4c09      	ldr	r4, [pc, #36]	@ (8002750 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800272c:	e001      	b.n	8002732 <LoopFillZerobss>

0800272e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002730:	3204      	adds	r2, #4

08002732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002734:	d3fb      	bcc.n	800272e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002736:	f000 f9df 	bl	8002af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800273a:	f7fe f817 	bl	800076c <main>
  bx lr
 800273e:	4770      	bx	lr
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002748:	08002cec 	.word	0x08002cec
  ldr r2, =_sbss
 800274c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002750:	20002bbc 	.word	0x20002bbc

08002754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC1_2_IRQHandler>

08002756 <_ZNSaIcEC1Ev>:
 8002756:	4770      	bx	lr

08002758 <_ZNSaIcED1Ev>:
 8002758:	4770      	bx	lr

0800275a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800275a:	b10a      	cbz	r2, 8002760 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800275c:	f000 b9f2 	b.w	8002b44 <memcpy>
 8002760:	4770      	bx	lr

08002762 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8002762:	f850 3b08 	ldr.w	r3, [r0], #8
 8002766:	1a1b      	subs	r3, r3, r0
 8002768:	4258      	negs	r0, r3
 800276a:	4158      	adcs	r0, r3
 800276c:	4770      	bx	lr
	...

08002770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002770:	b508      	push	{r3, lr}
 8002772:	680b      	ldr	r3, [r1, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002778:	d302      	bcc.n	8002780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800277a:	480d      	ldr	r0, [pc, #52]	@ (80027b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800277c:	f000 f889 	bl	8002892 <_ZSt20__throw_length_errorPKc>
 8002780:	4293      	cmp	r3, r2
 8002782:	d90b      	bls.n	800279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002784:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002788:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800278c:	d206      	bcs.n	800279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800278e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002792:	bf2a      	itet	cs
 8002794:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8002798:	6008      	strcc	r0, [r1, #0]
 800279a:	600b      	strcs	r3, [r1, #0]
 800279c:	6808      	ldr	r0, [r1, #0]
 800279e:	3001      	adds	r0, #1
 80027a0:	d501      	bpl.n	80027a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80027a2:	f000 f870 	bl	8002886 <_ZSt17__throw_bad_allocv>
 80027a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80027aa:	f000 b85b 	b.w	8002864 <_Znwj>
 80027ae:	bf00      	nop
 80027b0:	08002c80 	.word	0x08002c80

080027b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80027b4:	b510      	push	{r4, lr}
 80027b6:	4604      	mov	r4, r0
 80027b8:	f7ff ffd3 	bl	8002762 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80027bc:	b920      	cbnz	r0, 80027c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c4:	f000 b84c 	b.w	8002860 <_ZdlPv>
 80027c8:	bd10      	pop	{r4, pc}

080027ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80027ca:	2a01      	cmp	r2, #1
 80027cc:	b410      	push	{r4}
 80027ce:	d103      	bne.n	80027d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80027d0:	780a      	ldrb	r2, [r1, #0]
 80027d2:	bc10      	pop	{r4}
 80027d4:	7002      	strb	r2, [r0, #0]
 80027d6:	4770      	bx	lr
 80027d8:	bc10      	pop	{r4}
 80027da:	f7ff bfbe 	b.w	800275a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080027de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80027de:	b508      	push	{r3, lr}
 80027e0:	1a52      	subs	r2, r2, r1
 80027e2:	f7ff fff2 	bl	80027ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80027e6:	bd08      	pop	{r3, pc}

080027e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4604      	mov	r4, r0
 80027ec:	f7ff ffe2 	bl	80027b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80027f0:	4620      	mov	r0, r4
 80027f2:	bd10      	pop	{r4, pc}

080027f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80027f4:	6800      	ldr	r0, [r0, #0]
 80027f6:	4408      	add	r0, r1
 80027f8:	4770      	bx	lr

080027fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80027fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027fc:	1a53      	subs	r3, r2, r1
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	4604      	mov	r4, r0
 8002802:	460d      	mov	r5, r1
 8002804:	4616      	mov	r6, r2
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	d906      	bls.n	8002818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800280a:	2200      	movs	r2, #0
 800280c:	a901      	add	r1, sp, #4
 800280e:	f7ff ffaf 	bl	8002770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002812:	9b01      	ldr	r3, [sp, #4]
 8002814:	6020      	str	r0, [r4, #0]
 8002816:	60a3      	str	r3, [r4, #8]
 8002818:	4632      	mov	r2, r6
 800281a:	4629      	mov	r1, r5
 800281c:	6820      	ldr	r0, [r4, #0]
 800281e:	f7ff ffde 	bl	80027de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002822:	2100      	movs	r1, #0
 8002824:	9b01      	ldr	r3, [sp, #4]
 8002826:	6822      	ldr	r2, [r4, #0]
 8002828:	6063      	str	r3, [r4, #4]
 800282a:	54d1      	strb	r1, [r2, r3]
 800282c:	b002      	add	sp, #8
 800282e:	bd70      	pop	{r4, r5, r6, pc}

08002830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	f100 0308 	add.w	r3, r0, #8
 8002836:	4604      	mov	r4, r0
 8002838:	460d      	mov	r5, r1
 800283a:	6003      	str	r3, [r0, #0]
 800283c:	b911      	cbnz	r1, 8002844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800283e:	4807      	ldr	r0, [pc, #28]	@ (800285c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8002840:	f000 f824 	bl	800288c <_ZSt19__throw_logic_errorPKc>
 8002844:	4608      	mov	r0, r1
 8002846:	f7fd fc83 	bl	8000150 <strlen>
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	182a      	adds	r2, r5, r0
 8002850:	4629      	mov	r1, r5
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff ffd1 	bl	80027fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002858:	4620      	mov	r0, r4
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	08002c98 	.word	0x08002c98

08002860 <_ZdlPv>:
 8002860:	f000 b832 	b.w	80028c8 <free>

08002864 <_Znwj>:
 8002864:	2801      	cmp	r0, #1
 8002866:	bf38      	it	cc
 8002868:	2001      	movcc	r0, #1
 800286a:	b510      	push	{r4, lr}
 800286c:	4604      	mov	r4, r0
 800286e:	4620      	mov	r0, r4
 8002870:	f000 f822 	bl	80028b8 <malloc>
 8002874:	b100      	cbz	r0, 8002878 <_Znwj+0x14>
 8002876:	bd10      	pop	{r4, pc}
 8002878:	f000 f80e 	bl	8002898 <_ZSt15get_new_handlerv>
 800287c:	b908      	cbnz	r0, 8002882 <_Znwj+0x1e>
 800287e:	f000 f813 	bl	80028a8 <abort>
 8002882:	4780      	blx	r0
 8002884:	e7f3      	b.n	800286e <_Znwj+0xa>

08002886 <_ZSt17__throw_bad_allocv>:
 8002886:	b508      	push	{r3, lr}
 8002888:	f000 f80e 	bl	80028a8 <abort>

0800288c <_ZSt19__throw_logic_errorPKc>:
 800288c:	b508      	push	{r3, lr}
 800288e:	f000 f80b 	bl	80028a8 <abort>

08002892 <_ZSt20__throw_length_errorPKc>:
 8002892:	b508      	push	{r3, lr}
 8002894:	f000 f808 	bl	80028a8 <abort>

08002898 <_ZSt15get_new_handlerv>:
 8002898:	4b02      	ldr	r3, [pc, #8]	@ (80028a4 <_ZSt15get_new_handlerv+0xc>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	f3bf 8f5b 	dmb	ish
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20002a70 	.word	0x20002a70

080028a8 <abort>:
 80028a8:	2006      	movs	r0, #6
 80028aa:	b508      	push	{r3, lr}
 80028ac:	f000 f8f2 	bl	8002a94 <raise>
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7fe fe50 	bl	8001556 <_exit>
	...

080028b8 <malloc>:
 80028b8:	4b02      	ldr	r3, [pc, #8]	@ (80028c4 <malloc+0xc>)
 80028ba:	4601      	mov	r1, r0
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f000 b82d 	b.w	800291c <_malloc_r>
 80028c2:	bf00      	nop
 80028c4:	2000000c 	.word	0x2000000c

080028c8 <free>:
 80028c8:	4b02      	ldr	r3, [pc, #8]	@ (80028d4 <free+0xc>)
 80028ca:	4601      	mov	r1, r0
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	f000 b947 	b.w	8002b60 <_free_r>
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <sbrk_aligned>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	4e0f      	ldr	r6, [pc, #60]	@ (8002918 <sbrk_aligned+0x40>)
 80028dc:	460c      	mov	r4, r1
 80028de:	6831      	ldr	r1, [r6, #0]
 80028e0:	4605      	mov	r5, r0
 80028e2:	b911      	cbnz	r1, 80028ea <sbrk_aligned+0x12>
 80028e4:	f000 f8f2 	bl	8002acc <_sbrk_r>
 80028e8:	6030      	str	r0, [r6, #0]
 80028ea:	4621      	mov	r1, r4
 80028ec:	4628      	mov	r0, r5
 80028ee:	f000 f8ed 	bl	8002acc <_sbrk_r>
 80028f2:	1c43      	adds	r3, r0, #1
 80028f4:	d103      	bne.n	80028fe <sbrk_aligned+0x26>
 80028f6:	f04f 34ff 	mov.w	r4, #4294967295
 80028fa:	4620      	mov	r0, r4
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
 80028fe:	1cc4      	adds	r4, r0, #3
 8002900:	f024 0403 	bic.w	r4, r4, #3
 8002904:	42a0      	cmp	r0, r4
 8002906:	d0f8      	beq.n	80028fa <sbrk_aligned+0x22>
 8002908:	1a21      	subs	r1, r4, r0
 800290a:	4628      	mov	r0, r5
 800290c:	f000 f8de 	bl	8002acc <_sbrk_r>
 8002910:	3001      	adds	r0, #1
 8002912:	d1f2      	bne.n	80028fa <sbrk_aligned+0x22>
 8002914:	e7ef      	b.n	80028f6 <sbrk_aligned+0x1e>
 8002916:	bf00      	nop
 8002918:	20002a74 	.word	0x20002a74

0800291c <_malloc_r>:
 800291c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002920:	1ccd      	adds	r5, r1, #3
 8002922:	f025 0503 	bic.w	r5, r5, #3
 8002926:	3508      	adds	r5, #8
 8002928:	2d0c      	cmp	r5, #12
 800292a:	bf38      	it	cc
 800292c:	250c      	movcc	r5, #12
 800292e:	2d00      	cmp	r5, #0
 8002930:	4606      	mov	r6, r0
 8002932:	db01      	blt.n	8002938 <_malloc_r+0x1c>
 8002934:	42a9      	cmp	r1, r5
 8002936:	d904      	bls.n	8002942 <_malloc_r+0x26>
 8002938:	230c      	movs	r3, #12
 800293a:	6033      	str	r3, [r6, #0]
 800293c:	2000      	movs	r0, #0
 800293e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002942:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a18 <_malloc_r+0xfc>
 8002946:	f000 f869 	bl	8002a1c <__malloc_lock>
 800294a:	f8d8 3000 	ldr.w	r3, [r8]
 800294e:	461c      	mov	r4, r3
 8002950:	bb44      	cbnz	r4, 80029a4 <_malloc_r+0x88>
 8002952:	4629      	mov	r1, r5
 8002954:	4630      	mov	r0, r6
 8002956:	f7ff ffbf 	bl	80028d8 <sbrk_aligned>
 800295a:	1c43      	adds	r3, r0, #1
 800295c:	4604      	mov	r4, r0
 800295e:	d158      	bne.n	8002a12 <_malloc_r+0xf6>
 8002960:	f8d8 4000 	ldr.w	r4, [r8]
 8002964:	4627      	mov	r7, r4
 8002966:	2f00      	cmp	r7, #0
 8002968:	d143      	bne.n	80029f2 <_malloc_r+0xd6>
 800296a:	2c00      	cmp	r4, #0
 800296c:	d04b      	beq.n	8002a06 <_malloc_r+0xea>
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	4639      	mov	r1, r7
 8002972:	4630      	mov	r0, r6
 8002974:	eb04 0903 	add.w	r9, r4, r3
 8002978:	f000 f8a8 	bl	8002acc <_sbrk_r>
 800297c:	4581      	cmp	r9, r0
 800297e:	d142      	bne.n	8002a06 <_malloc_r+0xea>
 8002980:	6821      	ldr	r1, [r4, #0]
 8002982:	4630      	mov	r0, r6
 8002984:	1a6d      	subs	r5, r5, r1
 8002986:	4629      	mov	r1, r5
 8002988:	f7ff ffa6 	bl	80028d8 <sbrk_aligned>
 800298c:	3001      	adds	r0, #1
 800298e:	d03a      	beq.n	8002a06 <_malloc_r+0xea>
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	442b      	add	r3, r5
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	f8d8 3000 	ldr.w	r3, [r8]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	bb62      	cbnz	r2, 80029f8 <_malloc_r+0xdc>
 800299e:	f8c8 7000 	str.w	r7, [r8]
 80029a2:	e00f      	b.n	80029c4 <_malloc_r+0xa8>
 80029a4:	6822      	ldr	r2, [r4, #0]
 80029a6:	1b52      	subs	r2, r2, r5
 80029a8:	d420      	bmi.n	80029ec <_malloc_r+0xd0>
 80029aa:	2a0b      	cmp	r2, #11
 80029ac:	d917      	bls.n	80029de <_malloc_r+0xc2>
 80029ae:	1961      	adds	r1, r4, r5
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	6025      	str	r5, [r4, #0]
 80029b4:	bf18      	it	ne
 80029b6:	6059      	strne	r1, [r3, #4]
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	bf08      	it	eq
 80029bc:	f8c8 1000 	streq.w	r1, [r8]
 80029c0:	5162      	str	r2, [r4, r5]
 80029c2:	604b      	str	r3, [r1, #4]
 80029c4:	4630      	mov	r0, r6
 80029c6:	f000 f82f 	bl	8002a28 <__malloc_unlock>
 80029ca:	f104 000b 	add.w	r0, r4, #11
 80029ce:	1d23      	adds	r3, r4, #4
 80029d0:	f020 0007 	bic.w	r0, r0, #7
 80029d4:	1ac2      	subs	r2, r0, r3
 80029d6:	bf1c      	itt	ne
 80029d8:	1a1b      	subne	r3, r3, r0
 80029da:	50a3      	strne	r3, [r4, r2]
 80029dc:	e7af      	b.n	800293e <_malloc_r+0x22>
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	bf0c      	ite	eq
 80029e4:	f8c8 2000 	streq.w	r2, [r8]
 80029e8:	605a      	strne	r2, [r3, #4]
 80029ea:	e7eb      	b.n	80029c4 <_malloc_r+0xa8>
 80029ec:	4623      	mov	r3, r4
 80029ee:	6864      	ldr	r4, [r4, #4]
 80029f0:	e7ae      	b.n	8002950 <_malloc_r+0x34>
 80029f2:	463c      	mov	r4, r7
 80029f4:	687f      	ldr	r7, [r7, #4]
 80029f6:	e7b6      	b.n	8002966 <_malloc_r+0x4a>
 80029f8:	461a      	mov	r2, r3
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	42a3      	cmp	r3, r4
 80029fe:	d1fb      	bne.n	80029f8 <_malloc_r+0xdc>
 8002a00:	2300      	movs	r3, #0
 8002a02:	6053      	str	r3, [r2, #4]
 8002a04:	e7de      	b.n	80029c4 <_malloc_r+0xa8>
 8002a06:	230c      	movs	r3, #12
 8002a08:	4630      	mov	r0, r6
 8002a0a:	6033      	str	r3, [r6, #0]
 8002a0c:	f000 f80c 	bl	8002a28 <__malloc_unlock>
 8002a10:	e794      	b.n	800293c <_malloc_r+0x20>
 8002a12:	6005      	str	r5, [r0, #0]
 8002a14:	e7d6      	b.n	80029c4 <_malloc_r+0xa8>
 8002a16:	bf00      	nop
 8002a18:	20002a78 	.word	0x20002a78

08002a1c <__malloc_lock>:
 8002a1c:	4801      	ldr	r0, [pc, #4]	@ (8002a24 <__malloc_lock+0x8>)
 8002a1e:	f000 b88f 	b.w	8002b40 <__retarget_lock_acquire_recursive>
 8002a22:	bf00      	nop
 8002a24:	20002bb8 	.word	0x20002bb8

08002a28 <__malloc_unlock>:
 8002a28:	4801      	ldr	r0, [pc, #4]	@ (8002a30 <__malloc_unlock+0x8>)
 8002a2a:	f000 b88a 	b.w	8002b42 <__retarget_lock_release_recursive>
 8002a2e:	bf00      	nop
 8002a30:	20002bb8 	.word	0x20002bb8

08002a34 <memset>:
 8002a34:	4603      	mov	r3, r0
 8002a36:	4402      	add	r2, r0
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d100      	bne.n	8002a3e <memset+0xa>
 8002a3c:	4770      	bx	lr
 8002a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a42:	e7f9      	b.n	8002a38 <memset+0x4>

08002a44 <_raise_r>:
 8002a44:	291f      	cmp	r1, #31
 8002a46:	b538      	push	{r3, r4, r5, lr}
 8002a48:	4605      	mov	r5, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	d904      	bls.n	8002a58 <_raise_r+0x14>
 8002a4e:	2316      	movs	r3, #22
 8002a50:	6003      	str	r3, [r0, #0]
 8002a52:	f04f 30ff 	mov.w	r0, #4294967295
 8002a56:	bd38      	pop	{r3, r4, r5, pc}
 8002a58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002a5a:	b112      	cbz	r2, 8002a62 <_raise_r+0x1e>
 8002a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a60:	b94b      	cbnz	r3, 8002a76 <_raise_r+0x32>
 8002a62:	4628      	mov	r0, r5
 8002a64:	f000 f830 	bl	8002ac8 <_getpid_r>
 8002a68:	4622      	mov	r2, r4
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a72:	f000 b817 	b.w	8002aa4 <_kill_r>
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d00a      	beq.n	8002a90 <_raise_r+0x4c>
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	d103      	bne.n	8002a86 <_raise_r+0x42>
 8002a7e:	2316      	movs	r3, #22
 8002a80:	6003      	str	r3, [r0, #0]
 8002a82:	2001      	movs	r0, #1
 8002a84:	e7e7      	b.n	8002a56 <_raise_r+0x12>
 8002a86:	2100      	movs	r1, #0
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002a8e:	4798      	blx	r3
 8002a90:	2000      	movs	r0, #0
 8002a92:	e7e0      	b.n	8002a56 <_raise_r+0x12>

08002a94 <raise>:
 8002a94:	4b02      	ldr	r3, [pc, #8]	@ (8002aa0 <raise+0xc>)
 8002a96:	4601      	mov	r1, r0
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	f7ff bfd3 	b.w	8002a44 <_raise_r>
 8002a9e:	bf00      	nop
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <_kill_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	4d06      	ldr	r5, [pc, #24]	@ (8002ac4 <_kill_r+0x20>)
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	602b      	str	r3, [r5, #0]
 8002ab2:	f7fe fd40 	bl	8001536 <_kill>
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	d102      	bne.n	8002ac0 <_kill_r+0x1c>
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	b103      	cbz	r3, 8002ac0 <_kill_r+0x1c>
 8002abe:	6023      	str	r3, [r4, #0]
 8002ac0:	bd38      	pop	{r3, r4, r5, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20002bb4 	.word	0x20002bb4

08002ac8 <_getpid_r>:
 8002ac8:	f7fe bd2e 	b.w	8001528 <_getpid>

08002acc <_sbrk_r>:
 8002acc:	b538      	push	{r3, r4, r5, lr}
 8002ace:	2300      	movs	r3, #0
 8002ad0:	4d05      	ldr	r5, [pc, #20]	@ (8002ae8 <_sbrk_r+0x1c>)
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	602b      	str	r3, [r5, #0]
 8002ad8:	f7fe fd48 	bl	800156c <_sbrk>
 8002adc:	1c43      	adds	r3, r0, #1
 8002ade:	d102      	bne.n	8002ae6 <_sbrk_r+0x1a>
 8002ae0:	682b      	ldr	r3, [r5, #0]
 8002ae2:	b103      	cbz	r3, 8002ae6 <_sbrk_r+0x1a>
 8002ae4:	6023      	str	r3, [r4, #0]
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
 8002ae8:	20002bb4 	.word	0x20002bb4

08002aec <__errno>:
 8002aec:	4b01      	ldr	r3, [pc, #4]	@ (8002af4 <__errno+0x8>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <__libc_init_array>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	2600      	movs	r6, #0
 8002afc:	4d0c      	ldr	r5, [pc, #48]	@ (8002b30 <__libc_init_array+0x38>)
 8002afe:	4c0d      	ldr	r4, [pc, #52]	@ (8002b34 <__libc_init_array+0x3c>)
 8002b00:	1b64      	subs	r4, r4, r5
 8002b02:	10a4      	asrs	r4, r4, #2
 8002b04:	42a6      	cmp	r6, r4
 8002b06:	d109      	bne.n	8002b1c <__libc_init_array+0x24>
 8002b08:	f000 f872 	bl	8002bf0 <_init>
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b38 <__libc_init_array+0x40>)
 8002b10:	4c0a      	ldr	r4, [pc, #40]	@ (8002b3c <__libc_init_array+0x44>)
 8002b12:	1b64      	subs	r4, r4, r5
 8002b14:	10a4      	asrs	r4, r4, #2
 8002b16:	42a6      	cmp	r6, r4
 8002b18:	d105      	bne.n	8002b26 <__libc_init_array+0x2e>
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b20:	4798      	blx	r3
 8002b22:	3601      	adds	r6, #1
 8002b24:	e7ee      	b.n	8002b04 <__libc_init_array+0xc>
 8002b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2a:	4798      	blx	r3
 8002b2c:	3601      	adds	r6, #1
 8002b2e:	e7f2      	b.n	8002b16 <__libc_init_array+0x1e>
 8002b30:	08002cd4 	.word	0x08002cd4
 8002b34:	08002cd4 	.word	0x08002cd4
 8002b38:	08002cd4 	.word	0x08002cd4
 8002b3c:	08002ce0 	.word	0x08002ce0

08002b40 <__retarget_lock_acquire_recursive>:
 8002b40:	4770      	bx	lr

08002b42 <__retarget_lock_release_recursive>:
 8002b42:	4770      	bx	lr

08002b44 <memcpy>:
 8002b44:	440a      	add	r2, r1
 8002b46:	4291      	cmp	r1, r2
 8002b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b4c:	d100      	bne.n	8002b50 <memcpy+0xc>
 8002b4e:	4770      	bx	lr
 8002b50:	b510      	push	{r4, lr}
 8002b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b56:	4291      	cmp	r1, r2
 8002b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b5c:	d1f9      	bne.n	8002b52 <memcpy+0xe>
 8002b5e:	bd10      	pop	{r4, pc}

08002b60 <_free_r>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	4605      	mov	r5, r0
 8002b64:	2900      	cmp	r1, #0
 8002b66:	d040      	beq.n	8002bea <_free_r+0x8a>
 8002b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b6c:	1f0c      	subs	r4, r1, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bfb8      	it	lt
 8002b72:	18e4      	addlt	r4, r4, r3
 8002b74:	f7ff ff52 	bl	8002a1c <__malloc_lock>
 8002b78:	4a1c      	ldr	r2, [pc, #112]	@ (8002bec <_free_r+0x8c>)
 8002b7a:	6813      	ldr	r3, [r2, #0]
 8002b7c:	b933      	cbnz	r3, 8002b8c <_free_r+0x2c>
 8002b7e:	6063      	str	r3, [r4, #4]
 8002b80:	6014      	str	r4, [r2, #0]
 8002b82:	4628      	mov	r0, r5
 8002b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b88:	f7ff bf4e 	b.w	8002a28 <__malloc_unlock>
 8002b8c:	42a3      	cmp	r3, r4
 8002b8e:	d908      	bls.n	8002ba2 <_free_r+0x42>
 8002b90:	6820      	ldr	r0, [r4, #0]
 8002b92:	1821      	adds	r1, r4, r0
 8002b94:	428b      	cmp	r3, r1
 8002b96:	bf01      	itttt	eq
 8002b98:	6819      	ldreq	r1, [r3, #0]
 8002b9a:	685b      	ldreq	r3, [r3, #4]
 8002b9c:	1809      	addeq	r1, r1, r0
 8002b9e:	6021      	streq	r1, [r4, #0]
 8002ba0:	e7ed      	b.n	8002b7e <_free_r+0x1e>
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b10b      	cbz	r3, 8002bac <_free_r+0x4c>
 8002ba8:	42a3      	cmp	r3, r4
 8002baa:	d9fa      	bls.n	8002ba2 <_free_r+0x42>
 8002bac:	6811      	ldr	r1, [r2, #0]
 8002bae:	1850      	adds	r0, r2, r1
 8002bb0:	42a0      	cmp	r0, r4
 8002bb2:	d10b      	bne.n	8002bcc <_free_r+0x6c>
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	4401      	add	r1, r0
 8002bb8:	1850      	adds	r0, r2, r1
 8002bba:	4283      	cmp	r3, r0
 8002bbc:	6011      	str	r1, [r2, #0]
 8002bbe:	d1e0      	bne.n	8002b82 <_free_r+0x22>
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4408      	add	r0, r1
 8002bc6:	6010      	str	r0, [r2, #0]
 8002bc8:	6053      	str	r3, [r2, #4]
 8002bca:	e7da      	b.n	8002b82 <_free_r+0x22>
 8002bcc:	d902      	bls.n	8002bd4 <_free_r+0x74>
 8002bce:	230c      	movs	r3, #12
 8002bd0:	602b      	str	r3, [r5, #0]
 8002bd2:	e7d6      	b.n	8002b82 <_free_r+0x22>
 8002bd4:	6820      	ldr	r0, [r4, #0]
 8002bd6:	1821      	adds	r1, r4, r0
 8002bd8:	428b      	cmp	r3, r1
 8002bda:	bf01      	itttt	eq
 8002bdc:	6819      	ldreq	r1, [r3, #0]
 8002bde:	685b      	ldreq	r3, [r3, #4]
 8002be0:	1809      	addeq	r1, r1, r0
 8002be2:	6021      	streq	r1, [r4, #0]
 8002be4:	6063      	str	r3, [r4, #4]
 8002be6:	6054      	str	r4, [r2, #4]
 8002be8:	e7cb      	b.n	8002b82 <_free_r+0x22>
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	20002a78 	.word	0x20002a78

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
