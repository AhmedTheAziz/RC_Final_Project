
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003100  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003210  08003210  00004210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d4  080032d4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080032d4  080032d4  000042d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032dc  080032dc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080032dc  080032dc  000042dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  080032e8  080032e8  000042e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080032f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ba0  20000068  0800335c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c08  0800335c  00005c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138c7  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003069  00000000  00000000  00018958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0001b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a8  00000000  00000000  0001c170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194ee  00000000  00000000  0001c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6bb  00000000  00000000  00035c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f2f6  00000000  00000000  000412c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e05b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  000e05fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e3bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080031f8 	.word	0x080031f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080031f8 	.word	0x080031f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_ZN7Clock72C1Ev>:
 *      Author: AHMED ABDELAZIZ
 */

#include "clock72.h"
uint8_t Clock72::Countclk;
 Clock72::Clock72 ()
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 {
	 if(Countclk==0)
 8000168:	4b08      	ldr	r3, [pc, #32]	@ (800018c <_ZN7Clock72C1Ev+0x2c>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b00      	cmp	r3, #0
 800016e:	d102      	bne.n	8000176 <_ZN7Clock72C1Ev+0x16>
	 {
	 Clock_Init();
 8000170:	6878      	ldr	r0, [r7, #4]
 8000172:	f000 f80d 	bl	8000190 <_ZN7Clock7210Clock_InitEv>
 }
	 Countclk++;
 8000176:	4b05      	ldr	r3, [pc, #20]	@ (800018c <_ZN7Clock72C1Ev+0x2c>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	3301      	adds	r3, #1
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b03      	ldr	r3, [pc, #12]	@ (800018c <_ZN7Clock72C1Ev+0x2c>)
 8000180:	701a      	strb	r2, [r3, #0]
 }
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4618      	mov	r0, r3
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	20000084 	.word	0x20000084

08000190 <_ZN7Clock7210Clock_InitEv>:
void Clock72::Clock_Init()
	{
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
		//Adding wait states to memory reads.
		FLASH->ACR	= 0x12;	// for system clock between 48 and 72MHz
 8000198:	4b24      	ldr	r3, [pc, #144]	@ (800022c <_ZN7Clock7210Clock_InitEv+0x9c>)
 800019a:	2212      	movs	r2, #18
 800019c:	601a      	str	r2, [r3, #0]
		RCC->CR |= (1<<16);	//HSE on
 800019e:	4b24      	ldr	r3, [pc, #144]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a23      	ldr	r2, [pc, #140]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001a8:	6013      	str	r3, [r2, #0]
		while (!(RCC->CR & (1<<17)));	//wait until HSE ready
 80001aa:	bf00      	nop
 80001ac:	4b20      	ldr	r3, [pc, #128]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	bf0c      	ite	eq
 80001b8:	2301      	moveq	r3, #1
 80001ba:	2300      	movne	r3, #0
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d1f4      	bne.n	80001ac <_ZN7Clock7210Clock_InitEv+0x1c>
		RCC->CR |= (1<<26);	//PLL2 on (test)25
 80001c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001cc:	6013      	str	r3, [r2, #0]
		RCC->CFGR |= (1<<16);
 80001ce:	4b18      	ldr	r3, [pc, #96]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	4a17      	ldr	r2, [pc, #92]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001d8:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (7<<18);	// mult by 9	--->72MHz
 80001da:	4b15      	ldr	r3, [pc, #84]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a14      	ldr	r2, [pc, #80]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001e0:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80001e4:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (1<<10);	//APB1 = 36MHz. See bus clocks.
 80001e6:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	4a11      	ldr	r2, [pc, #68]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001f0:	6053      	str	r3, [r2, #4]
		RCC->CR |= (1<<24);	//enable PLL
 80001f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 80001f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001fc:	6013      	str	r3, [r2, #0]
		while (!(RCC->CR & (1<<25)));	//wait until locked
 80001fe:	bf00      	nop
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000208:	2b00      	cmp	r3, #0
 800020a:	bf0c      	ite	eq
 800020c:	2301      	moveq	r3, #1
 800020e:	2300      	movne	r3, #0
 8000210:	b2db      	uxtb	r3, r3
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1f4      	bne.n	8000200 <_ZN7Clock7210Clock_InitEv+0x70>
		RCC->CFGR |= (2<<0);	//PLL as clock source
 8000216:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a05      	ldr	r2, [pc, #20]	@ (8000230 <_ZN7Clock7210Clock_InitEv+0xa0>)
 800021c:	f043 0302 	orr.w	r3, r3, #2
 8000220:	6053      	str	r3, [r2, #4]
	}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40022000 	.word	0x40022000
 8000230:	40021000 	.word	0x40021000

08000234 <_ZN6configC1Ev>:
#include "config.h"

uint8_t config::Count;

/// <Constructor>
 config::config()
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 {
	 if (Count ==0)
 800023c:	4b0a      	ldr	r3, [pc, #40]	@ (8000268 <_ZN6configC1Ev+0x34>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d105      	bne.n	8000250 <_ZN6configC1Ev+0x1c>
	 {
	 RCC->APB2ENR =0x00000000;
 8000244:	4b09      	ldr	r3, [pc, #36]	@ (800026c <_ZN6configC1Ev+0x38>)
 8000246:	2200      	movs	r2, #0
 8000248:	619a      	str	r2, [r3, #24]
	 RCC->APB1ENR=0x00000000;
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <_ZN6configC1Ev+0x38>)
 800024c:	2200      	movs	r2, #0
 800024e:	61da      	str	r2, [r3, #28]
	 }
	 Count++;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <_ZN6configC1Ev+0x34>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <_ZN6configC1Ev+0x34>)
 800025a:	701a      	strb	r2, [r3, #0]
 }
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4618      	mov	r0, r3
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000085 	.word	0x20000085
 800026c:	40021000 	.word	0x40021000

08000270 <_ZN6config4ENPAEv>:

 /// <Enable Ports and AFIOs>
	 void config::ENPA()
	 {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<2);
 8000278:	4b05      	ldr	r3, [pc, #20]	@ (8000290 <_ZN6config4ENPAEv+0x20>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a04      	ldr	r2, [pc, #16]	@ (8000290 <_ZN6config4ENPAEv+0x20>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6193      	str	r3, [r2, #24]
	 }
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000

08000294 <_ZN6config4ENPBEv>:
	 void config::ENPB()
	 {
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<3);
 800029c:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <_ZN6config4ENPBEv+0x20>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a04      	ldr	r2, [pc, #16]	@ (80002b4 <_ZN6config4ENPBEv+0x20>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
	 }
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40021000 	.word	0x40021000

080002b8 <_ZN6config4ENPCEv>:
	 void config::ENPC()
	 {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<4);
 80002c0:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <_ZN6config4ENPCEv+0x20>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <_ZN6config4ENPCEv+0x20>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
	 }
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000

080002dc <_ZN6config5AFIOPEv>:
	 void config::AFIOP()
	 {
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
		 RCC->APB2ENR |=(1<<0);
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <_ZN6config5AFIOPEv+0x20>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <_ZN6config5AFIOPEv+0x20>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6193      	str	r3, [r2, #24]
	 }
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <_ZN6configD1Ev>:
  }
  */


 ///<Destructor>
 config::~config()
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
		{

		}
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <_ZN7ControlC1EP5MotorS1_>:
 *  Created on: Sep 11, 2024
 *      Author: AHMED ABDELAZIZ
 */

#include "control.h"
	Control::Control(Motor *m1,Motor *m2) : m1_{m1},m2_{m2}
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	609a      	str	r2, [r3, #8]
	{
		m1_->STOP();
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fc61 	bl	8000bf8 <_ZN5Motor4STOPEv>
		m2_->STOP();
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fc5c 	bl	8000bf8 <_ZN5Motor4STOPEv>
		//BREAK();
	}
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	4618      	mov	r0, r3
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <_ZN7Control7ForwardEj>:
	void Control::Forward(unsigned int speed)
	{
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	6039      	str	r1, [r7, #0]
		m1_->CW();
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fc27 	bl	8000bac <_ZN5Motor2CWEv>
		m2_->CCW();
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fc35 	bl	8000bd2 <_ZN5Motor3CCWEv>
		tim3.pwmWrite(speed);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	6839      	ldr	r1, [r7, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fb09 	bl	8002984 <_ZN6Timer38pwmWriteEj>
	}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <_ZN7Control8BackwardEj>:
	void Control::Backward(unsigned int speed)
	{
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
		m2_->CW();
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fc0f 	bl	8000bac <_ZN5Motor2CWEv>
		m1_->CCW();
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fc1d 	bl	8000bd2 <_ZN5Motor3CCWEv>
		tim3.pwmWrite(speed);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6839      	ldr	r1, [r7, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f002 faf1 	bl	8002984 <_ZN6Timer38pwmWriteEj>
	}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZN7Control5RightEj>:
	void Control::Right(unsigned int speed)
	{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	6039      	str	r1, [r7, #0]
		m1_->STOP();
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fc1d 	bl	8000bf8 <_ZN5Motor4STOPEv>
		m2_->CCW();
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fc05 	bl	8000bd2 <_ZN5Motor3CCWEv>
		tim3.pwmWrite3(speed);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6839      	ldr	r1, [r7, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 fb2d 	bl	8002a2c <_ZN6Timer39pwmWrite3Ej>

	}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_ZN7Control4LeftEj>:
	void Control::Left(unsigned int speed)
	{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b082      	sub	sp, #8
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
 80003e2:	6039      	str	r1, [r7, #0]
		m1_->CW();
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fbdf 	bl	8000bac <_ZN5Motor2CWEv>
		m2_->STOP();
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fc00 	bl	8000bf8 <_ZN5Motor4STOPEv>
		tim3.pwmWrite1(speed);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6839      	ldr	r1, [r7, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 faed 	bl	80029dc <_ZN6Timer39pwmWrite1Ej>
	}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <_ZN7Control5BREAKEv>:
	void Control::BREAK()
	{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
		m1_->STOP();
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fbee 	bl	8000bf8 <_ZN5Motor4STOPEv>
		m2_->STOP();
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fbe9 	bl	8000bf8 <_ZN5Motor4STOPEv>
	}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	@ 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d022      	beq.n	8000488 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8000442:	2308      	movs	r3, #8
 8000444:	43db      	mvns	r3, r3
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	429a      	cmp	r2, r3
 800044a:	d81b      	bhi.n	8000484 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800044c:	2208      	movs	r2, #8
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	2b00      	cmp	r3, #0
 800045c:	d014      	beq.n	8000488 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f003 0307 	and.w	r3, r3, #7
 8000464:	f1c3 0308 	rsb	r3, r3, #8
 8000468:	617b      	str	r3, [r7, #20]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	43db      	mvns	r3, r3
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	d804      	bhi.n	800047e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	4413      	add	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	e004      	b.n	8000488 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	e001      	b.n	8000488 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8000488:	f001 fcc8 	bl	8001e1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 800048c:	4b3b      	ldr	r3, [pc, #236]	@ (800057c <pvPortMalloc+0x14c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d104      	bne.n	800049e <pvPortMalloc+0x6e>
        {
            prvHeapInit();
 8000494:	f000 f8c6 	bl	8000624 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8000498:	4b38      	ldr	r3, [pc, #224]	@ (800057c <pvPortMalloc+0x14c>)
 800049a:	2201      	movs	r2, #1
 800049c:	601a      	str	r2, [r3, #0]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	db63      	blt.n	800056c <pvPortMalloc+0x13c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d060      	beq.n	800056c <pvPortMalloc+0x13c>
 80004aa:	4b35      	ldr	r3, [pc, #212]	@ (8000580 <pvPortMalloc+0x150>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d85b      	bhi.n	800056c <pvPortMalloc+0x13c>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80004b4:	4b33      	ldr	r3, [pc, #204]	@ (8000584 <pvPortMalloc+0x154>)
 80004b6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80004b8:	4b32      	ldr	r3, [pc, #200]	@ (8000584 <pvPortMalloc+0x154>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80004be:	e004      	b.n	80004ca <pvPortMalloc+0x9a>
                {
                    pxPreviousBlock = pxBlock;
 80004c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004c2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80004c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80004ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d903      	bls.n	80004dc <pvPortMalloc+0xac>
 80004d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d1f1      	bne.n	80004c0 <pvPortMalloc+0x90>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 80004dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004de:	4a2a      	ldr	r2, [pc, #168]	@ (8000588 <pvPortMalloc+0x158>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d043      	beq.n	800056c <pvPortMalloc+0x13c>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80004e4:	6a3b      	ldr	r3, [r7, #32]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2208      	movs	r2, #8
 80004ea:	4413      	add	r3, r2
 80004ec:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80004ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	6a3b      	ldr	r3, [r7, #32]
 80004f4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80004f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004f8:	685a      	ldr	r2, [r3, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	2308      	movs	r3, #8
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	429a      	cmp	r2, r3
 8000504:	d922      	bls.n	800054c <pvPortMalloc+0x11c>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4413      	add	r3, r2
 800050c:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	1ad2      	subs	r2, r2, r3
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800051a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks.
                         * The list of free blocks is sorted by their size, we have to
                         * iterate to find the right place to insert new block. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <pvPortMalloc+0x154>)
 8000528:	61bb      	str	r3, [r7, #24]
 800052a:	e002      	b.n	8000532 <pvPortMalloc+0x102>
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	61bb      	str	r3, [r7, #24]
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	429a      	cmp	r2, r3
 800053c:	d8f6      	bhi.n	800052c <pvPortMalloc+0xfc>
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	693a      	ldr	r2, [r7, #16]
 800054a:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <pvPortMalloc+0x150>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <pvPortMalloc+0x150>)
 8000558:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000564:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800056c:	f001 fc64 	bl	8001e38 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000570:	69fb      	ldr	r3, [r7, #28]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3728      	adds	r7, #40	@ 0x28
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20002898 	.word	0x20002898
 8000580:	20000000 	.word	0x20000000
 8000584:	20002888 	.word	0x20002888
 8000588:	20002890 	.word	0x20002890

0800058c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d039      	beq.n	8000612 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800059e:	2308      	movs	r3, #8
 80005a0:	425b      	negs	r3, r3
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	4413      	add	r3, r2
 80005a6:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	0fdb      	lsrs	r3, r3, #31
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d02a      	beq.n	8000612 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d126      	bne.n	8000612 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80005d0:	f001 fc24 	bl	8001e1c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <vPortFree+0x90>)
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e002      	b.n	80005e6 <vPortFree+0x5a>
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d8f6      	bhi.n	80005e0 <vPortFree+0x54>
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <vPortFree+0x94>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <vPortFree+0x94>)
 800060c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 800060e:	f001 fc13 	bl	8001e38 <xTaskResumeAll>
            }
        }
    }
}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20002888 	.word	0x20002888
 8000620:	20000000 	.word	0x20000000

08000624 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <prvHeapInit+0x44>)
 800062c:	f023 0307 	bic.w	r3, r3, #7
 8000630:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <prvHeapInit+0x48>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <prvHeapInit+0x48>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <prvHeapInit+0x4c>)
 8000640:	f242 72f8 	movw	r2, #10232	@ 0x27f8
 8000644:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <prvHeapInit+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f242 72f8 	movw	r2, #10232	@ 0x27f8
 8000656:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <prvHeapInit+0x4c>)
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	2000008f 	.word	0x2000008f
 800066c:	20002888 	.word	0x20002888
 8000670:	20002890 	.word	0x20002890

08000674 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f103 0208 	add.w	r2, r3, #8
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f103 0208 	add.w	r2, r3, #8
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f103 0208 	add.w	r2, r3, #8
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006ca:	b480      	push	{r7}
 80006cc:	b085      	sub	sp, #20
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e0:	d103      	bne.n	80006ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e00c      	b.n	8000704 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3308      	adds	r3, #8
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e002      	b.n	80006f8 <vListInsert+0x2e>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	429a      	cmp	r2, r3
 8000702:	d2f6      	bcs.n	80006f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800073a:	b480      	push	{r7}
 800073c:	b085      	sub	sp, #20
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	6892      	ldr	r2, [r2, #8]
 8000750:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	6852      	ldr	r2, [r2, #4]
 800075a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	429a      	cmp	r2, r3
 8000764:	d103      	bne.n	800076e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <_Z17uartTimerCallbackPv>:
	/// <ACTIVATE Control>
	Control motion(&M1,&M2); // controlling both motors with motion go forward, backward,right or left
///<declerations ENDS>
///<UART Task Begins>
void uartTimerCallback(void *pv)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	bl_test->INIT(1);
 8000794:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <_Z17uartTimerCallbackPv+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	4618      	mov	r0, r3
 800079c:	f002 f9aa 	bl	8002af4 <_ZN4UART4INITEi>
    // Queue sender
	while(1)
	{
    char control = bl_test->Read();
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <_Z17uartTimerCallbackPv+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fa1d 	bl	8002be4 <_ZN4UART4ReadEv>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
    xQueueSendToBack(xQueue, &control, portMAX_DELAY);
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <_Z17uartTimerCallbackPv+0x44>)
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f107 010f 	add.w	r1, r7, #15
 80007b6:	2300      	movs	r3, #0
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295
 80007bc:	f000 fe6e 	bl	800149c <xQueueGenericSend>
   // bl_test->Send(control);
	vTaskDelay(100/portTICK_RATE_MS);
 80007c0:	2064      	movs	r0, #100	@ 0x64
 80007c2:	f001 fa8d 	bl	8001ce0 <vTaskDelay>
	}
 80007c6:	bf00      	nop
 80007c8:	e7ea      	b.n	80007a0 <_Z17uartTimerCallbackPv+0x14>
 80007ca:	bf00      	nop
 80007cc:	2000296c 	.word	0x2000296c
 80007d0:	200028b4 	.word	0x200028b4

080007d4 <_Z9uart_READPv>:
}
void uart_READ(void *pv)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

	char reading=0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
while(1)
{
	xQueueReceive(xQueue, &reading, portMAX_DELAY);
 80007e0:	4b41      	ldr	r3, [pc, #260]	@ (80008e8 <_Z9uart_READPv+0x114>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 feff 	bl	80015f0 <xQueueReceive>
	if(reading =='w')
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	2b77      	cmp	r3, #119	@ 0x77
 80007f6:	d112      	bne.n	800081e <_Z9uart_READPv+0x4a>
	{
		LED_G.ON();
 80007f8:	483c      	ldr	r0, [pc, #240]	@ (80008ec <_Z9uart_READPv+0x118>)
 80007fa:	f000 fbfd 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_B.OFF();
 80007fe:	483c      	ldr	r0, [pc, #240]	@ (80008f0 <_Z9uart_READPv+0x11c>)
 8000800:	f000 fc10 	bl	8001024 <_ZN2OP3OFFEv>
		LED_R.OFF();
 8000804:	483b      	ldr	r0, [pc, #236]	@ (80008f4 <_Z9uart_READPv+0x120>)
 8000806:	f000 fc0d 	bl	8001024 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 800080a:	483b      	ldr	r0, [pc, #236]	@ (80008f8 <_Z9uart_READPv+0x124>)
 800080c:	f000 fc0a 	bl	8001024 <_ZN2OP3OFFEv>
		motion.Forward(Speed);
 8000810:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <_Z9uart_READPv+0x128>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	483a      	ldr	r0, [pc, #232]	@ (8000900 <_Z9uart_READPv+0x12c>)
 8000818:	f7ff fd97 	bl	800034a <_ZN7Control7ForwardEj>
 800081c:	e7e0      	b.n	80007e0 <_Z9uart_READPv+0xc>
	//	vTaskDelay(200/portTICK_RATE_MS);
	}
	else if(reading =='s')
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	2b73      	cmp	r3, #115	@ 0x73
 8000822:	d112      	bne.n	800084a <_Z9uart_READPv+0x76>
	{
		//BUZZ.ON();
		LED_R.ON();
 8000824:	4833      	ldr	r0, [pc, #204]	@ (80008f4 <_Z9uart_READPv+0x120>)
 8000826:	f000 fbe7 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_B.OFF();
 800082a:	4831      	ldr	r0, [pc, #196]	@ (80008f0 <_Z9uart_READPv+0x11c>)
 800082c:	f000 fbfa 	bl	8001024 <_ZN2OP3OFFEv>
		LED_G.OFF();
 8000830:	482e      	ldr	r0, [pc, #184]	@ (80008ec <_Z9uart_READPv+0x118>)
 8000832:	f000 fbf7 	bl	8001024 <_ZN2OP3OFFEv>
		BUZZ.ON();
 8000836:	4830      	ldr	r0, [pc, #192]	@ (80008f8 <_Z9uart_READPv+0x124>)
 8000838:	f000 fbde 	bl	8000ff8 <_ZN2OP2ONEv>
		motion.Backward(Speed);
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <_Z9uart_READPv+0x128>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	482f      	ldr	r0, [pc, #188]	@ (8000900 <_Z9uart_READPv+0x12c>)
 8000844:	f7ff fd99 	bl	800037a <_ZN7Control8BackwardEj>
 8000848:	e7ca      	b.n	80007e0 <_Z9uart_READPv+0xc>
		//vTaskDelay(200/portTICK_RATE_MS);

	}
	else if (reading=='d')
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b64      	cmp	r3, #100	@ 0x64
 800084e:	d112      	bne.n	8000876 <_Z9uart_READPv+0xa2>
	{
		LED_B.ON();
 8000850:	4827      	ldr	r0, [pc, #156]	@ (80008f0 <_Z9uart_READPv+0x11c>)
 8000852:	f000 fbd1 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_R.OFF();
 8000856:	4827      	ldr	r0, [pc, #156]	@ (80008f4 <_Z9uart_READPv+0x120>)
 8000858:	f000 fbe4 	bl	8001024 <_ZN2OP3OFFEv>
		LED_G.OFF();
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <_Z9uart_READPv+0x118>)
 800085e:	f000 fbe1 	bl	8001024 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 8000862:	4825      	ldr	r0, [pc, #148]	@ (80008f8 <_Z9uart_READPv+0x124>)
 8000864:	f000 fbde 	bl	8001024 <_ZN2OP3OFFEv>
		motion.Right(Turn);
 8000868:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <_Z9uart_READPv+0x130>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	4824      	ldr	r0, [pc, #144]	@ (8000900 <_Z9uart_READPv+0x12c>)
 8000870:	f7ff fd9b 	bl	80003aa <_ZN7Control5RightEj>
 8000874:	e7b4      	b.n	80007e0 <_Z9uart_READPv+0xc>
		//	vTaskDelay(200/portTICK_RATE_MS);

	}
	else if(reading =='a')
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2b61      	cmp	r3, #97	@ 0x61
 800087a:	d112      	bne.n	80008a2 <_Z9uart_READPv+0xce>
	{
		LED_B.ON();
 800087c:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <_Z9uart_READPv+0x11c>)
 800087e:	f000 fbbb 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_G.OFF();
 8000882:	481a      	ldr	r0, [pc, #104]	@ (80008ec <_Z9uart_READPv+0x118>)
 8000884:	f000 fbce 	bl	8001024 <_ZN2OP3OFFEv>
		LED_R.OFF();
 8000888:	481a      	ldr	r0, [pc, #104]	@ (80008f4 <_Z9uart_READPv+0x120>)
 800088a:	f000 fbcb 	bl	8001024 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 800088e:	481a      	ldr	r0, [pc, #104]	@ (80008f8 <_Z9uart_READPv+0x124>)
 8000890:	f000 fbc8 	bl	8001024 <_ZN2OP3OFFEv>
		motion.Left(Turn);
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <_Z9uart_READPv+0x130>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	4819      	ldr	r0, [pc, #100]	@ (8000900 <_Z9uart_READPv+0x12c>)
 800089c:	f7ff fd9d 	bl	80003da <_ZN7Control4LeftEj>
 80008a0:	e79e      	b.n	80007e0 <_Z9uart_READPv+0xc>
		//	vTaskDelay(200/portTICK_RATE_MS);

	}
	else if(reading =='p')
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	2b70      	cmp	r3, #112	@ 0x70
 80008a6:	d10f      	bne.n	80008c8 <_Z9uart_READPv+0xf4>
	{
		LED_R.ON();
 80008a8:	4812      	ldr	r0, [pc, #72]	@ (80008f4 <_Z9uart_READPv+0x120>)
 80008aa:	f000 fba5 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_B.ON();
 80008ae:	4810      	ldr	r0, [pc, #64]	@ (80008f0 <_Z9uart_READPv+0x11c>)
 80008b0:	f000 fba2 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_G.ON();
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <_Z9uart_READPv+0x118>)
 80008b6:	f000 fb9f 	bl	8000ff8 <_ZN2OP2ONEv>
		BUZZ.OFF();
 80008ba:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <_Z9uart_READPv+0x124>)
 80008bc:	f000 fbb2 	bl	8001024 <_ZN2OP3OFFEv>
		motion.BREAK();
 80008c0:	480f      	ldr	r0, [pc, #60]	@ (8000900 <_Z9uart_READPv+0x12c>)
 80008c2:	f7ff fda2 	bl	800040a <_ZN7Control5BREAKEv>
 80008c6:	e78b      	b.n	80007e0 <_Z9uart_READPv+0xc>
//vTaskDelay(200/portTICK_RATE_MS);
	}
	else
	{
		LED_B.ON();
 80008c8:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <_Z9uart_READPv+0x11c>)
 80008ca:	f000 fb95 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_R.ON();
 80008ce:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <_Z9uart_READPv+0x120>)
 80008d0:	f000 fb92 	bl	8000ff8 <_ZN2OP2ONEv>
		LED_G.OFF();
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <_Z9uart_READPv+0x118>)
 80008d6:	f000 fba5 	bl	8001024 <_ZN2OP3OFFEv>
		BUZZ.OFF();
 80008da:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <_Z9uart_READPv+0x124>)
 80008dc:	f000 fba2 	bl	8001024 <_ZN2OP3OFFEv>
		motion.BREAK();
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <_Z9uart_READPv+0x12c>)
 80008e2:	f7ff fd92 	bl	800040a <_ZN7Control5BREAKEv>
	xQueueReceive(xQueue, &reading, portMAX_DELAY);
 80008e6:	e77b      	b.n	80007e0 <_Z9uart_READPv+0xc>
 80008e8:	200028b4 	.word	0x200028b4
 80008ec:	20002928 	.word	0x20002928
 80008f0:	20002918 	.word	0x20002918
 80008f4:	20002938 	.word	0x20002938
 80008f8:	20002948 	.word	0x20002948
 80008fc:	20000008 	.word	0x20000008
 8000900:	20002970 	.word	0x20002970
 8000904:	2000000c 	.word	0x2000000c

08000908 <main>:
}
}
///< UART Tasks ENDS	>

int main()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af02      	add	r7, sp, #8
	///<configurations BEGINS>
	 config port;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fc8f 	bl	8000234 <_ZN6configC1Ev>
	port.ENPB();//enable RCC for port B
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fcbb 	bl	8000294 <_ZN6config4ENPBEv>
	port.ENPA();//enable RCC for port A
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fca5 	bl	8000270 <_ZN6config4ENPAEv>
   oled.setDisplayOptions(1, 1, 0); // Set display options (fontSize, fontColor, orientation)
   oled.display("Hello, World!"); // Send a string to the OLED screen at (0, 0) coordinates
*/
///<Activating OLED ENDS>
///<Activating RTOS BEGINS>
xQueue =xQueueCreate(10, sizeof(char));
 8000926:	2200      	movs	r2, #0
 8000928:	2101      	movs	r1, #1
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fd54 	bl	80013d8 <xQueueGenericCreate>
 8000930:	4603      	mov	r3, r0
 8000932:	4a10      	ldr	r2, [pc, #64]	@ (8000974 <main+0x6c>)
 8000934:	6013      	str	r3, [r2, #0]
if(xQueue != NULL)
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <main+0x6c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d018      	beq.n	8000970 <main+0x68>
{
	xTaskCreate(uartTimerCallback,"uart_com",400,NULL,3,NULL); //Receiving Data from (HC-05//TTL) and send it to Queue
 800093e:	2300      	movs	r3, #0
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2303      	movs	r3, #3
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800094c:	490a      	ldr	r1, [pc, #40]	@ (8000978 <main+0x70>)
 800094e:	480b      	ldr	r0, [pc, #44]	@ (800097c <main+0x74>)
 8000950:	f001 f89a 	bl	8001a88 <xTaskCreate>
	xTaskCreate(uart_READ,"uart_rec",400,NULL,3,NULL); // Fetching Data From Queue and Execute
 8000954:	2300      	movs	r3, #0
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	2303      	movs	r3, #3
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000962:	4907      	ldr	r1, [pc, #28]	@ (8000980 <main+0x78>)
 8000964:	4807      	ldr	r0, [pc, #28]	@ (8000984 <main+0x7c>)
 8000966:	f001 f88f 	bl	8001a88 <xTaskCreate>
	vTaskStartScheduler();
 800096a:	f001 fa29 	bl	8001dc0 <vTaskStartScheduler>
}
///<Activating RTOS ENDS>
while(1)
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <main+0x68>
 8000974:	200028b4 	.word	0x200028b4
 8000978:	08003210 	.word	0x08003210
 800097c:	0800078d 	.word	0x0800078d
 8000980:	0800321c 	.word	0x0800321c
 8000984:	080007d5 	.word	0x080007d5

08000988 <_ZN7ControlD1Ev>:
#define INC_CONTROL_H_
#include "motor.h"
#include "timer3.h"


class Control
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f002 f872 	bl	8002a7c <_ZN6Timer3D1Ev>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_ZN11Moto_ConfigD1Ev>:
#include "op.h"
#include "timer3.h"


///<Struct for Pins to be configured as O/P
struct Moto_Config
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3320      	adds	r3, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fb5d 	bl	800106e <_ZN2OPD1Ev>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3310      	adds	r3, #16
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fb58 	bl	800106e <_ZN2OPD1Ev>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fb54 	bl	800106e <_ZN2OPD1Ev>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_Z41__static_initialization_and_destruction_0ii>:
	motion.Right(Turn);
	*/
	//not needed infinte loop
}
return 0;
}
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d171      	bne.n	8000ac4 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d16c      	bne.n	8000ac4 <_Z41__static_initialization_and_destruction_0ii+0xf4>
	UART2INS = 0x40004400,
	UART3INS = 0x40004800,

};
const double USART_div = (FOSC + (BAUD / 2)) / BAUD;
const std::string msg= "NO UART with this address is Available!! \r\n" ;
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 f9b5 	bl	8002d5e <_ZNSaIcEC1Ev>
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	461a      	mov	r2, r3
 80009fa:	4946      	ldr	r1, [pc, #280]	@ (8000b14 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80009fc:	4846      	ldr	r0, [pc, #280]	@ (8000b18 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80009fe:	f002 fa1b 	bl	8002e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 f9aa 	bl	8002d60 <_ZNSaIcED1Ev>
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {GPIOB, 1,MODE::Gen}, {GPIOA, 6,MODE::AF}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	2205      	movs	r2, #5
 8000a10:	4942      	ldr	r1, [pc, #264]	@ (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000a12:	4843      	ldr	r0, [pc, #268]	@ (8000b20 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8000a14:	f000 f90a 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000a18:	2303      	movs	r3, #3
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4941      	ldr	r1, [pc, #260]	@ (8000b24 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8000a1e:	4842      	ldr	r0, [pc, #264]	@ (8000b28 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8000a20:	f000 f904 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000a24:	230b      	movs	r3, #11
 8000a26:	2206      	movs	r2, #6
 8000a28:	493c      	ldr	r1, [pc, #240]	@ (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000a2a:	4840      	ldr	r0, [pc, #256]	@ (8000b2c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8000a2c:	f000 f8fe 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {GPIOB, 0,MODE::AF}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 8000a30:	2303      	movs	r3, #3
 8000a32:	2204      	movs	r2, #4
 8000a34:	4939      	ldr	r1, [pc, #228]	@ (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000a36:	483e      	ldr	r0, [pc, #248]	@ (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8000a38:	f000 f8f8 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4936      	ldr	r1, [pc, #216]	@ (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000a42:	483c      	ldr	r0, [pc, #240]	@ (8000b34 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8000a44:	f000 f8f2 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000a48:	230b      	movs	r3, #11
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4935      	ldr	r1, [pc, #212]	@ (8000b24 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8000a4e:	483a      	ldr	r0, [pc, #232]	@ (8000b38 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8000a50:	f000 f8ec 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 8000a54:	2303      	movs	r3, #3
 8000a56:	2201      	movs	r2, #1
 8000a58:	4930      	ldr	r1, [pc, #192]	@ (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000a5a:	4838      	ldr	r0, [pc, #224]	@ (8000b3c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000a5c:	f000 f8e6 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP LED_G(GPIOA,2,MODE::Gen); // PIN A2 is a 50MHZ Output (Green LED)
 8000a60:	2303      	movs	r3, #3
 8000a62:	2202      	movs	r2, #2
 8000a64:	492d      	ldr	r1, [pc, #180]	@ (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000a66:	4836      	ldr	r0, [pc, #216]	@ (8000b40 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8000a68:	f000 f8e0 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	2203      	movs	r2, #3
 8000a70:	492a      	ldr	r1, [pc, #168]	@ (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000a72:	4834      	ldr	r0, [pc, #208]	@ (8000b44 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8000a74:	f000 f8da 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP BUZZ(GPIOB,9,MODE::Gen);// PIN B9 is a 50MHZ output (Buzzer)
 8000a78:	2303      	movs	r3, #3
 8000a7a:	2209      	movs	r2, #9
 8000a7c:	4929      	ldr	r1, [pc, #164]	@ (8000b24 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8000a7e:	4832      	ldr	r0, [pc, #200]	@ (8000b48 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8000a80:	f000 f8d4 	bl	8000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	Timer3 tim3(Period,Speed);
 8000a84:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a31      	ldr	r2, [pc, #196]	@ (8000b50 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4831      	ldr	r0, [pc, #196]	@ (8000b54 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8000a90:	f001 ff1a 	bl	80028c8 <_ZN6Timer3C1Ejj>
	Motor M1(&m1_c); /// OBJ Motor has the name M1 and the address of m1_c
 8000a94:	4922      	ldr	r1, [pc, #136]	@ (8000b20 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8000a96:	4830      	ldr	r0, [pc, #192]	@ (8000b58 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8000a98:	f000 f878 	bl	8000b8c <_ZN5MotorC1EP11Moto_Config>
	Motor M2(&m2_c); /// OBJ Motor has the name M2 and the address of m2_c
 8000a9c:	4924      	ldr	r1, [pc, #144]	@ (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8000a9e:	482f      	ldr	r0, [pc, #188]	@ (8000b5c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8000aa0:	f000 f874 	bl	8000b8c <_ZN5MotorC1EP11Moto_Config>
 UART* bl_test = new(UART1INS) UART(UART1INS);
 8000aa4:	492e      	ldr	r1, [pc, #184]	@ (8000b60 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8000aa6:	201c      	movs	r0, #28
 8000aa8:	f002 f8e7 	bl	8002c7a <_ZN4UARTnwEj13UART_Instance>
 8000aac:	4604      	mov	r4, r0
 8000aae:	492c      	ldr	r1, [pc, #176]	@ (8000b60 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f001 ffed 	bl	8002a90 <_ZN4UARTC1Ei>
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8000ab8:	601c      	str	r4, [r3, #0]
	Control motion(&M1,&M2); // controlling both motors with motion go forward, backward,right or left
 8000aba:	4a28      	ldr	r2, [pc, #160]	@ (8000b5c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8000abc:	4926      	ldr	r1, [pc, #152]	@ (8000b58 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8000abe:	482a      	ldr	r0, [pc, #168]	@ (8000b68 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8000ac0:	f7ff fc28 	bl	8000314 <_ZN7ControlC1EP5MotorS1_>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d11f      	bne.n	8000b0a <_Z41__static_initialization_and_destruction_0ii+0x13a>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d11a      	bne.n	8000b0a <_Z41__static_initialization_and_destruction_0ii+0x13a>
 8000ad4:	4824      	ldr	r0, [pc, #144]	@ (8000b68 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8000ad6:	f7ff ff57 	bl	8000988 <_ZN7ControlD1Ev>
	Timer3 tim3(Period,Speed);
 8000ada:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8000adc:	f001 ffce 	bl	8002a7c <_ZN6Timer3D1Ev>
	OP BUZZ(GPIOB,9,MODE::Gen);// PIN B9 is a 50MHZ output (Buzzer)
 8000ae0:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8000ae2:	f000 fac4 	bl	800106e <_ZN2OPD1Ev>
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 8000ae6:	4817      	ldr	r0, [pc, #92]	@ (8000b44 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8000ae8:	f000 fac1 	bl	800106e <_ZN2OPD1Ev>
	OP LED_G(GPIOA,2,MODE::Gen); // PIN A2 is a 50MHZ Output (Green LED)
 8000aec:	4814      	ldr	r0, [pc, #80]	@ (8000b40 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8000aee:	f000 fabe 	bl	800106e <_ZN2OPD1Ev>
	OP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 8000af2:	4812      	ldr	r0, [pc, #72]	@ (8000b3c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000af4:	f000 fabb 	bl	800106e <_ZN2OPD1Ev>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {GPIOB, 0,MODE::AF}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 8000af8:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8000afa:	f7ff ff52 	bl	80009a2 <_ZN11Moto_ConfigD1Ev>
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {GPIOB, 1,MODE::Gen}, {GPIOA, 6,MODE::AF}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8000b00:	f7ff ff4f 	bl	80009a2 <_ZN11Moto_ConfigD1Ev>
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8000b06:	f002 f973 	bl	8002df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	bf00      	nop
 8000b14:	08003228 	.word	0x08003228
 8000b18:	2000289c 	.word	0x2000289c
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	200028b8 	.word	0x200028b8
 8000b24:	40010c00 	.word	0x40010c00
 8000b28:	200028c8 	.word	0x200028c8
 8000b2c:	200028d8 	.word	0x200028d8
 8000b30:	200028e8 	.word	0x200028e8
 8000b34:	200028f8 	.word	0x200028f8
 8000b38:	20002908 	.word	0x20002908
 8000b3c:	20002918 	.word	0x20002918
 8000b40:	20002928 	.word	0x20002928
 8000b44:	20002938 	.word	0x20002938
 8000b48:	20002948 	.word	0x20002948
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20002958 	.word	0x20002958
 8000b58:	2000295c 	.word	0x2000295c
 8000b5c:	20002964 	.word	0x20002964
 8000b60:	40013800 	.word	0x40013800
 8000b64:	2000296c 	.word	0x2000296c
 8000b68:	20002970 	.word	0x20002970

08000b6c <_GLOBAL__sub_I_xQueue>:
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ff2b 	bl	80009d0 <_Z41__static_initialization_and_destruction_0ii>
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_GLOBAL__sub_D_xQueue>:
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff23 	bl	80009d0 <_Z41__static_initialization_and_destruction_0ii>
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_ZN5MotorC1EP11Moto_Config>:
 *      Author: AHMED ABDELAZIZ
 */

#include "motor.h"

Motor::Motor(Moto_Config * config) : Config_{config}
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	601a      	str	r2, [r3, #0]
{
STOP();
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f82b 	bl	8000bf8 <_ZN5Motor4STOPEv>
}
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5Motor2CWEv>:

void Motor::CW()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	Config_->in1.ON();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 fa1d 	bl	8000ff8 <_ZN2OP2ONEv>
	Config_->in2.OFF();
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fa2d 	bl	8001024 <_ZN2OP3OFFEv>
	//Config_->en.PWMON();
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZN5Motor3CCWEv>:
void Motor::CCW()
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	Config_->in1.OFF();
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fa20 	bl	8001024 <_ZN2OP3OFFEv>
	Config_->in2.ON();
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3310      	adds	r3, #16
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fa04 	bl	8000ff8 <_ZN2OP2ONEv>
	//Config_->en.PWMON();
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_ZN5Motor4STOPEv>:

void Motor::STOP()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	Config_->in1.OFF();
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fa0d 	bl	8001024 <_ZN2OP3OFFEv>
	Config_->in2.OFF();
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3310      	adds	r3, #16
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fa07 	bl	8001024 <_ZN2OP3OFFEv>
	Config_->en.PWMOFF();
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fa18 	bl	8001052 <_ZN2OP6PWMOFFEv>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>:
uint8_t OP::CountC;
uint8_t OP::CountAF;

const unsigned int  Pause=0;

OP::OP(GPIO_TypeDef * GPIO, uint8_t pin, MODE mode) : Port_{GPIO}, Pin_{pin}, mode_{mode}
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	711a      	strb	r2, [r3, #4]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	609a      	str	r2, [r3, #8]
	{
			config port;
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff faee 	bl	8000234 <_ZN6configC1Ev>

		if(GPIO == GPIOA)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4a8f      	ldr	r2, [pc, #572]	@ (8000e98 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x26c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	f040 8086 	bne.w	8000d6e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x142>
		{
			if(mode == MODE::Gen)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d137      	bne.n	8000cd8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xac>

		{
			if(CountA ==0)
 8000c68:	4b8c      	ldr	r3, [pc, #560]	@ (8000e9c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10c      	bne.n	8000c8a <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x5e>
			{
			port.ENPA();//enable RCC for port A
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fafb 	bl	8000270 <_ZN6config4ENPAEv>
				Port_->CRL = 0x00000000;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
			}
			CountA++;
 8000c8a:	4b84      	ldr	r3, [pc, #528]	@ (8000e9c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b82      	ldr	r3, [pc, #520]	@ (8000e9c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8000c94:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	d80c      	bhi.n	8000cb8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x8c>
			{
				Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	2203      	movs	r2, #3
 8000cac:	409a      	lsls	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e18c      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6859      	ldr	r1, [r3, #4]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cc6:	3b08      	subs	r3, #8
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	2203      	movs	r2, #3
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	e17c      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
		}

		else if (mode == MODE::AF)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2b0b      	cmp	r3, #11
 8000cdc:	f040 8179 	bne.w	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		{
			if(CountAF==0)
 8000ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8000ea0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x274>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10a      	bne.n	8000cfe <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xd2>
			{
				//config port;
				port.AFIOP();
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff faf5 	bl	80002dc <_ZN6config5AFIOPEv>
			CountAF++;
 8000cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8000ea0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x274>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b69      	ldr	r3, [pc, #420]	@ (8000ea0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x274>)
 8000cfc:	701a      	strb	r2, [r3, #0]
			}
			if(CountA ==0)
 8000cfe:	4b67      	ldr	r3, [pc, #412]	@ (8000e9c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10c      	bne.n	8000d20 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xf4>
			{
				port.ENPA();//enable RCC for port A
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fab0 	bl	8000270 <_ZN6config4ENPAEv>
				Port_->CRL = 0x00000000;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
			}
			CountA++;
 8000d20:	4b5e      	ldr	r3, [pc, #376]	@ (8000e9c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b5c      	ldr	r3, [pc, #368]	@ (8000e9c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x270>)
 8000d2a:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	d80c      	bhi.n	8000d4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x122>
			{
				Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	791b      	ldrb	r3, [r3, #4]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220b      	movs	r2, #11
 8000d42:	409a      	lsls	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e141      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6859      	ldr	r1, [r3, #4]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000d5c:	3b08      	subs	r3, #8
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220b      	movs	r2, #11
 8000d62:	409a      	lsls	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	e131      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
		}

	}
		else if(GPIO == GPIOB)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x278>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	f040 809a 	bne.w	8000eac <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x280>
	{

		if(mode == MODE::Gen)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d137      	bne.n	8000dee <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1c2>

	{
		if(CountB ==0)
 8000d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10c      	bne.n	8000da0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x174>
		{
			//config port;
			port.ENPB();//enable RCC for port B
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa82 	bl	8000294 <_ZN6config4ENPBEv>
			Port_->CRL = 0x00000000;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
			Port_->CRH = 0x00000000;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
		}
		CountB++;
 8000da0:	4b41      	ldr	r3, [pc, #260]	@ (8000ea8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8000daa:	701a      	strb	r2, [r3, #0]
		if(Pin_<PIN_per_REG)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	d80c      	bhi.n	8000dce <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1a2>
		{
			Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6819      	ldr	r1, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e101      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		}
		else
		{
			Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6859      	ldr	r1, [r3, #4]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ddc:	3b08      	subs	r3, #8
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	2203      	movs	r2, #3
 8000de2:	409a      	lsls	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	e0f1      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		}
	}

	else if (mode == MODE::AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	2b0b      	cmp	r3, #11
 8000df2:	f040 80ee 	bne.w	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
	{
		if(CountAF==0)
 8000df6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x274>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10a      	bne.n	8000e14 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e8>
		{
			//config port;
			port.AFIOP();
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fa6a 	bl	80002dc <_ZN6config5AFIOPEv>
			CountAF++;
 8000e08:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x274>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x274>)
 8000e12:	701a      	strb	r2, [r3, #0]
		}
		if(CountB ==0)
 8000e14:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d116      	bne.n	8000e4a <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x21e>
		{
			config port;
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fa07 	bl	8000234 <_ZN6configC1Ev>
			port.ENPB();//enable RCC for port B
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fa32 	bl	8000294 <_ZN6config4ENPBEv>
			Port_->CRL = 0x00000000;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
			Port_->CRH = 0x00000000;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
		}
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fa5b 	bl	8000300 <_ZN6configD1Ev>
		CountB++;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x27c>)
 8000e54:	701a      	strb	r2, [r3, #0]
		if(Pin_<PIN_per_REG)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	d80c      	bhi.n	8000e78 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x24c>
		{
			Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6819      	ldr	r1, [r3, #0]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	791b      	ldrb	r3, [r3, #4]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220b      	movs	r2, #11
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e0ac      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		}
		else
		{
			Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	6859      	ldr	r1, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e86:	3b08      	subs	r3, #8
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220b      	movs	r2, #11
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	e09c      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	2000297c 	.word	0x2000297c
 8000ea0:	2000297f 	.word	0x2000297f
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	2000297d 	.word	0x2000297d
		}
	}
	}
	else if(GPIO == GPIOC)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4a4f      	ldr	r2, [pc, #316]	@ (8000fec <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	f040 808e 	bne.w	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		{

			if(mode == MODE::Gen)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d137      	bne.n	8000f2c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x300>

		{
			if(CountC ==0)
 8000ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d10c      	bne.n	8000ede <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x2b2>
			{
				//config port;
				port.ENPC();//enable RCC for port C
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f9f5 	bl	80002b8 <_ZN6config4ENPCEv>
				Port_->CRL = 0x00000000;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
			}
			CountC++;
 8000ede:	4b44      	ldr	r3, [pc, #272]	@ (8000ff0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b42      	ldr	r3, [pc, #264]	@ (8000ff0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 8000ee8:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d80c      	bhi.n	8000f0c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x2e0>
			{
				Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	791b      	ldrb	r3, [r3, #4]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	2203      	movs	r2, #3
 8000f00:	409a      	lsls	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e062      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	791b      	ldrb	r3, [r3, #4]
 8000f16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000f1a:	3b08      	subs	r3, #8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	e052      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
		}

		else if (mode == MODE::AF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b0b      	cmp	r3, #11
 8000f30:	d14f      	bne.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
		{
			if(CountAF==0)
 8000f32:	4b30      	ldr	r3, [pc, #192]	@ (8000ff4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x324>
			{
				//config port;
				port.AFIOP();
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f9cc 	bl	80002dc <_ZN6config5AFIOPEv>
				CountAF++;
 8000f44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c8>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c8>)
 8000f4e:	701a      	strb	r2, [r3, #0]
			}
			if(CountC ==0)
 8000f50:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d116      	bne.n	8000f86 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x35a>
			{
				config port;
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f969 	bl	8000234 <_ZN6configC1Ev>
				port.ENPC();//enable RCC for port C
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff f9a6 	bl	80002b8 <_ZN6config4ENPCEv>
				Port_->CRL = 0x00000000;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
			}
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f9bd 	bl	8000300 <_ZN6configD1Ev>
			CountC++;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3c4>)
 8000f90:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	791b      	ldrb	r3, [r3, #4]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d80c      	bhi.n	8000fb4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x388>
			{
				Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6819      	ldr	r1, [r3, #0]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	791b      	ldrb	r3, [r3, #4]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220b      	movs	r2, #11
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e00e      	b.n	8000fd2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x3a6>
			}
			else
			{
				Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000fc2:	3b08      	subs	r3, #8
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220b      	movs	r2, #11
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	605a      	str	r2, [r3, #4]
			}
		}

}
			OFF();
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f826 	bl	8001024 <_ZN2OP3OFFEv>
		}
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f98f 	bl	8000300 <_ZN6configD1Ev>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	2000297e 	.word	0x2000297e
 8000ff4:	2000297f 	.word	0x2000297f

08000ff8 <_ZN2OP2ONEv>:


	void OP::ON()
	{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
		Port_->ODR|=(1<<Pin_);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	791b      	ldrb	r3, [r3, #4]
 800100a:	4619      	mov	r1, r3
 800100c:	2301      	movs	r3, #1
 800100e:	408b      	lsls	r3, r1
 8001010:	4619      	mov	r1, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	60da      	str	r2, [r3, #12]
	}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <_ZN2OP3OFFEv>:
	void OP::OFF()
	{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
		Port_->ODR&=~(1<<Pin_);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	791b      	ldrb	r3, [r3, #4]
 8001036:	4619      	mov	r1, r3
 8001038:	2301      	movs	r3, #1
 800103a:	408b      	lsls	r3, r1
 800103c:	43db      	mvns	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	400a      	ands	r2, r1
 8001046:	60da      	str	r2, [r3, #12]
	}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <_ZN2OP6PWMOFFEv>:
void OP::PWMON()
{
	tim3.pwmWrite();
}
void OP::PWMOFF()
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	tim3.pwmWrite(Pause);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	330c      	adds	r3, #12
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fc8f 	bl	8002984 <_ZN6Timer38pwmWriteEj>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZN2OPD1Ev>:
	OP::~OP()
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	{
		OFF();
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffd4 	bl	8001024 <_ZN2OP3OFFEv>
	}
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330c      	adds	r3, #12
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fcfb 	bl	8002a7c <_ZN6Timer3D1Ev>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3b04      	subs	r3, #4
 80010a0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3b04      	subs	r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f023 0201 	bic.w	r2, r3, #1
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3b04      	subs	r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80010c0:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <pxPortInitialiseStack+0x54>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3b14      	subs	r3, #20
 80010ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b20      	subs	r3, #32
 80010d6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	080010e9 	.word	0x080010e9

080010e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80010f2:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80010f6:	f383 8811 	msr	BASEPRI, r3
 80010fa:	f3bf 8f6f 	isb	sy
 80010fe:	f3bf 8f4f 	dsb	sy
 8001102:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8001104:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001106:	bf00      	nop
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0fc      	beq.n	8001108 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	0000      	movs	r0, r0
 800111c:	0000      	movs	r0, r0
	...

08001120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001120:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <pxCurrentTCBConst2>)
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	6808      	ldr	r0, [r1, #0]
 8001126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800112a:	f380 8809 	msr	PSP, r0
 800112e:	f3bf 8f6f 	isb	sy
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	f380 8811 	msr	BASEPRI, r0
 800113a:	f04e 0e0d 	orr.w	lr, lr, #13
 800113e:	4770      	bx	lr

08001140 <pxCurrentTCBConst2>:
 8001140:	20002984 	.word	0x20002984
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop

08001148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001148:	4806      	ldr	r0, [pc, #24]	@ (8001164 <prvPortStartFirstTask+0x1c>)
 800114a:	6800      	ldr	r0, [r0, #0]
 800114c:	6800      	ldr	r0, [r0, #0]
 800114e:	f380 8808 	msr	MSP, r0
 8001152:	b662      	cpsie	i
 8001154:	b661      	cpsie	f
 8001156:	f3bf 8f4f 	dsb	sy
 800115a:	f3bf 8f6f 	isb	sy
 800115e:	df00      	svc	0
 8001160:	bf00      	nop
 8001162:	0000      	.short	0x0000
 8001164:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop

0800116c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <xPortStartScheduler+0x4c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <xPortStartScheduler+0x50>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <xPortStartScheduler+0x50>)
 800117e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001182:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <xPortStartScheduler+0x50>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <xPortStartScheduler+0x50>)
 800118a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800118e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <xPortStartScheduler+0x54>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001196:	f000 f891 	bl	80012bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <xPortStartScheduler+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80011a0:	f7ff ffd2 	bl	8001148 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80011a4:	f001 f848 	bl	8002238 <vTaskSwitchContext>
    prvTaskExitError();
 80011a8:	f7ff ff9e 	bl	80010e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000ed08 	.word	0xe000ed08
 80011bc:	e000ed20 	.word	0xe000ed20
 80011c0:	e000ed1c 	.word	0xe000ed1c
 80011c4:	20000010 	.word	0x20000010

080011c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
    __asm volatile
 80011ce:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80011d2:	f383 8811 	msr	BASEPRI, r3
 80011d6:	f3bf 8f6f 	isb	sy
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	607b      	str	r3, [r7, #4]
}
 80011e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <vPortEnterCritical+0x30>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a03      	ldr	r2, [pc, #12]	@ (80011f8 <vPortEnterCritical+0x30>)
 80011ea:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000010 	.word	0x20000010

080011fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <vPortExitCritical+0x30>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3b01      	subs	r3, #1
 8001208:	4a08      	ldr	r2, [pc, #32]	@ (800122c <vPortExitCritical+0x30>)
 800120a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <vPortExitCritical+0x30>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <vPortExitCritical+0x24>
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800121e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000010 	.word	0x20000010

08001230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001230:	f3ef 8009 	mrs	r0, PSP
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <pxCurrentTCBConst>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001240:	6010      	str	r0, [r2, #0]
 8001242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001246:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 800124a:	f380 8811 	msr	BASEPRI, r0
 800124e:	f000 fff3 	bl	8002238 <vTaskSwitchContext>
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	f380 8811 	msr	BASEPRI, r0
 800125a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	6808      	ldr	r0, [r1, #0]
 8001262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001266:	f380 8809 	msr	PSP, r0
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	4770      	bx	lr

08001270 <pxCurrentTCBConst>:
 8001270:	20002984 	.word	0x20002984
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop

08001278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
    __asm volatile
 800127e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001282:	f383 8811 	msr	BASEPRI, r3
 8001286:	f3bf 8f6f 	isb	sy
 800128a:	f3bf 8f4f 	dsb	sy
 800128e:	607b      	str	r3, [r7, #4]
}
 8001290:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001292:	f000 fec9 	bl	8002028 <xTaskIncrementTick>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SysTick_Handler+0x40>)
 800129e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f383 8811 	msr	BASEPRI, r3
}
 80012ae:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	e000ed04 	.word	0xe000ed04

080012bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <vPortSetupTimerInterrupt+0x28>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <vPortSetupTimerInterrupt+0x2c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <vPortSetupTimerInterrupt+0x30>)
 80012ce:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80012d2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <vPortSetupTimerInterrupt+0x28>)
 80012d6:	2207      	movs	r2, #7
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010
 80012e8:	e000e018 	.word	0xe000e018
 80012ec:	e000e014 	.word	0xe000e014

080012f0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80012fa:	2301      	movs	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05d      	beq.n	80013c4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800130c:	2b00      	cmp	r3, #0
 800130e:	d059      	beq.n	80013c4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001318:	2100      	movs	r1, #0
 800131a:	fba3 2302 	umull	r2, r3, r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d000      	beq.n	8001324 <xQueueGenericReset+0x34>
 8001322:	2101      	movs	r1, #1
 8001324:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d14c      	bne.n	80013c4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800132a:	f7ff ff4d 	bl	80011c8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	441a      	add	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2200      	movs	r2, #0
 8001348:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135a:	3b01      	subs	r3, #1
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	441a      	add	r2, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	22ff      	movs	r2, #255	@ 0xff
 800136e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	22ff      	movs	r2, #255	@ 0xff
 8001376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d114      	bne.n	80013aa <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01a      	beq.n	80013be <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3310      	adds	r3, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f000 ffaf 	bl	80022f0 <xTaskRemoveFromEventList>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d012      	beq.n	80013be <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <xQueueGenericReset+0xe4>)
 800139a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	f3bf 8f4f 	dsb	sy
 80013a4:	f3bf 8f6f 	isb	sy
 80013a8:	e009      	b.n	80013be <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3310      	adds	r3, #16
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f960 	bl	8000674 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	3324      	adds	r3, #36	@ 0x24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f95b 	bl	8000674 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80013be:	f7ff ff1d 	bl	80011fc <vPortExitCritical>
 80013c2:	e001      	b.n	80013c8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000ed04 	.word	0xe000ed04

080013d8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	4613      	mov	r3, r2
 80013e4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d02d      	beq.n	800144c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80013f0:	2100      	movs	r1, #0
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	fba3 2302 	umull	r2, r3, r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d000      	beq.n	8001400 <xQueueGenericCreate+0x28>
 80013fe:	2101      	movs	r1, #1
 8001400:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001402:	2b00      	cmp	r3, #0
 8001404:	d122      	bne.n	800144c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800140e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001412:	d81b      	bhi.n	800144c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	3350      	adds	r3, #80	@ 0x50
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f804 	bl	8000430 <pvPortMalloc>
 8001428:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00d      	beq.n	800144c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3350      	adds	r3, #80	@ 0x50
 8001438:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f805 	bl	8001456 <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800144c:	69fb      	ldr	r3, [r7, #28]
    }
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e002      	b.n	8001478 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001484:	2101      	movs	r1, #1
 8001486:	69b8      	ldr	r0, [r7, #24]
 8001488:	f7ff ff32 	bl	80012f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80014b2:	f7ff fe89 	bl	80011c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014be:	429a      	cmp	r2, r3
 80014c0:	d302      	bcc.n	80014c8 <xQueueGenericSend+0x2c>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d129      	bne.n	800151c <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	6a38      	ldr	r0, [r7, #32]
 80014ce:	f000 f931 	bl	8001734 <prvCopyDataToQueue>
 80014d2:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d010      	beq.n	80014fe <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	3324      	adds	r3, #36	@ 0x24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 ff05 	bl	80022f0 <xTaskRemoveFromEventList>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80014ec:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <xQueueGenericSend+0x150>)
 80014ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f3bf 8f4f 	dsb	sy
 80014f8:	f3bf 8f6f 	isb	sy
 80014fc:	e00a      	b.n	8001514 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001504:	4b39      	ldr	r3, [pc, #228]	@ (80015ec <xQueueGenericSend+0x150>)
 8001506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001514:	f7ff fe72 	bl	80011fc <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8001518:	2301      	movs	r3, #1
 800151a:	e063      	b.n	80015e4 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d103      	bne.n	800152a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001522:	f7ff fe6b 	bl	80011fc <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8001526:	2300      	movs	r3, #0
 8001528:	e05c      	b.n	80015e4 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	2b00      	cmp	r3, #0
 800152e:	d106      	bne.n	800153e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4618      	mov	r0, r3
 8001536:	f000 ffa5 	bl	8002484 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800153a:	2301      	movs	r3, #1
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800153e:	f7ff fe5d 	bl	80011fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001542:	f000 fc6b 	bl	8001e1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001546:	f7ff fe3f 	bl	80011c8 <vPortEnterCritical>
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001550:	b25b      	sxtb	r3, r3
 8001552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001556:	d103      	bne.n	8001560 <xQueueGenericSend+0xc4>
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001566:	b25b      	sxtb	r3, r3
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d103      	bne.n	8001576 <xQueueGenericSend+0xda>
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001576:	f7ff fe41 	bl	80011fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800157a:	1d3a      	adds	r2, r7, #4
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f000 ff94 	bl	80024b0 <xTaskCheckForTimeOut>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d124      	bne.n	80015d8 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800158e:	6a38      	ldr	r0, [r7, #32]
 8001590:	f000 f9c8 	bl	8001924 <prvIsQueueFull>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d018      	beq.n	80015cc <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3310      	adds	r3, #16
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fe8e 	bl	80022c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80015a8:	6a38      	ldr	r0, [r7, #32]
 80015aa:	f000 f953 	bl	8001854 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80015ae:	f000 fc43 	bl	8001e38 <xTaskResumeAll>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f af7c 	bne.w	80014b2 <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <xQueueGenericSend+0x150>)
 80015bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f3bf 8f4f 	dsb	sy
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	e772      	b.n	80014b2 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80015cc:	6a38      	ldr	r0, [r7, #32]
 80015ce:	f000 f941 	bl	8001854 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80015d2:	f000 fc31 	bl	8001e38 <xTaskResumeAll>
 80015d6:	e76c      	b.n	80014b2 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80015d8:	6a38      	ldr	r0, [r7, #32]
 80015da:	f000 f93b 	bl	8001854 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80015de:	f000 fc2b 	bl	8001e38 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80015e2:	2300      	movs	r3, #0
        }
    }
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3728      	adds	r7, #40	@ 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001604:	f7ff fde0 	bl	80011c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d01f      	beq.n	8001654 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6a38      	ldr	r0, [r7, #32]
 8001618:	f000 f8f6 	bl	8001808 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00f      	beq.n	800164c <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	3310      	adds	r3, #16
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fe5d 	bl	80022f0 <xTaskRemoveFromEventList>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800163c:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <xQueueReceive+0x140>)
 800163e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f3bf 8f4f 	dsb	sy
 8001648:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800164c:	f7ff fdd6 	bl	80011fc <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8001650:	2301      	movs	r3, #1
 8001652:	e069      	b.n	8001728 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d103      	bne.n	8001662 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800165a:	f7ff fdcf 	bl	80011fc <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800165e:	2300      	movs	r3, #0
 8001660:	e062      	b.n	8001728 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	2b00      	cmp	r3, #0
 8001666:	d106      	bne.n	8001676 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4618      	mov	r0, r3
 800166e:	f000 ff09 	bl	8002484 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001672:	2301      	movs	r3, #1
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001676:	f7ff fdc1 	bl	80011fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800167a:	f000 fbcf 	bl	8001e1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800167e:	f7ff fda3 	bl	80011c8 <vPortEnterCritical>
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168e:	d103      	bne.n	8001698 <xQueueReceive+0xa8>
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a4:	d103      	bne.n	80016ae <xQueueReceive+0xbe>
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016ae:	f7ff fda5 	bl	80011fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016b2:	1d3a      	adds	r2, r7, #4
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fef8 	bl	80024b0 <xTaskCheckForTimeOut>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d123      	bne.n	800170e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016c6:	6a38      	ldr	r0, [r7, #32]
 80016c8:	f000 f916 	bl	80018f8 <prvIsQueueEmpty>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d017      	beq.n	8001702 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	3324      	adds	r3, #36	@ 0x24
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fdf2 	bl	80022c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80016e0:	6a38      	ldr	r0, [r7, #32]
 80016e2:	f000 f8b7 	bl	8001854 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80016e6:	f000 fba7 	bl	8001e38 <xTaskResumeAll>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d189      	bne.n	8001604 <xQueueReceive+0x14>
                {
                    taskYIELD_WITHIN_API();
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <xQueueReceive+0x140>)
 80016f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	f3bf 8f4f 	dsb	sy
 80016fc:	f3bf 8f6f 	isb	sy
 8001700:	e780      	b.n	8001604 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001702:	6a38      	ldr	r0, [r7, #32]
 8001704:	f000 f8a6 	bl	8001854 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001708:	f000 fb96 	bl	8001e38 <xTaskResumeAll>
 800170c:	e77a      	b.n	8001604 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800170e:	6a38      	ldr	r0, [r7, #32]
 8001710:	f000 f8a0 	bl	8001854 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001714:	f000 fb90 	bl	8001e38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001718:	6a38      	ldr	r0, [r7, #32]
 800171a:	f000 f8ed 	bl	80018f8 <prvIsQueueEmpty>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	f43f af6f 	beq.w	8001604 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001726:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001728:	4618      	mov	r0, r3
 800172a:	3728      	adds	r7, #40	@ 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	e000ed04 	.word	0xe000ed04

08001734 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001748:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10d      	bne.n	800176e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d14d      	bne.n	80017f6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 ffac 	bl	80026bc <xTaskPriorityDisinherit>
 8001764:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	e043      	b.n	80017f6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d119      	bne.n	80017a8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6858      	ldr	r0, [r3, #4]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	461a      	mov	r2, r3
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	f001 fce4 	bl	800314c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	441a      	add	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	429a      	cmp	r2, r3
 800179c:	d32b      	bcc.n	80017f6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	e026      	b.n	80017f6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68d8      	ldr	r0, [r3, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	461a      	mov	r2, r3
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	f001 fcca 	bl	800314c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	425b      	negs	r3, r3
 80017c2:	441a      	add	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	425b      	negs	r3, r3
 80017de:	441a      	add	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d105      	bne.n	80017f6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80017fe:	697b      	ldr	r3, [r7, #20]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d018      	beq.n	800184c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	441a      	add	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	d303      	bcc.n	800183c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68d9      	ldr	r1, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	461a      	mov	r2, r3
 8001846:	6838      	ldr	r0, [r7, #0]
 8001848:	f001 fc80 	bl	800314c <memcpy>
    }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800185c:	f7ff fcb4 	bl	80011c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001866:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001868:	e011      	b.n	800188e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	2b00      	cmp	r3, #0
 8001870:	d012      	beq.n	8001898 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3324      	adds	r3, #36	@ 0x24
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fd3a 	bl	80022f0 <xTaskRemoveFromEventList>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001882:	f000 fe5f 	bl	8002544 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	3b01      	subs	r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	dce9      	bgt.n	800186a <prvUnlockQueue+0x16>
 8001896:	e000      	b.n	800189a <prvUnlockQueue+0x46>
                    break;
 8001898:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	22ff      	movs	r2, #255	@ 0xff
 800189e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80018a2:	f7ff fcab 	bl	80011fc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80018a6:	f7ff fc8f 	bl	80011c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018b0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018b2:	e011      	b.n	80018d8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d012      	beq.n	80018e2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3310      	adds	r3, #16
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd15 	bl	80022f0 <xTaskRemoveFromEventList>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80018cc:	f000 fe3a 	bl	8002544 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dce9      	bgt.n	80018b4 <prvUnlockQueue+0x60>
 80018e0:	e000      	b.n	80018e4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80018e2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	22ff      	movs	r2, #255	@ 0xff
 80018e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80018ec:	f7ff fc86 	bl	80011fc <vPortExitCritical>
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001900:	f7ff fc62 	bl	80011c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800190c:	2301      	movs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e001      	b.n	8001916 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001916:	f7ff fc71 	bl	80011fc <vPortExitCritical>

    return xReturn;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800192c:	f7ff fc4c 	bl	80011c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001938:	429a      	cmp	r2, r3
 800193a:	d102      	bne.n	8001942 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800193c:	2301      	movs	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e001      	b.n	8001946 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001946:	f7ff fc59 	bl	80011fc <vPortExitCritical>

    return xReturn;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <_kill>:

int _kill(int pid, int sig)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196c:	f001 fbc2 	bl	80030f4 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	2216      	movs	r2, #22
 8001974:	601a      	str	r2, [r3, #0]
  return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_exit>:

void _exit (int status)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800198a:	f04f 31ff 	mov.w	r1, #4294967295
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffe7 	bl	8001962 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <_exit+0x12>

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f001 fb94 	bl	80030f4 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20005000 	.word	0x20005000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	20002980 	.word	0x20002980
 8001a00:	20002c08 	.word	0x20002c08

08001a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd04 	bl	8000430 <pvPortMalloc>
 8001a28:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001a30:	205c      	movs	r0, #92	@ 0x5c
 8001a32:	f7fe fcfd 	bl	8000430 <pvPortMalloc>
 8001a36:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001a3e:	225c      	movs	r2, #92	@ 0x5c
 8001a40:	2100      	movs	r1, #0
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f001 fafa 	bl	800303c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a4e:	e005      	b.n	8001a5c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001a50:	6938      	ldr	r0, [r7, #16]
 8001a52:	f7fe fd9b 	bl	800058c <vPortFree>
 8001a56:	e001      	b.n	8001a5c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00d      	beq.n	8001a7e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a62:	2300      	movs	r3, #0
 8001a64:	9303      	str	r3, [sp, #12]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f828 	bl	8001ace <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001a7e:	697b      	ldr	r3, [r7, #20]
    }
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f7ff ffb3 	bl	8001a10 <prvCreateTask>
 8001aaa:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001ab2:	6938      	ldr	r0, [r7, #16]
 8001ab4:	f000 f87c 	bl	8001bb0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e002      	b.n	8001ac4 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001ac4:	697b      	ldr	r3, [r7, #20]
    }
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ade:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	21a5      	movs	r1, #165	@ 0xa5
 8001ae8:	f001 faa8 	bl	800303c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001af6:	3b01      	subs	r3, #1
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	f023 0307 	bic.w	r3, r3, #7
 8001b04:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01e      	beq.n	8001b4a <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e012      	b.n	8001b38 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	4413      	add	r3, r2
 8001b18:	7819      	ldrb	r1, [r3, #0]
 8001b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	4413      	add	r3, r2
 8001b20:	3334      	adds	r3, #52	@ 0x34
 8001b22:	460a      	mov	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	d9e9      	bls.n	8001b12 <prvInitialiseNewTask+0x44>
 8001b3e:	e000      	b.n	8001b42 <prvInitialiseNewTask+0x74>
            {
                break;
 8001b40:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d901      	bls.n	8001b54 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b50:	2305      	movs	r3, #5
 8001b52:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5c:	6a3a      	ldr	r2, [r7, #32]
 8001b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b62:	3304      	adds	r3, #4
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fda4 	bl	80006b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fd9f 	bl	80006b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b78:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	f1c3 0206 	rsb	r2, r3, #6
 8001b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b82:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	6938      	ldr	r0, [r7, #16]
 8001b90:	f7ff fa7e 	bl	8001090 <pxPortInitialiseStack>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b98:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ba4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001bb8:	f7ff fb06 	bl	80011c8 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001bbc:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <prvAddNewTaskToReadyList+0x114>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a40      	ldr	r2, [pc, #256]	@ (8001cc4 <prvAddNewTaskToReadyList+0x114>)
 8001bc4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001bc6:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <prvAddNewTaskToReadyList+0x118>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001bce:	4a3e      	ldr	r2, [pc, #248]	@ (8001cc8 <prvAddNewTaskToReadyList+0x118>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <prvAddNewTaskToReadyList+0x114>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d110      	bne.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001bdc:	f000 fcd6 	bl	800258c <prvInitialiseTaskLists>
 8001be0:	e00d      	b.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001be2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ccc <prvAddNewTaskToReadyList+0x11c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bea:	4b37      	ldr	r3, [pc, #220]	@ (8001cc8 <prvAddNewTaskToReadyList+0x118>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d802      	bhi.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001bf8:	4a33      	ldr	r2, [pc, #204]	@ (8001cc8 <prvAddNewTaskToReadyList+0x118>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <prvAddNewTaskToReadyList+0x120>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	4a32      	ldr	r2, [pc, #200]	@ (8001cd0 <prvAddNewTaskToReadyList+0x120>)
 8001c06:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001c08:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <prvAddNewTaskToReadyList+0x120>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <prvAddNewTaskToReadyList+0x124>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001cd4 <prvAddNewTaskToReadyList+0x124>)
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c26:	492c      	ldr	r1, [pc, #176]	@ (8001cd8 <prvAddNewTaskToReadyList+0x128>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3304      	adds	r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	3204      	adds	r2, #4
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1d1a      	adds	r2, r3, #4
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd8 <prvAddNewTaskToReadyList+0x128>)
 8001c66:	441a      	add	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c70:	4919      	ldr	r1, [pc, #100]	@ (8001cd8 <prvAddNewTaskToReadyList+0x128>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c82:	1c59      	adds	r1, r3, #1
 8001c84:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <prvAddNewTaskToReadyList+0x128>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4403      	add	r3, r0
 8001c90:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001c92:	f7ff fab3 	bl	80011fc <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <prvAddNewTaskToReadyList+0x11c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00e      	beq.n	8001cbc <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <prvAddNewTaskToReadyList+0x118>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d207      	bcs.n	8001cbc <prvAddNewTaskToReadyList+0x10c>
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <prvAddNewTaskToReadyList+0x12c>)
 8001cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20002a70 	.word	0x20002a70
 8001cc8:	20002984 	.word	0x20002984
 8001ccc:	20002a7c 	.word	0x20002a7c
 8001cd0:	20002a8c 	.word	0x20002a8c
 8001cd4:	20002a78 	.word	0x20002a78
 8001cd8:	20002988 	.word	0x20002988
 8001cdc:	e000ed04 	.word	0xe000ed04

08001ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 8001cf2:	f000 f893 	bl	8001e1c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fd63 	bl	80027c4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001cfe:	f000 f89b 	bl	8001e38 <xTaskResumeAll>
 8001d02:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <vTaskDelay+0x44>)
 8001d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000ed04 	.word	0xe000ed04

08001d28 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	e011      	b.n	8001d60 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <prvCreateIdleTasks+0x8c>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	4413      	add	r3, r2
 8001d42:	7819      	ldrb	r1, [r3, #0]
 8001d44:	463a      	mov	r2, r7
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4413      	add	r3, r2
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001d4e:	463a      	mov	r2, r7
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b0f      	cmp	r3, #15
 8001d64:	ddea      	ble.n	8001d3c <prvCreateIdleTasks+0x14>
 8001d66:	e000      	b.n	8001d6a <prvCreateIdleTasks+0x42>
        {
            break;
 8001d68:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	e016      	b.n	8001d9e <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <prvCreateIdleTasks+0x90>)
 8001d72:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <prvCreateIdleTasks+0x94>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4639      	mov	r1, r7
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d8a:	6938      	ldr	r0, [r7, #16]
 8001d8c:	f7ff fe7c 	bl	8001a88 <xTaskCreate>
 8001d90:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	dde5      	ble.n	8001d70 <prvCreateIdleTasks+0x48>
 8001da4:	e000      	b.n	8001da8 <prvCreateIdleTasks+0x80>
        {
            break;
 8001da6:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001da8:	69fb      	ldr	r3, [r7, #28]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08003254 	.word	0x08003254
 8001db8:	0800255d 	.word	0x0800255d
 8001dbc:	20002a94 	.word	0x20002a94

08001dc0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001dc6:	f7ff ffaf 	bl	8001d28 <prvCreateIdleTasks>
 8001dca:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d115      	bne.n	8001dfe <vTaskStartScheduler+0x3e>
    __asm volatile
 8001dd2:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	603b      	str	r3, [r7, #0]
}
 8001de4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <vTaskStartScheduler+0x4c>)
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <vTaskStartScheduler+0x50>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001df4:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <vTaskStartScheduler+0x54>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001dfa:	f7ff f9b7 	bl	800116c <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <vTaskStartScheduler+0x58>)
 8001e00:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20002a90 	.word	0x20002a90
 8001e10:	20002a7c 	.word	0x20002a7c
 8001e14:	20002a74 	.word	0x20002a74
 8001e18:	20000014 	.word	0x20000014

08001e1c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <vTaskSuspendAll+0x18>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a03      	ldr	r2, [pc, #12]	@ (8001e34 <vTaskSuspendAll+0x18>)
 8001e28:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20002a98 	.word	0x20002a98

08001e38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001e46:	f7ff f9bf 	bl	80011c8 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002004 <xTaskResumeAll+0x1cc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4a6b      	ldr	r2, [pc, #428]	@ (8002004 <xTaskResumeAll+0x1cc>)
 8001e56:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001e58:	4b6a      	ldr	r3, [pc, #424]	@ (8002004 <xTaskResumeAll+0x1cc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 80ca 	bne.w	8001ff6 <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e62:	4b69      	ldr	r3, [pc, #420]	@ (8002008 <xTaskResumeAll+0x1d0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 80c5 	beq.w	8001ff6 <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e6c:	e08e      	b.n	8001f8c <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e6e:	4b67      	ldr	r3, [pc, #412]	@ (800200c <xTaskResumeAll+0x1d4>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	6a12      	ldr	r2, [r2, #32]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	69d2      	ldr	r2, [r2, #28]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	3318      	adds	r3, #24
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d103      	bne.n	8001ea4 <xTaskResumeAll+0x6c>
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	68d2      	ldr	r2, [r2, #12]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	6892      	ldr	r2, [r2, #8]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d103      	bne.n	8001ee2 <xTaskResumeAll+0xaa>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4b45      	ldr	r3, [pc, #276]	@ (8002010 <xTaskResumeAll+0x1d8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	4a43      	ldr	r2, [pc, #268]	@ (8002010 <xTaskResumeAll+0x1d8>)
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f08:	4942      	ldr	r1, [pc, #264]	@ (8002014 <xTaskResumeAll+0x1dc>)
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3304      	adds	r3, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	3204      	adds	r2, #4
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	1d1a      	adds	r2, r3, #4
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4a33      	ldr	r2, [pc, #204]	@ (8002014 <xTaskResumeAll+0x1dc>)
 8001f48:	441a      	add	r2, r3
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f52:	4930      	ldr	r1, [pc, #192]	@ (8002014 <xTaskResumeAll+0x1dc>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f64:	1c59      	adds	r1, r3, #1
 8001f66:	482b      	ldr	r0, [pc, #172]	@ (8002014 <xTaskResumeAll+0x1dc>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4403      	add	r3, r0
 8001f72:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f78:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <xTaskResumeAll+0x1e0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d904      	bls.n	8001f8c <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001f82:	4a26      	ldr	r2, [pc, #152]	@ (800201c <xTaskResumeAll+0x1e4>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2101      	movs	r1, #1
 8001f88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <xTaskResumeAll+0x1d4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f af6c 	bne.w	8001e6e <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001f9c:	f000 fb74 	bl	8002688 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <xTaskResumeAll+0x1e8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d012      	beq.n	8001fd2 <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001fac:	f000 f83c 	bl	8002028 <xTaskIncrementTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001fb6:	4a19      	ldr	r2, [pc, #100]	@ (800201c <xTaskResumeAll+0x1e4>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2101      	movs	r1, #1
 8001fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ef      	bne.n	8001fac <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <xTaskResumeAll+0x1e8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001fd2:	4a12      	ldr	r2, [pc, #72]	@ (800201c <xTaskResumeAll+0x1e4>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <xTaskResumeAll+0x1e0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <xTaskResumeAll+0x1ec>)
 8001fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001ff6:	f7ff f901 	bl	80011fc <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20002a98 	.word	0x20002a98
 8002008:	20002a70 	.word	0x20002a70
 800200c:	20002a30 	.word	0x20002a30
 8002010:	20002a78 	.word	0x20002a78
 8002014:	20002988 	.word	0x20002988
 8002018:	20002984 	.word	0x20002984
 800201c:	20002a84 	.word	0x20002a84
 8002020:	20002a80 	.word	0x20002a80
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002032:	4b76      	ldr	r3, [pc, #472]	@ (800220c <xTaskIncrementTick+0x1e4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 80de 	bne.w	80021f8 <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800203c:	4b74      	ldr	r3, [pc, #464]	@ (8002210 <xTaskIncrementTick+0x1e8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002044:	4a72      	ldr	r2, [pc, #456]	@ (8002210 <xTaskIncrementTick+0x1e8>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d110      	bne.n	8002072 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002050:	4b70      	ldr	r3, [pc, #448]	@ (8002214 <xTaskIncrementTick+0x1ec>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	4b70      	ldr	r3, [pc, #448]	@ (8002218 <xTaskIncrementTick+0x1f0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	@ (8002214 <xTaskIncrementTick+0x1ec>)
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4a6e      	ldr	r2, [pc, #440]	@ (8002218 <xTaskIncrementTick+0x1f0>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b6d      	ldr	r3, [pc, #436]	@ (800221c <xTaskIncrementTick+0x1f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a6c      	ldr	r2, [pc, #432]	@ (800221c <xTaskIncrementTick+0x1f4>)
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	f000 fb0b 	bl	8002688 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002072:	4b6b      	ldr	r3, [pc, #428]	@ (8002220 <xTaskIncrementTick+0x1f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	429a      	cmp	r2, r3
 800207a:	f0c0 80a8 	bcc.w	80021ce <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800207e:	4b65      	ldr	r3, [pc, #404]	@ (8002214 <xTaskIncrementTick+0x1ec>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d104      	bne.n	8002092 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002088:	4b65      	ldr	r3, [pc, #404]	@ (8002220 <xTaskIncrementTick+0x1f8>)
 800208a:	f04f 32ff 	mov.w	r2, #4294967295
 800208e:	601a      	str	r2, [r3, #0]
                    break;
 8002090:	e09d      	b.n	80021ce <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002092:	4b60      	ldr	r3, [pc, #384]	@ (8002214 <xTaskIncrementTick+0x1ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d203      	bcs.n	80020b2 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002220 <xTaskIncrementTick+0x1f8>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6013      	str	r3, [r2, #0]
                        break;
 80020b0:	e08d      	b.n	80021ce <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68d2      	ldr	r2, [r2, #12]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	6892      	ldr	r2, [r2, #8]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	3304      	adds	r3, #4
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d103      	bne.n	80020e0 <xTaskIncrementTick+0xb8>
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01e      	beq.n	8002136 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	6a12      	ldr	r2, [r2, #32]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	69d2      	ldr	r2, [r2, #28]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3318      	adds	r3, #24
 800211a:	429a      	cmp	r2, r3
 800211c:	d103      	bne.n	8002126 <xTaskIncrementTick+0xfe>
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2200      	movs	r2, #0
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	4b39      	ldr	r3, [pc, #228]	@ (8002224 <xTaskIncrementTick+0x1fc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	4a37      	ldr	r2, [pc, #220]	@ (8002224 <xTaskIncrementTick+0x1fc>)
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214c:	4936      	ldr	r1, [pc, #216]	@ (8002228 <xTaskIncrementTick+0x200>)
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3304      	adds	r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	3204      	adds	r2, #4
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1d1a      	adds	r2, r3, #4
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4a27      	ldr	r2, [pc, #156]	@ (8002228 <xTaskIncrementTick+0x200>)
 800218c:	441a      	add	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002196:	4924      	ldr	r1, [pc, #144]	@ (8002228 <xTaskIncrementTick+0x200>)
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	481f      	ldr	r0, [pc, #124]	@ (8002228 <xTaskIncrementTick+0x200>)
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4403      	add	r3, r0
 80021b6:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <xTaskIncrementTick+0x204>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c2:	429a      	cmp	r2, r3
 80021c4:	f67f af5b 	bls.w	800207e <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021cc:	e757      	b.n	800207e <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <xTaskIncrementTick+0x204>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d4:	4914      	ldr	r1, [pc, #80]	@ (8002228 <xTaskIncrementTick+0x200>)
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d901      	bls.n	80021ea <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <xTaskIncrementTick+0x208>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e004      	b.n	8002202 <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80021f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <xTaskIncrementTick+0x20c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <xTaskIncrementTick+0x20c>)
 8002200:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002202:	69fb      	ldr	r3, [r7, #28]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20002a98 	.word	0x20002a98
 8002210:	20002a74 	.word	0x20002a74
 8002214:	20002a28 	.word	0x20002a28
 8002218:	20002a2c 	.word	0x20002a2c
 800221c:	20002a88 	.word	0x20002a88
 8002220:	20002a90 	.word	0x20002a90
 8002224:	20002a78 	.word	0x20002a78
 8002228:	20002988 	.word	0x20002988
 800222c:	20002984 	.word	0x20002984
 8002230:	20002a84 	.word	0x20002a84
 8002234:	20002a80 	.word	0x20002a80

08002238 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <vTaskSwitchContext+0x78>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002246:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <vTaskSwitchContext+0x7c>)
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800224c:	e02b      	b.n	80022a6 <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <vTaskSwitchContext+0x7c>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002254:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <vTaskSwitchContext+0x80>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f1c3 031f 	rsb	r3, r3, #31
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <vTaskSwitchContext+0x84>)
 8002276:	4413      	add	r3, r2
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3308      	adds	r3, #8
 800228c:	429a      	cmp	r2, r3
 800228e:	d103      	bne.n	8002298 <vTaskSwitchContext+0x60>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4a08      	ldr	r2, [pc, #32]	@ (80022c0 <vTaskSwitchContext+0x88>)
 80022a0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <vTaskSwitchContext+0x88>)
 80022a4:	681b      	ldr	r3, [r3, #0]
    }
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20002a98 	.word	0x20002a98
 80022b4:	20002a84 	.word	0x20002a84
 80022b8:	20002a78 	.word	0x20002a78
 80022bc:	20002988 	.word	0x20002988
 80022c0:	20002984 	.word	0x20002984

080022c4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <vTaskPlaceOnEventList+0x28>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3318      	adds	r3, #24
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe f9f7 	bl	80006ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80022dc:	2101      	movs	r1, #1
 80022de:	6838      	ldr	r0, [r7, #0]
 80022e0:	f000 fa70 	bl	80027c4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20002984 	.word	0x20002984

080022f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	6a12      	ldr	r2, [r2, #32]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	69d2      	ldr	r2, [r2, #28]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3318      	adds	r3, #24
 8002322:	429a      	cmp	r2, r3
 8002324:	d103      	bne.n	800232e <xTaskRemoveFromEventList+0x3e>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2200      	movs	r2, #0
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800233e:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <xTaskRemoveFromEventList+0x17c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d160      	bne.n	8002408 <xTaskRemoveFromEventList+0x118>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	68d2      	ldr	r2, [r2, #12]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	3304      	adds	r3, #4
 8002368:	429a      	cmp	r2, r3
 800236a:	d103      	bne.n	8002374 <xTaskRemoveFromEventList+0x84>
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2200      	movs	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1e5a      	subs	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	2201      	movs	r2, #1
 800238a:	409a      	lsls	r2, r3
 800238c:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <xTaskRemoveFromEventList+0x180>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	4a37      	ldr	r2, [pc, #220]	@ (8002470 <xTaskRemoveFromEventList+0x180>)
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800239a:	4936      	ldr	r1, [pc, #216]	@ (8002474 <xTaskRemoveFromEventList+0x184>)
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3304      	adds	r3, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	3204      	adds	r2, #4
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4a26      	ldr	r2, [pc, #152]	@ (8002474 <xTaskRemoveFromEventList+0x184>)
 80023da:	441a      	add	r2, r3
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e4:	4923      	ldr	r1, [pc, #140]	@ (8002474 <xTaskRemoveFromEventList+0x184>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023f6:	1c59      	adds	r1, r3, #1
 80023f8:	481e      	ldr	r0, [pc, #120]	@ (8002474 <xTaskRemoveFromEventList+0x184>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4403      	add	r3, r0
 8002404:	6019      	str	r1, [r3, #0]
 8002406:	e01b      	b.n	8002440 <xTaskRemoveFromEventList+0x150>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <xTaskRemoveFromEventList+0x188>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	61da      	str	r2, [r3, #28]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	621a      	str	r2, [r3, #32]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	3218      	adds	r2, #24
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f103 0218 	add.w	r2, r3, #24
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4a11      	ldr	r2, [pc, #68]	@ (8002478 <xTaskRemoveFromEventList+0x188>)
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <xTaskRemoveFromEventList+0x188>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <xTaskRemoveFromEventList+0x188>)
 800243e:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002444:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <xTaskRemoveFromEventList+0x18c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	429a      	cmp	r2, r3
 800244c:	d905      	bls.n	800245a <xTaskRemoveFromEventList+0x16a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800244e:	2301      	movs	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002452:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <xTaskRemoveFromEventList+0x190>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e001      	b.n	800245e <xTaskRemoveFromEventList+0x16e>
        }
        else
        {
            xReturn = pdFALSE;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800245e:	69fb      	ldr	r3, [r7, #28]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3724      	adds	r7, #36	@ 0x24
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20002a98 	.word	0x20002a98
 8002470:	20002a78 	.word	0x20002a78
 8002474:	20002988 	.word	0x20002988
 8002478:	20002a30 	.word	0x20002a30
 800247c:	20002984 	.word	0x20002984
 8002480:	20002a84 	.word	0x20002a84

08002484 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <vTaskInternalSetTimeOutState+0x24>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <vTaskInternalSetTimeOutState+0x28>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20002a88 	.word	0x20002a88
 80024ac:	20002a74 	.word	0x20002a74

080024b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80024ba:	f7fe fe85 	bl	80011c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80024be:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <xTaskCheckForTimeOut+0x8c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d102      	bne.n	80024de <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e026      	b.n	800252c <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <xTaskCheckForTimeOut+0x90>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d00a      	beq.n	8002500 <xTaskCheckForTimeOut+0x50>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d305      	bcc.n	8002500 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e015      	b.n	800252c <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20b      	bcs.n	8002522 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad2      	subs	r2, r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffb4 	bl	8002484 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e004      	b.n	800252c <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002528:	2301      	movs	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800252c:	f7fe fe66 	bl	80011fc <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002530:	697b      	ldr	r3, [r7, #20]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20002a74 	.word	0x20002a74
 8002540:	20002a88 	.word	0x20002a88

08002544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <vTaskMissedYield+0x14>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20002a84 	.word	0x20002a84

0800255c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002564:	f000 f852 	bl	800260c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <prvIdleTask+0x28>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d9f9      	bls.n	8002564 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <prvIdleTask+0x2c>)
 8002572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002580:	e7f0      	b.n	8002564 <prvIdleTask+0x8>
 8002582:	bf00      	nop
 8002584:	20002988 	.word	0x20002988
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	e00c      	b.n	80025b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <prvInitialiseTaskLists+0x60>)
 80025a4:	4413      	add	r3, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe f864 	bl	8000674 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3301      	adds	r3, #1
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d9ef      	bls.n	8002598 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80025b8:	480d      	ldr	r0, [pc, #52]	@ (80025f0 <prvInitialiseTaskLists+0x64>)
 80025ba:	f7fe f85b 	bl	8000674 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <prvInitialiseTaskLists+0x68>)
 80025c0:	f7fe f858 	bl	8000674 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80025c4:	480c      	ldr	r0, [pc, #48]	@ (80025f8 <prvInitialiseTaskLists+0x6c>)
 80025c6:	f7fe f855 	bl	8000674 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80025ca:	480c      	ldr	r0, [pc, #48]	@ (80025fc <prvInitialiseTaskLists+0x70>)
 80025cc:	f7fe f852 	bl	8000674 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80025d0:	480b      	ldr	r0, [pc, #44]	@ (8002600 <prvInitialiseTaskLists+0x74>)
 80025d2:	f7fe f84f 	bl	8000674 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <prvInitialiseTaskLists+0x78>)
 80025d8:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <prvInitialiseTaskLists+0x64>)
 80025da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <prvInitialiseTaskLists+0x7c>)
 80025de:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <prvInitialiseTaskLists+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20002988 	.word	0x20002988
 80025f0:	20002a00 	.word	0x20002a00
 80025f4:	20002a14 	.word	0x20002a14
 80025f8:	20002a30 	.word	0x20002a30
 80025fc:	20002a44 	.word	0x20002a44
 8002600:	20002a5c 	.word	0x20002a5c
 8002604:	20002a28 	.word	0x20002a28
 8002608:	20002a2c 	.word	0x20002a2c

0800260c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002612:	e019      	b.n	8002648 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002614:	f7fe fdd8 	bl	80011c8 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002618:	4b10      	ldr	r3, [pc, #64]	@ (800265c <prvCheckTasksWaitingTermination+0x50>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe f888 	bl	800073a <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800262a:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <prvCheckTasksWaitingTermination+0x54>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	4a0b      	ldr	r2, [pc, #44]	@ (8002660 <prvCheckTasksWaitingTermination+0x54>)
 8002632:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <prvCheckTasksWaitingTermination+0x58>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3b01      	subs	r3, #1
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <prvCheckTasksWaitingTermination+0x58>)
 800263c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800263e:	f7fe fddd 	bl	80011fc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f810 	bl	8002668 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <prvCheckTasksWaitingTermination+0x58>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e1      	bne.n	8002614 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20002a44 	.word	0x20002a44
 8002660:	20002a70 	.word	0x20002a70
 8002664:	20002a58 	.word	0x20002a58

08002668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff89 	bl	800058c <vPortFree>
            vPortFree( pxTCB );
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fd ff86 	bl	800058c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <prvResetNextTaskUnblockTime+0x2c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <prvResetNextTaskUnblockTime+0x30>)
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800269e:	e005      	b.n	80026ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <prvResetNextTaskUnblockTime+0x2c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a03      	ldr	r2, [pc, #12]	@ (80026b8 <prvResetNextTaskUnblockTime+0x30>)
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	20002a28 	.word	0x20002a28
 80026b8:	20002a90 	.word	0x20002a90

080026bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d06e      	beq.n	80027b0 <xTaskPriorityDisinherit+0xf4>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d063      	beq.n	80027b0 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d15f      	bne.n	80027b0 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe f820 	bl	800073a <uxListRemove>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <xTaskPriorityDisinherit+0x100>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4013      	ands	r3, r2
 8002712:	4a2a      	ldr	r2, [pc, #168]	@ (80027bc <xTaskPriorityDisinherit+0x100>)
 8002714:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	f1c3 0206 	rsb	r2, r3, #6
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	2201      	movs	r2, #1
 8002730:	409a      	lsls	r2, r3
 8002732:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <xTaskPriorityDisinherit+0x100>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	4a20      	ldr	r2, [pc, #128]	@ (80027bc <xTaskPriorityDisinherit+0x100>)
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002740:	491f      	ldr	r1, [pc, #124]	@ (80027c0 <xTaskPriorityDisinherit+0x104>)
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3304      	adds	r3, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	3204      	adds	r2, #4
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1d1a      	adds	r2, r3, #4
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4a10      	ldr	r2, [pc, #64]	@ (80027c0 <xTaskPriorityDisinherit+0x104>)
 8002780:	441a      	add	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	615a      	str	r2, [r3, #20]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800278a:	490d      	ldr	r1, [pc, #52]	@ (80027c0 <xTaskPriorityDisinherit+0x104>)
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800279c:	1c59      	adds	r1, r3, #1
 800279e:	4808      	ldr	r0, [pc, #32]	@ (80027c0 <xTaskPriorityDisinherit+0x104>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4403      	add	r3, r0
 80027aa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 80027b0:	697b      	ldr	r3, [r7, #20]
    }
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20002a78 	.word	0x20002a78
 80027c0:	20002988 	.word	0x20002988

080027c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80027d4:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80027da:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027e0:	4b35      	ldr	r3, [pc, #212]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd ffa7 	bl	800073a <uxListRemove>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10b      	bne.n	800280a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80027f2:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	2201      	movs	r2, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	4b2e      	ldr	r3, [pc, #184]	@ (80028bc <prvAddCurrentTaskToDelayedList+0xf8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4013      	ands	r3, r2
 8002806:	4a2d      	ldr	r2, [pc, #180]	@ (80028bc <prvAddCurrentTaskToDelayedList+0xf8>)
 8002808:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d124      	bne.n	800285c <prvAddCurrentTaskToDelayedList+0x98>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d021      	beq.n	800285c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002818:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b26      	ldr	r3, [pc, #152]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	6892      	ldr	r2, [r2, #8]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	3204      	adds	r2, #4
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1d1a      	adds	r2, r3, #4
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800284c:	615a      	str	r2, [r3, #20]
 800284e:	4b1c      	ldr	r3, [pc, #112]	@ (80028c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	4a1a      	ldr	r2, [pc, #104]	@ (80028c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800285a:	e022      	b.n	80028a2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002864:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3304      	adds	r3, #4
 800287a:	4619      	mov	r1, r3
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7fd ff24 	bl	80006ca <vListInsert>
}
 8002882:	e00e      	b.n	80028a2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3304      	adds	r3, #4
 800288a:	4619      	mov	r1, r3
 800288c:	69b8      	ldr	r0, [r7, #24]
 800288e:	f7fd ff1c 	bl	80006ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002892:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d202      	bcs.n	80028a2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 800289c:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <prvAddCurrentTaskToDelayedList+0x100>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6013      	str	r3, [r2, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20002a74 	.word	0x20002a74
 80028b0:	20002a28 	.word	0x20002a28
 80028b4:	20002a2c 	.word	0x20002a2c
 80028b8:	20002984 	.word	0x20002984
 80028bc:	20002a78 	.word	0x20002a78
 80028c0:	20002a5c 	.word	0x20002a5c
 80028c4:	20002a90 	.word	0x20002a90

080028c8 <_ZN6Timer3C1Ejj>:

#include "timer3.h"
uint8_t Timer3::Counttim;
unsigned int Timer3::PERIOD=0;

Timer3::Timer3(unsigned int  Period,unsigned int  duty)  :		Duty{duty}
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	601a      	str	r2, [r3, #0]
	{
		PERIOD=Period;
 80028da:	4a0c      	ldr	r2, [pc, #48]	@ (800290c <_ZN6Timer3C1Ejj+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6013      	str	r3, [r2, #0]

	if(Counttim==0)
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <_ZN6Timer3C1Ejj+0x48>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <_ZN6Timer3C1Ejj+0x2c>
	{
		Tim3_Init(PERIOD);
 80028e8:	4b08      	ldr	r3, [pc, #32]	@ (800290c <_ZN6Timer3C1Ejj+0x44>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f810 	bl	8002914 <_ZN6Timer39Tim3_InitEj>
	}
	Counttim++;
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <_ZN6Timer3C1Ejj+0x48>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <_ZN6Timer3C1Ejj+0x48>)
 80028fe:	701a      	strb	r2, [r3, #0]
	}
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20002aa0 	.word	0x20002aa0
 8002910:	20002a9c 	.word	0x20002a9c

08002914 <_ZN6Timer39Tim3_InitEj>:

void Timer3::Tim3_Init(unsigned int PERIOD)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]

	///<Intiate Clock 72>
	Clock72 clk;
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fc1c 	bl	8000160 <_ZN7Clock72C1Ev>
	///<Enable Timer 3 RCC>
	RCC->APB1ENR |= (1<<1);
 8002928:	4b14      	ldr	r3, [pc, #80]	@ (800297c <_ZN6Timer39Tim3_InitEj+0x68>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a13      	ldr	r2, [pc, #76]	@ (800297c <_ZN6Timer39Tim3_InitEj+0x68>)
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	61d3      	str	r3, [r2, #28]
	///<Reset Control Register just in case>
	TIM3->CR1=0x0000;
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
	///<Set Pre-scaler>
	TIM3->PSC=71; // 72 / 71 +1 = 1MHZ timer clock speed.
 800293a:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 800293c:	2247      	movs	r2, #71	@ 0x47
 800293e:	629a      	str	r2, [r3, #40]	@ 0x28
	///<Set Period>
	TIM3->ARR =PERIOD;
 8002940:	4a0f      	ldr	r2, [pc, #60]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	62d3      	str	r3, [r2, #44]	@ 0x2c
	///<Select PWM>
	 //<Preload Enable & PWM Mode 1 for CH1>
	 TIM3->CCMR1|= (8<<0) |(6<<4);
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 800294c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8002950:	6193      	str	r3, [r2, #24]
     //<Preload Enable & PWM Mode 1 for CH3>
	 TIM3->CCMR2 |=(8<<0) |(6<<4);
 8002952:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8002958:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800295c:	61d3      	str	r3, [r2, #28]
	///<Enable CH's and Polarity (Active-High)>
	 //<Enable CH1 & CH3>
	 TIM3->CCER =(1<<0)|(1<<8);
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8002960:	f240 1201 	movw	r2, #257	@ 0x101
 8002964:	621a      	str	r2, [r3, #32]
    ///<Enable Control Register>
	 TIM3->CR1|=(1<<0);
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <_ZN6Timer39Tim3_InitEj+0x6c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6013      	str	r3, [r2, #0]
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	40000400 	.word	0x40000400

08002984 <_ZN6Timer38pwmWriteEj>:
	TIM3->CCR1=PulseWidth;
	TIM3->CCR3=PulseWidth;
}

void Timer3::pwmWrite(unsigned int duty)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
	Duty=duty;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	601a      	str	r2, [r3, #0]
	///<Making sure duty stays between 0% & 100%>
	if(Duty < 0)
	{
		Duty =0;
	}
	else if (Duty > 100)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b64      	cmp	r3, #100	@ 0x64
 800299a:	d902      	bls.n	80029a2 <_ZN6Timer38pwmWriteEj+0x1e>
	{
		Duty=100;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2264      	movs	r2, #100	@ 0x64
 80029a0:	601a      	str	r2, [r3, #0]
	}
	unsigned int PulseWidth = PERIOD * Duty/100;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <_ZN6Timer38pwmWriteEj+0x4c>)
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	@ (80029d4 <_ZN6Timer38pwmWriteEj+0x50>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	60fb      	str	r3, [r7, #12]
	TIM3->CCR1=PulseWidth;
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <_ZN6Timer38pwmWriteEj+0x54>)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR3=PulseWidth;
 80029be:	4a06      	ldr	r2, [pc, #24]	@ (80029d8 <_ZN6Timer38pwmWriteEj+0x54>)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20002aa0 	.word	0x20002aa0
 80029d4:	51eb851f 	.word	0x51eb851f
 80029d8:	40000400 	.word	0x40000400

080029dc <_ZN6Timer39pwmWrite1Ej>:
void Timer3::pwmWrite1(unsigned int duty)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	Duty=duty;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	601a      	str	r2, [r3, #0]
	///<Making sure duty stays between 0% & 100%>
	if(Duty < 0)
	{
		Duty =0;
	}
	else if (Duty > 100)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b64      	cmp	r3, #100	@ 0x64
 80029f2:	d902      	bls.n	80029fa <_ZN6Timer39pwmWrite1Ej+0x1e>
	{
		Duty=100;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2264      	movs	r2, #100	@ 0x64
 80029f8:	601a      	str	r2, [r3, #0]
	}
	unsigned int PulseWidth = PERIOD * Duty/100;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a08      	ldr	r2, [pc, #32]	@ (8002a20 <_ZN6Timer39pwmWrite1Ej+0x44>)
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <_ZN6Timer39pwmWrite1Ej+0x48>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	60fb      	str	r3, [r7, #12]
	TIM3->CCR1=PulseWidth;
 8002a10:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <_ZN6Timer39pwmWrite1Ej+0x4c>)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20002aa0 	.word	0x20002aa0
 8002a24:	51eb851f 	.word	0x51eb851f
 8002a28:	40000400 	.word	0x40000400

08002a2c <_ZN6Timer39pwmWrite3Ej>:
void Timer3::pwmWrite3(unsigned int duty)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
	Duty=duty;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	601a      	str	r2, [r3, #0]
	///<Making sure duty stays between 0% & 100%>
	if(Duty < 0)
	{
		Duty =0;
	}
	else if (Duty > 100)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b64      	cmp	r3, #100	@ 0x64
 8002a42:	d902      	bls.n	8002a4a <_ZN6Timer39pwmWrite3Ej+0x1e>
	{
		Duty=100;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2264      	movs	r2, #100	@ 0x64
 8002a48:	601a      	str	r2, [r3, #0]
	}
	unsigned int PulseWidth = PERIOD * Duty/100;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a08      	ldr	r2, [pc, #32]	@ (8002a70 <_ZN6Timer39pwmWrite3Ej+0x44>)
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	4a07      	ldr	r2, [pc, #28]	@ (8002a74 <_ZN6Timer39pwmWrite3Ej+0x48>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	60fb      	str	r3, [r7, #12]
	TIM3->CCR3=PulseWidth;
 8002a60:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <_ZN6Timer39pwmWrite3Ej+0x4c>)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20002aa0 	.word	0x20002aa0
 8002a74:	51eb851f 	.word	0x51eb851f
 8002a78:	40000400 	.word	0x40000400

08002a7c <_ZN6Timer3D1Ev>:

Timer3::~Timer3()
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
{

}
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <_ZN4UARTC1Ei>:
 *      Author: AHMED ABDELAZIZ
 */

#include "uart.h"

	UART::UART(int data)
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
	{
		if(this == reinterpret_cast<UART*>(UART1INS))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <_ZN4UARTC1Ei+0x54>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d104      	bne.n	8002aac <_ZN4UARTC1Ei+0x1c>
		{
			INIT(1);
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f825 	bl	8002af4 <_ZN4UART4INITEi>
 8002aaa:	e015      	b.n	8002ad8 <_ZN4UARTC1Ei+0x48>
		}
		else if (this == reinterpret_cast<UART*>(UART2INS))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <_ZN4UARTC1Ei+0x58>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d104      	bne.n	8002abe <_ZN4UARTC1Ei+0x2e>
		{
			INIT(2);
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f81c 	bl	8002af4 <_ZN4UART4INITEi>
 8002abc:	e00c      	b.n	8002ad8 <_ZN4UARTC1Ei+0x48>
		}
		else if(this == reinterpret_cast<UART*>(UART3INS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <_ZN4UARTC1Ei+0x5c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d104      	bne.n	8002ad0 <_ZN4UARTC1Ei+0x40>
		{
			INIT(3);
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f813 	bl	8002af4 <_ZN4UART4INITEi>
 8002ace:	e003      	b.n	8002ad8 <_ZN4UARTC1Ei+0x48>
		}
		else
		{
			Send(msg);
 8002ad0:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <_ZN4UARTC1Ei+0x60>)
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8b6 	bl	8002c44 <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		}
	}
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40004400 	.word	0x40004400
 8002aec:	40004800 	.word	0x40004800
 8002af0:	20002aa4 	.word	0x20002aa4

08002af4 <_ZN4UART4INITEi>:
	void UART::INIT(int UART_NUMBER)
	{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
		switch(UART_NUMBER)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d047      	beq.n	8002b94 <_ZN4UART4INITEi+0xa0>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	dc60      	bgt.n	8002bcc <_ZN4UART4INITEi+0xd8>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d003      	beq.n	8002b18 <_ZN4UART4INITEi+0x24>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d022      	beq.n	8002b5c <_ZN4UART4INITEi+0x68>
			//Enable Transmission and Receiving
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
			CR1|=(1<<13); // USART Enable
			break;
	}
	}
 8002b16:	e059      	b.n	8002bcc <_ZN4UART4INITEi+0xd8>
			RCC->APB2ENR |= (1<<0) | (1<<2) | (1<<14);
 8002b18:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b22:	f043 0305 	orr.w	r3, r3, #5
 8002b26:	6193      	str	r3, [r2, #24]
			GPIOA->CRH |= (0x000B<<4); // PA9 OutPut AFIO TX
 8002b28:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <_ZN4UART4INITEi+0xe8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <_ZN4UART4INITEi+0xe8>)
 8002b2e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002b32:	6053      	str	r3, [r2, #4]
			GPIOA->CRH |= (1<<10); //PA10 InPut Floating RX
 8002b34:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <_ZN4UART4INITEi+0xe8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a28      	ldr	r2, [pc, #160]	@ (8002bdc <_ZN4UART4INITEi+0xe8>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3e:	6053      	str	r3, [r2, #4]
			BRR = USART_div;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8002b46:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60da      	str	r2, [r3, #12]
			break;
 8002b5a:	e037      	b.n	8002bcc <_ZN4UART4INITEi+0xd8>
			RCC->APB1ENR =(1<<17); // USART2
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002b5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b62:	61da      	str	r2, [r3, #28]
			RCC->APB2ENR |= (1<<0) | (1<<2); //  AFIO and PortA
 8002b64:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002b6a:	f043 0305 	orr.w	r3, r3, #5
 8002b6e:	6193      	str	r3, [r2, #24]
			GPIOA->CRL =(0x004B<<8);
 8002b70:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <_ZN4UART4INITEi+0xe8>)
 8002b72:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002b76:	601a      	str	r2, [r3, #0]
			BRR=USART_div;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8002b7e:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	220c      	movs	r2, #12
 8002b84:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60da      	str	r2, [r3, #12]
			break;
 8002b92:	e01b      	b.n	8002bcc <_ZN4UART4INITEi+0xd8>
			RCC->APB1ENR =(1<<18); // USART3
 8002b94:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002b96:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002b9a:	61da      	str	r2, [r3, #28]
			RCC->APB2ENR |=(1<<0) | (1<<3); //AFIO & Port B
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd8 <_ZN4UART4INITEi+0xe4>)
 8002ba2:	f043 0309 	orr.w	r3, r3, #9
 8002ba6:	6193      	str	r3, [r2, #24]
			GPIOB->CRH =(0x004B<<8); //
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <_ZN4UART4INITEi+0xec>)
 8002baa:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002bae:	605a      	str	r2, [r3, #4]
			BRR=USART_div;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8002bb6:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	220c      	movs	r2, #12
 8002bbc:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]
			break;
 8002bca:	bf00      	nop
	}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010800 	.word	0x40010800
 8002be0:	40010c00 	.word	0x40010c00

08002be4 <_ZN4UART4ReadEv>:
	char UART::Read()
	{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
		while(!(SR&(1<<5))); //Bit 5 RXNE: Read data register not empty
 8002bec:	bf00      	nop
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f9      	beq.n	8002bee <_ZN4UART4ReadEv+0xa>
		unsigned char mread=USART1->DR &0x00ff;
 8002bfa:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <_ZN4UART4ReadEv+0x28>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
		return mread; //DR &0x00FF;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
	}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40013800 	.word	0x40013800

08002c10 <_ZN4UART4SendEc>:
	void UART::Send (char data)
	{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
		unsigned char mread=USART1->DR=data &0x00FF;
 8002c1c:	4a08      	ldr	r2, [pc, #32]	@ (8002c40 <_ZN4UART4SendEc+0x30>)
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	6053      	str	r3, [r2, #4]
 8002c22:	73fb      	strb	r3, [r7, #15]
		while(!(SR&(1<<7)));
 8002c24:	bf00      	nop
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f9      	beq.n	8002c26 <_ZN4UART4SendEc+0x16>
	}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40013800 	.word	0x40013800

08002c44 <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	void UART::Send(const std::string& data) // (std::string data) Succeed
	// (std::string_view data) // (char* data) Failed ??!
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
		auto i{0};
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
		while(i!='\0')
 8002c52:	e00a      	b.n	8002c6a <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
		{
			Send(data[i]);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4619      	mov	r1, r3
 8002c58:	6838      	ldr	r0, [r7, #0]
 8002c5a:	f000 f8cf 	bl	8002dfc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ffd3 	bl	8002c10 <_ZN4UART4SendEc>
		while(i!='\0')
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f1      	bne.n	8002c54 <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
		}
	}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <_ZN4UARTnwEj13UART_Instance>:
	void* UART::operator new(size_t, UART_Instance uart)
	{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
		return reinterpret_cast<void*>(uart); // return uart-instance as a pointer not as an Address.
 8002c84:	683b      	ldr	r3, [r7, #0]
	}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <_Z41__static_initialization_and_destruction_0ii>:
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d115      	bne.n	8002ccc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d110      	bne.n	8002ccc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f855 	bl	8002d5e <_ZNSaIcEC1Ev>
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	461a      	mov	r2, r3
 8002cba:	490c      	ldr	r1, [pc, #48]	@ (8002cec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002cbc:	480c      	ldr	r0, [pc, #48]	@ (8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002cbe:	f000 f8bb 	bl	8002e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002cc2:	f107 030c 	add.w	r3, r7, #12
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f84a 	bl	8002d60 <_ZNSaIcED1Ev>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d102      	bne.n	8002ce2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8002cdc:	4804      	ldr	r0, [pc, #16]	@ (8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002cde:	f000 f887 	bl	8002df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	0800325c 	.word	0x0800325c
 8002cf0:	20002aa4 	.word	0x20002aa4

08002cf4 <_GLOBAL__sub_I__ZN4UARTC2Ei>:
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7ff ffc7 	bl	8002c90 <_Z41__static_initialization_and_destruction_0ii>
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_GLOBAL__sub_D__ZN4UARTC2Ei>:
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7ff ffbf 	bl	8002c90 <_Z41__static_initialization_and_destruction_0ii>
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d14:	f7fe fe76 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d18:	480b      	ldr	r0, [pc, #44]	@ (8002d48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d1a:	490c      	ldr	r1, [pc, #48]	@ (8002d4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d20:	e002      	b.n	8002d28 <LoopCopyDataInit>

08002d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d26:	3304      	adds	r3, #4

08002d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d2c:	d3f9      	bcc.n	8002d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2e:	4a09      	ldr	r2, [pc, #36]	@ (8002d54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d30:	4c09      	ldr	r4, [pc, #36]	@ (8002d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d34:	e001      	b.n	8002d3a <LoopFillZerobss>

08002d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d38:	3204      	adds	r2, #4

08002d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d3c:	d3fb      	bcc.n	8002d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d3e:	f000 f9df 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7fd fde1 	bl	8000908 <main>
  bx lr
 8002d46:	4770      	bx	lr
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002d50:	080032f4 	.word	0x080032f4
  ldr r2, =_sbss
 8002d54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002d58:	20002c08 	.word	0x20002c08

08002d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_2_IRQHandler>

08002d5e <_ZNSaIcEC1Ev>:
 8002d5e:	4770      	bx	lr

08002d60 <_ZNSaIcED1Ev>:
 8002d60:	4770      	bx	lr

08002d62 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8002d62:	b10a      	cbz	r2, 8002d68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8002d64:	f000 b9f2 	b.w	800314c <memcpy>
 8002d68:	4770      	bx	lr

08002d6a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8002d6a:	f850 3b08 	ldr.w	r3, [r0], #8
 8002d6e:	1a1b      	subs	r3, r3, r0
 8002d70:	4258      	negs	r0, r3
 8002d72:	4158      	adcs	r0, r3
 8002d74:	4770      	bx	lr
	...

08002d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002d78:	b508      	push	{r3, lr}
 8002d7a:	680b      	ldr	r3, [r1, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d80:	d302      	bcc.n	8002d88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8002d82:	480d      	ldr	r0, [pc, #52]	@ (8002db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8002d84:	f000 f889 	bl	8002e9a <_ZSt20__throw_length_errorPKc>
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d90b      	bls.n	8002da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002d8c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002d90:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8002d94:	d206      	bcs.n	8002da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002d96:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002d9a:	bf2a      	itet	cs
 8002d9c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8002da0:	6008      	strcc	r0, [r1, #0]
 8002da2:	600b      	strcs	r3, [r1, #0]
 8002da4:	6808      	ldr	r0, [r1, #0]
 8002da6:	3001      	adds	r0, #1
 8002da8:	d501      	bpl.n	8002dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8002daa:	f000 f870 	bl	8002e8e <_ZSt17__throw_bad_allocv>
 8002dae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002db2:	f000 b85b 	b.w	8002e6c <_Znwj>
 8002db6:	bf00      	nop
 8002db8:	08003288 	.word	0x08003288

08002dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	f7ff ffd3 	bl	8002d6a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8002dc4:	b920      	cbnz	r0, 8002dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dcc:	f000 b84c 	b.w	8002e68 <_ZdlPv>
 8002dd0:	bd10      	pop	{r4, pc}

08002dd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002dd2:	2a01      	cmp	r2, #1
 8002dd4:	b410      	push	{r4}
 8002dd6:	d103      	bne.n	8002de0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 8002dd8:	780a      	ldrb	r2, [r1, #0]
 8002dda:	bc10      	pop	{r4}
 8002ddc:	7002      	strb	r2, [r0, #0]
 8002dde:	4770      	bx	lr
 8002de0:	bc10      	pop	{r4}
 8002de2:	f7ff bfbe 	b.w	8002d62 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08002de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002de6:	b508      	push	{r3, lr}
 8002de8:	1a52      	subs	r2, r2, r1
 8002dea:	f7ff fff2 	bl	8002dd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002dee:	bd08      	pop	{r3, pc}

08002df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	4604      	mov	r4, r0
 8002df4:	f7ff ffe2 	bl	8002dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002df8:	4620      	mov	r0, r4
 8002dfa:	bd10      	pop	{r4, pc}

08002dfc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8002dfc:	6800      	ldr	r0, [r0, #0]
 8002dfe:	4408      	add	r0, r1
 8002e00:	4770      	bx	lr

08002e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8002e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e04:	1a53      	subs	r3, r2, r1
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	4604      	mov	r4, r0
 8002e0a:	460d      	mov	r5, r1
 8002e0c:	4616      	mov	r6, r2
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	d906      	bls.n	8002e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8002e12:	2200      	movs	r2, #0
 8002e14:	a901      	add	r1, sp, #4
 8002e16:	f7ff ffaf 	bl	8002d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002e1a:	9b01      	ldr	r3, [sp, #4]
 8002e1c:	6020      	str	r0, [r4, #0]
 8002e1e:	60a3      	str	r3, [r4, #8]
 8002e20:	4632      	mov	r2, r6
 8002e22:	4629      	mov	r1, r5
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	f7ff ffde 	bl	8002de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	9b01      	ldr	r3, [sp, #4]
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	54d1      	strb	r1, [r2, r3]
 8002e34:	b002      	add	sp, #8
 8002e36:	bd70      	pop	{r4, r5, r6, pc}

08002e38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002e38:	b538      	push	{r3, r4, r5, lr}
 8002e3a:	f100 0308 	add.w	r3, r0, #8
 8002e3e:	4604      	mov	r4, r0
 8002e40:	460d      	mov	r5, r1
 8002e42:	6003      	str	r3, [r0, #0]
 8002e44:	b911      	cbnz	r1, 8002e4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8002e46:	4807      	ldr	r0, [pc, #28]	@ (8002e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8002e48:	f000 f824 	bl	8002e94 <_ZSt19__throw_logic_errorPKc>
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	f7fd f97f 	bl	8000150 <strlen>
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	182a      	adds	r2, r5, r0
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f7ff ffd1 	bl	8002e02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002e60:	4620      	mov	r0, r4
 8002e62:	bd38      	pop	{r3, r4, r5, pc}
 8002e64:	080032a0 	.word	0x080032a0

08002e68 <_ZdlPv>:
 8002e68:	f000 b832 	b.w	8002ed0 <free>

08002e6c <_Znwj>:
 8002e6c:	2801      	cmp	r0, #1
 8002e6e:	bf38      	it	cc
 8002e70:	2001      	movcc	r0, #1
 8002e72:	b510      	push	{r4, lr}
 8002e74:	4604      	mov	r4, r0
 8002e76:	4620      	mov	r0, r4
 8002e78:	f000 f822 	bl	8002ec0 <malloc>
 8002e7c:	b100      	cbz	r0, 8002e80 <_Znwj+0x14>
 8002e7e:	bd10      	pop	{r4, pc}
 8002e80:	f000 f80e 	bl	8002ea0 <_ZSt15get_new_handlerv>
 8002e84:	b908      	cbnz	r0, 8002e8a <_Znwj+0x1e>
 8002e86:	f000 f813 	bl	8002eb0 <abort>
 8002e8a:	4780      	blx	r0
 8002e8c:	e7f3      	b.n	8002e76 <_Znwj+0xa>

08002e8e <_ZSt17__throw_bad_allocv>:
 8002e8e:	b508      	push	{r3, lr}
 8002e90:	f000 f80e 	bl	8002eb0 <abort>

08002e94 <_ZSt19__throw_logic_errorPKc>:
 8002e94:	b508      	push	{r3, lr}
 8002e96:	f000 f80b 	bl	8002eb0 <abort>

08002e9a <_ZSt20__throw_length_errorPKc>:
 8002e9a:	b508      	push	{r3, lr}
 8002e9c:	f000 f808 	bl	8002eb0 <abort>

08002ea0 <_ZSt15get_new_handlerv>:
 8002ea0:	4b02      	ldr	r3, [pc, #8]	@ (8002eac <_ZSt15get_new_handlerv+0xc>)
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	f3bf 8f5b 	dmb	ish
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20002abc 	.word	0x20002abc

08002eb0 <abort>:
 8002eb0:	2006      	movs	r0, #6
 8002eb2:	b508      	push	{r3, lr}
 8002eb4:	f000 f8f2 	bl	800309c <raise>
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7fe fd62 	bl	8001982 <_exit>
	...

08002ec0 <malloc>:
 8002ec0:	4b02      	ldr	r3, [pc, #8]	@ (8002ecc <malloc+0xc>)
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	f000 b82d 	b.w	8002f24 <_malloc_r>
 8002eca:	bf00      	nop
 8002ecc:	20000018 	.word	0x20000018

08002ed0 <free>:
 8002ed0:	4b02      	ldr	r3, [pc, #8]	@ (8002edc <free+0xc>)
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	f000 b947 	b.w	8003168 <_free_r>
 8002eda:	bf00      	nop
 8002edc:	20000018 	.word	0x20000018

08002ee0 <sbrk_aligned>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4e0f      	ldr	r6, [pc, #60]	@ (8002f20 <sbrk_aligned+0x40>)
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	6831      	ldr	r1, [r6, #0]
 8002ee8:	4605      	mov	r5, r0
 8002eea:	b911      	cbnz	r1, 8002ef2 <sbrk_aligned+0x12>
 8002eec:	f000 f8f2 	bl	80030d4 <_sbrk_r>
 8002ef0:	6030      	str	r0, [r6, #0]
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	f000 f8ed 	bl	80030d4 <_sbrk_r>
 8002efa:	1c43      	adds	r3, r0, #1
 8002efc:	d103      	bne.n	8002f06 <sbrk_aligned+0x26>
 8002efe:	f04f 34ff 	mov.w	r4, #4294967295
 8002f02:	4620      	mov	r0, r4
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	1cc4      	adds	r4, r0, #3
 8002f08:	f024 0403 	bic.w	r4, r4, #3
 8002f0c:	42a0      	cmp	r0, r4
 8002f0e:	d0f8      	beq.n	8002f02 <sbrk_aligned+0x22>
 8002f10:	1a21      	subs	r1, r4, r0
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 f8de 	bl	80030d4 <_sbrk_r>
 8002f18:	3001      	adds	r0, #1
 8002f1a:	d1f2      	bne.n	8002f02 <sbrk_aligned+0x22>
 8002f1c:	e7ef      	b.n	8002efe <sbrk_aligned+0x1e>
 8002f1e:	bf00      	nop
 8002f20:	20002ac0 	.word	0x20002ac0

08002f24 <_malloc_r>:
 8002f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f28:	1ccd      	adds	r5, r1, #3
 8002f2a:	f025 0503 	bic.w	r5, r5, #3
 8002f2e:	3508      	adds	r5, #8
 8002f30:	2d0c      	cmp	r5, #12
 8002f32:	bf38      	it	cc
 8002f34:	250c      	movcc	r5, #12
 8002f36:	2d00      	cmp	r5, #0
 8002f38:	4606      	mov	r6, r0
 8002f3a:	db01      	blt.n	8002f40 <_malloc_r+0x1c>
 8002f3c:	42a9      	cmp	r1, r5
 8002f3e:	d904      	bls.n	8002f4a <_malloc_r+0x26>
 8002f40:	230c      	movs	r3, #12
 8002f42:	6033      	str	r3, [r6, #0]
 8002f44:	2000      	movs	r0, #0
 8002f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003020 <_malloc_r+0xfc>
 8002f4e:	f000 f869 	bl	8003024 <__malloc_lock>
 8002f52:	f8d8 3000 	ldr.w	r3, [r8]
 8002f56:	461c      	mov	r4, r3
 8002f58:	bb44      	cbnz	r4, 8002fac <_malloc_r+0x88>
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f7ff ffbf 	bl	8002ee0 <sbrk_aligned>
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	4604      	mov	r4, r0
 8002f66:	d158      	bne.n	800301a <_malloc_r+0xf6>
 8002f68:	f8d8 4000 	ldr.w	r4, [r8]
 8002f6c:	4627      	mov	r7, r4
 8002f6e:	2f00      	cmp	r7, #0
 8002f70:	d143      	bne.n	8002ffa <_malloc_r+0xd6>
 8002f72:	2c00      	cmp	r4, #0
 8002f74:	d04b      	beq.n	800300e <_malloc_r+0xea>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	4639      	mov	r1, r7
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	eb04 0903 	add.w	r9, r4, r3
 8002f80:	f000 f8a8 	bl	80030d4 <_sbrk_r>
 8002f84:	4581      	cmp	r9, r0
 8002f86:	d142      	bne.n	800300e <_malloc_r+0xea>
 8002f88:	6821      	ldr	r1, [r4, #0]
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	1a6d      	subs	r5, r5, r1
 8002f8e:	4629      	mov	r1, r5
 8002f90:	f7ff ffa6 	bl	8002ee0 <sbrk_aligned>
 8002f94:	3001      	adds	r0, #1
 8002f96:	d03a      	beq.n	800300e <_malloc_r+0xea>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	442b      	add	r3, r5
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	bb62      	cbnz	r2, 8003000 <_malloc_r+0xdc>
 8002fa6:	f8c8 7000 	str.w	r7, [r8]
 8002faa:	e00f      	b.n	8002fcc <_malloc_r+0xa8>
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	1b52      	subs	r2, r2, r5
 8002fb0:	d420      	bmi.n	8002ff4 <_malloc_r+0xd0>
 8002fb2:	2a0b      	cmp	r2, #11
 8002fb4:	d917      	bls.n	8002fe6 <_malloc_r+0xc2>
 8002fb6:	1961      	adds	r1, r4, r5
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	6025      	str	r5, [r4, #0]
 8002fbc:	bf18      	it	ne
 8002fbe:	6059      	strne	r1, [r3, #4]
 8002fc0:	6863      	ldr	r3, [r4, #4]
 8002fc2:	bf08      	it	eq
 8002fc4:	f8c8 1000 	streq.w	r1, [r8]
 8002fc8:	5162      	str	r2, [r4, r5]
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f000 f82f 	bl	8003030 <__malloc_unlock>
 8002fd2:	f104 000b 	add.w	r0, r4, #11
 8002fd6:	1d23      	adds	r3, r4, #4
 8002fd8:	f020 0007 	bic.w	r0, r0, #7
 8002fdc:	1ac2      	subs	r2, r0, r3
 8002fde:	bf1c      	itt	ne
 8002fe0:	1a1b      	subne	r3, r3, r0
 8002fe2:	50a3      	strne	r3, [r4, r2]
 8002fe4:	e7af      	b.n	8002f46 <_malloc_r+0x22>
 8002fe6:	6862      	ldr	r2, [r4, #4]
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	bf0c      	ite	eq
 8002fec:	f8c8 2000 	streq.w	r2, [r8]
 8002ff0:	605a      	strne	r2, [r3, #4]
 8002ff2:	e7eb      	b.n	8002fcc <_malloc_r+0xa8>
 8002ff4:	4623      	mov	r3, r4
 8002ff6:	6864      	ldr	r4, [r4, #4]
 8002ff8:	e7ae      	b.n	8002f58 <_malloc_r+0x34>
 8002ffa:	463c      	mov	r4, r7
 8002ffc:	687f      	ldr	r7, [r7, #4]
 8002ffe:	e7b6      	b.n	8002f6e <_malloc_r+0x4a>
 8003000:	461a      	mov	r2, r3
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	42a3      	cmp	r3, r4
 8003006:	d1fb      	bne.n	8003000 <_malloc_r+0xdc>
 8003008:	2300      	movs	r3, #0
 800300a:	6053      	str	r3, [r2, #4]
 800300c:	e7de      	b.n	8002fcc <_malloc_r+0xa8>
 800300e:	230c      	movs	r3, #12
 8003010:	4630      	mov	r0, r6
 8003012:	6033      	str	r3, [r6, #0]
 8003014:	f000 f80c 	bl	8003030 <__malloc_unlock>
 8003018:	e794      	b.n	8002f44 <_malloc_r+0x20>
 800301a:	6005      	str	r5, [r0, #0]
 800301c:	e7d6      	b.n	8002fcc <_malloc_r+0xa8>
 800301e:	bf00      	nop
 8003020:	20002ac4 	.word	0x20002ac4

08003024 <__malloc_lock>:
 8003024:	4801      	ldr	r0, [pc, #4]	@ (800302c <__malloc_lock+0x8>)
 8003026:	f000 b88f 	b.w	8003148 <__retarget_lock_acquire_recursive>
 800302a:	bf00      	nop
 800302c:	20002c04 	.word	0x20002c04

08003030 <__malloc_unlock>:
 8003030:	4801      	ldr	r0, [pc, #4]	@ (8003038 <__malloc_unlock+0x8>)
 8003032:	f000 b88a 	b.w	800314a <__retarget_lock_release_recursive>
 8003036:	bf00      	nop
 8003038:	20002c04 	.word	0x20002c04

0800303c <memset>:
 800303c:	4603      	mov	r3, r0
 800303e:	4402      	add	r2, r0
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	f803 1b01 	strb.w	r1, [r3], #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <_raise_r>:
 800304c:	291f      	cmp	r1, #31
 800304e:	b538      	push	{r3, r4, r5, lr}
 8003050:	4605      	mov	r5, r0
 8003052:	460c      	mov	r4, r1
 8003054:	d904      	bls.n	8003060 <_raise_r+0x14>
 8003056:	2316      	movs	r3, #22
 8003058:	6003      	str	r3, [r0, #0]
 800305a:	f04f 30ff 	mov.w	r0, #4294967295
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003062:	b112      	cbz	r2, 800306a <_raise_r+0x1e>
 8003064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003068:	b94b      	cbnz	r3, 800307e <_raise_r+0x32>
 800306a:	4628      	mov	r0, r5
 800306c:	f000 f830 	bl	80030d0 <_getpid_r>
 8003070:	4622      	mov	r2, r4
 8003072:	4601      	mov	r1, r0
 8003074:	4628      	mov	r0, r5
 8003076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307a:	f000 b817 	b.w	80030ac <_kill_r>
 800307e:	2b01      	cmp	r3, #1
 8003080:	d00a      	beq.n	8003098 <_raise_r+0x4c>
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	d103      	bne.n	800308e <_raise_r+0x42>
 8003086:	2316      	movs	r3, #22
 8003088:	6003      	str	r3, [r0, #0]
 800308a:	2001      	movs	r0, #1
 800308c:	e7e7      	b.n	800305e <_raise_r+0x12>
 800308e:	2100      	movs	r1, #0
 8003090:	4620      	mov	r0, r4
 8003092:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003096:	4798      	blx	r3
 8003098:	2000      	movs	r0, #0
 800309a:	e7e0      	b.n	800305e <_raise_r+0x12>

0800309c <raise>:
 800309c:	4b02      	ldr	r3, [pc, #8]	@ (80030a8 <raise+0xc>)
 800309e:	4601      	mov	r1, r0
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	f7ff bfd3 	b.w	800304c <_raise_r>
 80030a6:	bf00      	nop
 80030a8:	20000018 	.word	0x20000018

080030ac <_kill_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	2300      	movs	r3, #0
 80030b0:	4d06      	ldr	r5, [pc, #24]	@ (80030cc <_kill_r+0x20>)
 80030b2:	4604      	mov	r4, r0
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	602b      	str	r3, [r5, #0]
 80030ba:	f7fe fc52 	bl	8001962 <_kill>
 80030be:	1c43      	adds	r3, r0, #1
 80030c0:	d102      	bne.n	80030c8 <_kill_r+0x1c>
 80030c2:	682b      	ldr	r3, [r5, #0]
 80030c4:	b103      	cbz	r3, 80030c8 <_kill_r+0x1c>
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	bd38      	pop	{r3, r4, r5, pc}
 80030ca:	bf00      	nop
 80030cc:	20002c00 	.word	0x20002c00

080030d0 <_getpid_r>:
 80030d0:	f7fe bc40 	b.w	8001954 <_getpid>

080030d4 <_sbrk_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	2300      	movs	r3, #0
 80030d8:	4d05      	ldr	r5, [pc, #20]	@ (80030f0 <_sbrk_r+0x1c>)
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	602b      	str	r3, [r5, #0]
 80030e0:	f7fe fc5a 	bl	8001998 <_sbrk>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_sbrk_r+0x1a>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_sbrk_r+0x1a>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	20002c00 	.word	0x20002c00

080030f4 <__errno>:
 80030f4:	4b01      	ldr	r3, [pc, #4]	@ (80030fc <__errno+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000018 	.word	0x20000018

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	2600      	movs	r6, #0
 8003104:	4d0c      	ldr	r5, [pc, #48]	@ (8003138 <__libc_init_array+0x38>)
 8003106:	4c0d      	ldr	r4, [pc, #52]	@ (800313c <__libc_init_array+0x3c>)
 8003108:	1b64      	subs	r4, r4, r5
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	f000 f872 	bl	80031f8 <_init>
 8003114:	2600      	movs	r6, #0
 8003116:	4d0a      	ldr	r5, [pc, #40]	@ (8003140 <__libc_init_array+0x40>)
 8003118:	4c0a      	ldr	r4, [pc, #40]	@ (8003144 <__libc_init_array+0x44>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	080032dc 	.word	0x080032dc
 800313c:	080032dc 	.word	0x080032dc
 8003140:	080032dc 	.word	0x080032dc
 8003144:	080032e8 	.word	0x080032e8

08003148 <__retarget_lock_acquire_recursive>:
 8003148:	4770      	bx	lr

0800314a <__retarget_lock_release_recursive>:
 800314a:	4770      	bx	lr

0800314c <memcpy>:
 800314c:	440a      	add	r2, r1
 800314e:	4291      	cmp	r1, r2
 8003150:	f100 33ff 	add.w	r3, r0, #4294967295
 8003154:	d100      	bne.n	8003158 <memcpy+0xc>
 8003156:	4770      	bx	lr
 8003158:	b510      	push	{r4, lr}
 800315a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800315e:	4291      	cmp	r1, r2
 8003160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003164:	d1f9      	bne.n	800315a <memcpy+0xe>
 8003166:	bd10      	pop	{r4, pc}

08003168 <_free_r>:
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	4605      	mov	r5, r0
 800316c:	2900      	cmp	r1, #0
 800316e:	d040      	beq.n	80031f2 <_free_r+0x8a>
 8003170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003174:	1f0c      	subs	r4, r1, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	bfb8      	it	lt
 800317a:	18e4      	addlt	r4, r4, r3
 800317c:	f7ff ff52 	bl	8003024 <__malloc_lock>
 8003180:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <_free_r+0x8c>)
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	b933      	cbnz	r3, 8003194 <_free_r+0x2c>
 8003186:	6063      	str	r3, [r4, #4]
 8003188:	6014      	str	r4, [r2, #0]
 800318a:	4628      	mov	r0, r5
 800318c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003190:	f7ff bf4e 	b.w	8003030 <__malloc_unlock>
 8003194:	42a3      	cmp	r3, r4
 8003196:	d908      	bls.n	80031aa <_free_r+0x42>
 8003198:	6820      	ldr	r0, [r4, #0]
 800319a:	1821      	adds	r1, r4, r0
 800319c:	428b      	cmp	r3, r1
 800319e:	bf01      	itttt	eq
 80031a0:	6819      	ldreq	r1, [r3, #0]
 80031a2:	685b      	ldreq	r3, [r3, #4]
 80031a4:	1809      	addeq	r1, r1, r0
 80031a6:	6021      	streq	r1, [r4, #0]
 80031a8:	e7ed      	b.n	8003186 <_free_r+0x1e>
 80031aa:	461a      	mov	r2, r3
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	b10b      	cbz	r3, 80031b4 <_free_r+0x4c>
 80031b0:	42a3      	cmp	r3, r4
 80031b2:	d9fa      	bls.n	80031aa <_free_r+0x42>
 80031b4:	6811      	ldr	r1, [r2, #0]
 80031b6:	1850      	adds	r0, r2, r1
 80031b8:	42a0      	cmp	r0, r4
 80031ba:	d10b      	bne.n	80031d4 <_free_r+0x6c>
 80031bc:	6820      	ldr	r0, [r4, #0]
 80031be:	4401      	add	r1, r0
 80031c0:	1850      	adds	r0, r2, r1
 80031c2:	4283      	cmp	r3, r0
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	d1e0      	bne.n	800318a <_free_r+0x22>
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4408      	add	r0, r1
 80031ce:	6010      	str	r0, [r2, #0]
 80031d0:	6053      	str	r3, [r2, #4]
 80031d2:	e7da      	b.n	800318a <_free_r+0x22>
 80031d4:	d902      	bls.n	80031dc <_free_r+0x74>
 80031d6:	230c      	movs	r3, #12
 80031d8:	602b      	str	r3, [r5, #0]
 80031da:	e7d6      	b.n	800318a <_free_r+0x22>
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	1821      	adds	r1, r4, r0
 80031e0:	428b      	cmp	r3, r1
 80031e2:	bf01      	itttt	eq
 80031e4:	6819      	ldreq	r1, [r3, #0]
 80031e6:	685b      	ldreq	r3, [r3, #4]
 80031e8:	1809      	addeq	r1, r1, r0
 80031ea:	6021      	streq	r1, [r4, #0]
 80031ec:	6063      	str	r3, [r4, #4]
 80031ee:	6054      	str	r4, [r2, #4]
 80031f0:	e7cb      	b.n	800318a <_free_r+0x22>
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	20002ac4 	.word	0x20002ac4

080031f8 <_init>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	bf00      	nop
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr

08003204 <_fini>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	bf00      	nop
 8003208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320a:	bc08      	pop	{r3}
 800320c:	469e      	mov	lr, r3
 800320e:	4770      	bx	lr
