
Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b88  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002c98  08002c98  00003c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d5c  08002d5c  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002d5c  08002d5c  00003d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d64  08002d64  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08002d64  08002d64  00003d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08002d70  08002d70  00003d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002d7c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b5c  20000060  08002ddc  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bbc  08002ddc  00004bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d60  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b04  00000000  00000000  00018de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0001b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053f  00000000  00000000  0001c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019122  00000000  00000000  0001c53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a58f  00000000  00000000  00035661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009efde  00000000  00000000  0003fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000debce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033cc  00000000  00000000  000dec14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e1fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08002c80 	.word	0x08002c80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08002c80 	.word	0x08002c80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <_ZN6configC1Ev>:
 *  Created on: Sep 11, 2024
 *      Author: AHMED ABDELAZIZ
 */
#include "config.h"
/// <Instructor>
 config::config()
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
 {
	 RCC->APB2ENR =0x00000000;
 8000168:	4b05      	ldr	r3, [pc, #20]	@ (8000180 <_ZN6configC1Ev+0x20>)
 800016a:	2200      	movs	r2, #0
 800016c:	619a      	str	r2, [r3, #24]
	 RCC->APB1ENR=0x00000000;
 800016e:	4b04      	ldr	r3, [pc, #16]	@ (8000180 <_ZN6configC1Ev+0x20>)
 8000170:	2200      	movs	r2, #0
 8000172:	61da      	str	r2, [r3, #28]
 }
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4618      	mov	r0, r3
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	40021000 	.word	0x40021000

08000184 <_ZN6config4ENPAEv>:

 /// <Enable Ports and AFIOs>
 void config::ENPA()
 {
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	 RCC->APB2ENR |=(1<<2);
 800018c:	4b05      	ldr	r3, [pc, #20]	@ (80001a4 <_ZN6config4ENPAEv+0x20>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a04      	ldr	r2, [pc, #16]	@ (80001a4 <_ZN6config4ENPAEv+0x20>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6193      	str	r3, [r2, #24]
 }
 8000198:	bf00      	nop
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <_ZN6config4ENPBEv>:
 void config::ENPB()
 {
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	 RCC->APB2ENR |=(1<<3);
 80001b0:	4b05      	ldr	r3, [pc, #20]	@ (80001c8 <_ZN6config4ENPBEv+0x20>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a04      	ldr	r2, [pc, #16]	@ (80001c8 <_ZN6config4ENPBEv+0x20>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
 }
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	40021000 	.word	0x40021000

080001cc <_ZN7ControlC1EP5MotorS1_>:
 *      Author: AHMED ABDELAZIZ
 */

#include "control.h"

	Control::Control(Motor *m1,Motor *m2) : m1_{m1},m2_{m2}
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	607a      	str	r2, [r7, #4]
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	68ba      	ldr	r2, [r7, #8]
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	605a      	str	r2, [r3, #4]
	{
		m1_->STOP();
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fc25 	bl	8000a38 <_ZN5Motor4STOPEv>
		m2_->STOP();
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fc20 	bl	8000a38 <_ZN5Motor4STOPEv>
		//BREAK();
	}
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	4618      	mov	r0, r3
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <_ZN7Control7ForwardEv>:
	void Control::Forward()
	{
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
		m1_->CW();
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fbe0 	bl	80009d4 <_ZN5Motor2CWEv>
		m2_->CCW();
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fbf4 	bl	8000a06 <_ZN5Motor3CCWEv>
	}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <_ZN7Control8BackwardEv>:
void Control::Backward()
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b082      	sub	sp, #8
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
	m2_->CW();
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fbce 	bl	80009d4 <_ZN5Motor2CWEv>
	m1_->CCW();
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fbe2 	bl	8000a06 <_ZN5Motor3CCWEv>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <_ZN7Control5RightEv>:
	void Control::Right()
	{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
		m1_->STOP();
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fbee 	bl	8000a38 <_ZN5Motor4STOPEv>
		m2_->CCW();
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fbd0 	bl	8000a06 <_ZN5Motor3CCWEv>

	}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}

0800026e <_ZN7Control4LeftEv>:
	void Control::Left()
	{
 800026e:	b580      	push	{r7, lr}
 8000270:	b082      	sub	sp, #8
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
		m1_->CW();
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fbaa 	bl	80009d4 <_ZN5Motor2CWEv>
		m2_->STOP();
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fbd7 	bl	8000a38 <_ZN5Motor4STOPEv>
	}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <_ZN7Control5BREAKEv>:
	void Control::BREAK()
	{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
		m1_->STOP();
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fbca 	bl	8000a38 <_ZN5Motor4STOPEv>
		m2_->STOP();
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fbc5 	bl	8000a38 <_ZN5Motor4STOPEv>
	}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	@ 0x28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d022      	beq.n	8000310 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80002ca:	2308      	movs	r3, #8
 80002cc:	43db      	mvns	r3, r3
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d81b      	bhi.n	800030c <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80002d4:	2208      	movs	r2, #8
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4413      	add	r3, r2
 80002da:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f003 0307 	and.w	r3, r3, #7
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d014      	beq.n	8000310 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f003 0307 	and.w	r3, r3, #7
 80002ec:	f1c3 0308 	rsb	r3, r3, #8
 80002f0:	617b      	str	r3, [r7, #20]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	43db      	mvns	r3, r3
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d804      	bhi.n	8000306 <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	4413      	add	r3, r2
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	e004      	b.n	8000310 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	e001      	b.n	8000310 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8000310:	f001 fbac 	bl	8001a6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000314:	4b3b      	ldr	r3, [pc, #236]	@ (8000404 <pvPortMalloc+0x14c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d104      	bne.n	8000326 <pvPortMalloc+0x6e>
        {
            prvHeapInit();
 800031c:	f000 f8c6 	bl	80004ac <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8000320:	4b38      	ldr	r3, [pc, #224]	@ (8000404 <pvPortMalloc+0x14c>)
 8000322:	2201      	movs	r2, #1
 8000324:	601a      	str	r2, [r3, #0]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2b00      	cmp	r3, #0
 800032a:	db63      	blt.n	80003f4 <pvPortMalloc+0x13c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d060      	beq.n	80003f4 <pvPortMalloc+0x13c>
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <pvPortMalloc+0x150>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	d85b      	bhi.n	80003f4 <pvPortMalloc+0x13c>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800033c:	4b33      	ldr	r3, [pc, #204]	@ (800040c <pvPortMalloc+0x154>)
 800033e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000340:	4b32      	ldr	r3, [pc, #200]	@ (800040c <pvPortMalloc+0x154>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000346:	e004      	b.n	8000352 <pvPortMalloc+0x9a>
                {
                    pxPreviousBlock = pxBlock;
 8000348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800034a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800034c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	429a      	cmp	r2, r3
 800035a:	d903      	bls.n	8000364 <pvPortMalloc+0xac>
 800035c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1f1      	bne.n	8000348 <pvPortMalloc+0x90>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 8000364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000366:	4a2a      	ldr	r2, [pc, #168]	@ (8000410 <pvPortMalloc+0x158>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d043      	beq.n	80003f4 <pvPortMalloc+0x13c>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800036c:	6a3b      	ldr	r3, [r7, #32]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2208      	movs	r2, #8
 8000372:	4413      	add	r3, r2
 8000374:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	6a3b      	ldr	r3, [r7, #32]
 800037c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800037e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000380:	685a      	ldr	r2, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	1ad2      	subs	r2, r2, r3
 8000386:	2308      	movs	r3, #8
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	429a      	cmp	r2, r3
 800038c:	d922      	bls.n	80003d4 <pvPortMalloc+0x11c>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800038e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	1ad2      	subs	r2, r2, r3
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80003a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks.
                         * The list of free blocks is sorted by their size, we have to
                         * iterate to find the right place to insert new block. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <pvPortMalloc+0x154>)
 80003b0:	61bb      	str	r3, [r7, #24]
 80003b2:	e002      	b.n	80003ba <pvPortMalloc+0x102>
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	61bb      	str	r3, [r7, #24]
 80003ba:	69bb      	ldr	r3, [r7, #24]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d8f6      	bhi.n	80003b4 <pvPortMalloc+0xfc>
 80003c6:	69bb      	ldr	r3, [r7, #24]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	693a      	ldr	r2, [r7, #16]
 80003d2:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <pvPortMalloc+0x150>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <pvPortMalloc+0x150>)
 80003e0:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80003e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80003ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ec:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80003ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80003f4:	f001 fb48 	bl	8001a88 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80003f8:	69fb      	ldr	r3, [r7, #28]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3728      	adds	r7, #40	@ 0x28
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	2000288c 	.word	0x2000288c
 8000408:	20000000 	.word	0x20000000
 800040c:	2000287c 	.word	0x2000287c
 8000410:	20002884 	.word	0x20002884

08000414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d039      	beq.n	800049a <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000426:	2308      	movs	r3, #8
 8000428:	425b      	negs	r3, r3
 800042a:	693a      	ldr	r2, [r7, #16]
 800042c:	4413      	add	r3, r2
 800042e:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	0fdb      	lsrs	r3, r3, #31
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d02a      	beq.n	800049a <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d126      	bne.n	800049a <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8000458:	f001 fb08 	bl	8001a6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <vPortFree+0x90>)
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e002      	b.n	800046e <vPortFree+0x5a>
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	68ba      	ldr	r2, [r7, #8]
 8000476:	429a      	cmp	r2, r3
 8000478:	d8f6      	bhi.n	8000468 <vPortFree+0x54>
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	685a      	ldr	r2, [r3, #4]
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <vPortFree+0x94>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <vPortFree+0x94>)
 8000494:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 8000496:	f001 faf7 	bl	8001a88 <xTaskResumeAll>
            }
        }
    }
}
 800049a:	bf00      	nop
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000287c 	.word	0x2000287c
 80004a8:	20000000 	.word	0x20000000

080004ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <prvHeapInit+0x44>)
 80004b4:	f023 0307 	bic.w	r3, r3, #7
 80004b8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80004ba:	4a0e      	ldr	r2, [pc, #56]	@ (80004f4 <prvHeapInit+0x48>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <prvHeapInit+0x48>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <prvHeapInit+0x4c>)
 80004c8:	f242 72f8 	movw	r2, #10232	@ 0x27f8
 80004cc:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 80004ce:	4b0a      	ldr	r3, [pc, #40]	@ (80004f8 <prvHeapInit+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	f242 72f8 	movw	r2, #10232	@ 0x27f8
 80004de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	4a05      	ldr	r2, [pc, #20]	@ (80004f8 <prvHeapInit+0x4c>)
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	20000083 	.word	0x20000083
 80004f4:	2000287c 	.word	0x2000287c
 80004f8:	20002884 	.word	0x20002884

080004fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f103 0208 	add.w	r2, r3, #8
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f04f 32ff 	mov.w	r2, #4294967295
 8000514:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f103 0208 	add.w	r2, r3, #8
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f103 0208 	add.w	r2, r3, #8
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000568:	d103      	bne.n	8000572 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e00c      	b.n	800058c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3308      	adds	r3, #8
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	e002      	b.n	8000580 <vListInsert+0x2e>
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	429a      	cmp	r2, r3
 800058a:	d2f6      	bcs.n	800057a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	685a      	ldr	r2, [r3, #4]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	6892      	ldr	r2, [r2, #8]
 80005d8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	6852      	ldr	r2, [r2, #4]
 80005e2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d103      	bne.n	80005f6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1e5a      	subs	r2, r3, #1
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <_Z17uartTimerCallbackPv>:
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
	OP BUZZ(gpiob,9,MODE::Gen);// PIN B9 is a 50MHZ output (Buzzer)
///<declerations ENDS>
///<UART Task Begins>
void uartTimerCallback(void *pv)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	bl_test->INIT(1);
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <_Z17uartTimerCallbackPv+0x40>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2101      	movs	r1, #1
 8000622:	4618      	mov	r0, r3
 8000624:	f001 ffaa 	bl	800257c <_ZN4UART4INITEi>
    // Queue sender
	while(1)
	{
    char control = bl_test->Read();
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <_Z17uartTimerCallbackPv+0x40>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f81d 	bl	800266c <_ZN4UART4ReadEv>
 8000632:	4603      	mov	r3, r0
 8000634:	73fb      	strb	r3, [r7, #15]
    xQueueSendToBack(xQueue, &control, portMAX_DELAY);
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <_Z17uartTimerCallbackPv+0x44>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f107 010f 	add.w	r1, r7, #15
 800063e:	2300      	movs	r3, #0
 8000640:	f04f 32ff 	mov.w	r2, #4294967295
 8000644:	f000 fd52 	bl	80010ec <xQueueGenericSend>
   // bl_test->Send(control);
	vTaskDelay(100/portTICK_RATE_MS);
 8000648:	2064      	movs	r0, #100	@ 0x64
 800064a:	f001 f971 	bl	8001930 <vTaskDelay>
	}
 800064e:	bf00      	nop
 8000650:	e7ea      	b.n	8000628 <_Z17uartTimerCallbackPv+0x14>
 8000652:	bf00      	nop
 8000654:	200028ac 	.word	0x200028ac
 8000658:	200028a8 	.word	0x200028a8

0800065c <_Z9uart_READPv>:
}
void uart_READ(void *pv)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	char reading=0;
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
while(1)
{
	xQueueReceive(xQueue, &reading, portMAX_DELAY);
 8000668:	4b3a      	ldr	r3, [pc, #232]	@ (8000754 <_Z9uart_READPv+0xf8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f107 010f 	add.w	r1, r7, #15
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fde3 	bl	8001240 <xQueueReceive>
	if(reading =='w')
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	2b77      	cmp	r3, #119	@ 0x77
 800067e:	d10f      	bne.n	80006a0 <_Z9uart_READPv+0x44>
	{
		LED_G.ON();
 8000680:	4835      	ldr	r0, [pc, #212]	@ (8000758 <_Z9uart_READPv+0xfc>)
 8000682:	f000 faf5 	bl	8000c70 <_ZN2OP2ONEv>
		LED_B.OFF();
 8000686:	4835      	ldr	r0, [pc, #212]	@ (800075c <_Z9uart_READPv+0x100>)
 8000688:	f000 fb08 	bl	8000c9c <_ZN2OP3OFFEv>
		LED_R.OFF();
 800068c:	4834      	ldr	r0, [pc, #208]	@ (8000760 <_Z9uart_READPv+0x104>)
 800068e:	f000 fb05 	bl	8000c9c <_ZN2OP3OFFEv>
		BUZZ.OFF();
 8000692:	4834      	ldr	r0, [pc, #208]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000694:	f000 fb02 	bl	8000c9c <_ZN2OP3OFFEv>
		motion.Forward();
 8000698:	4833      	ldr	r0, [pc, #204]	@ (8000768 <_Z9uart_READPv+0x10c>)
 800069a:	f7ff fdb2 	bl	8000202 <_ZN7Control7ForwardEv>
 800069e:	e7e3      	b.n	8000668 <_Z9uart_READPv+0xc>
	//	vTaskDelay(200/portTICK_RATE_MS);
	}
	else if(reading =='s')
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b73      	cmp	r3, #115	@ 0x73
 80006a4:	d10c      	bne.n	80006c0 <_Z9uart_READPv+0x64>
	{
		//BUZZ.ON();
		LED_R.ON();
 80006a6:	482e      	ldr	r0, [pc, #184]	@ (8000760 <_Z9uart_READPv+0x104>)
 80006a8:	f000 fae2 	bl	8000c70 <_ZN2OP2ONEv>
		LED_B.OFF();
 80006ac:	482b      	ldr	r0, [pc, #172]	@ (800075c <_Z9uart_READPv+0x100>)
 80006ae:	f000 faf5 	bl	8000c9c <_ZN2OP3OFFEv>
		LED_G.OFF();
 80006b2:	4829      	ldr	r0, [pc, #164]	@ (8000758 <_Z9uart_READPv+0xfc>)
 80006b4:	f000 faf2 	bl	8000c9c <_ZN2OP3OFFEv>
		motion.Backward();
 80006b8:	482b      	ldr	r0, [pc, #172]	@ (8000768 <_Z9uart_READPv+0x10c>)
 80006ba:	f7ff fdb4 	bl	8000226 <_ZN7Control8BackwardEv>
 80006be:	e7d3      	b.n	8000668 <_Z9uart_READPv+0xc>
		//vTaskDelay(200/portTICK_RATE_MS);

	}
	else if (reading=='d')
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b64      	cmp	r3, #100	@ 0x64
 80006c4:	d10f      	bne.n	80006e6 <_Z9uart_READPv+0x8a>
	{
		LED_B.ON();
 80006c6:	4825      	ldr	r0, [pc, #148]	@ (800075c <_Z9uart_READPv+0x100>)
 80006c8:	f000 fad2 	bl	8000c70 <_ZN2OP2ONEv>
		LED_R.OFF();
 80006cc:	4824      	ldr	r0, [pc, #144]	@ (8000760 <_Z9uart_READPv+0x104>)
 80006ce:	f000 fae5 	bl	8000c9c <_ZN2OP3OFFEv>
		LED_G.OFF();
 80006d2:	4821      	ldr	r0, [pc, #132]	@ (8000758 <_Z9uart_READPv+0xfc>)
 80006d4:	f000 fae2 	bl	8000c9c <_ZN2OP3OFFEv>
		BUZZ.OFF();
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <_Z9uart_READPv+0x108>)
 80006da:	f000 fadf 	bl	8000c9c <_ZN2OP3OFFEv>
		motion.Right();
 80006de:	4822      	ldr	r0, [pc, #136]	@ (8000768 <_Z9uart_READPv+0x10c>)
 80006e0:	f7ff fdb3 	bl	800024a <_ZN7Control5RightEv>
 80006e4:	e7c0      	b.n	8000668 <_Z9uart_READPv+0xc>

		//	vTaskDelay(200/portTICK_RATE_MS);

	}
	else if(reading =='a')
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	2b61      	cmp	r3, #97	@ 0x61
 80006ea:	d10f      	bne.n	800070c <_Z9uart_READPv+0xb0>
	{
		LED_B.ON();
 80006ec:	481b      	ldr	r0, [pc, #108]	@ (800075c <_Z9uart_READPv+0x100>)
 80006ee:	f000 fabf 	bl	8000c70 <_ZN2OP2ONEv>
		LED_G.OFF();
 80006f2:	4819      	ldr	r0, [pc, #100]	@ (8000758 <_Z9uart_READPv+0xfc>)
 80006f4:	f000 fad2 	bl	8000c9c <_ZN2OP3OFFEv>
		LED_R.OFF();
 80006f8:	4819      	ldr	r0, [pc, #100]	@ (8000760 <_Z9uart_READPv+0x104>)
 80006fa:	f000 facf 	bl	8000c9c <_ZN2OP3OFFEv>
		BUZZ.OFF();
 80006fe:	4819      	ldr	r0, [pc, #100]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000700:	f000 facc 	bl	8000c9c <_ZN2OP3OFFEv>
		motion.Left();
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <_Z9uart_READPv+0x10c>)
 8000706:	f7ff fdb2 	bl	800026e <_ZN7Control4LeftEv>
 800070a:	e7ad      	b.n	8000668 <_Z9uart_READPv+0xc>

		//	vTaskDelay(200/portTICK_RATE_MS);

	}
	else if(reading =='p')
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	2b70      	cmp	r3, #112	@ 0x70
 8000710:	d10f      	bne.n	8000732 <_Z9uart_READPv+0xd6>
	{
		LED_R.ON();
 8000712:	4813      	ldr	r0, [pc, #76]	@ (8000760 <_Z9uart_READPv+0x104>)
 8000714:	f000 faac 	bl	8000c70 <_ZN2OP2ONEv>
		LED_B.ON();
 8000718:	4810      	ldr	r0, [pc, #64]	@ (800075c <_Z9uart_READPv+0x100>)
 800071a:	f000 faa9 	bl	8000c70 <_ZN2OP2ONEv>
		LED_G.ON();
 800071e:	480e      	ldr	r0, [pc, #56]	@ (8000758 <_Z9uart_READPv+0xfc>)
 8000720:	f000 faa6 	bl	8000c70 <_ZN2OP2ONEv>
		BUZZ.OFF();
 8000724:	480f      	ldr	r0, [pc, #60]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000726:	f000 fab9 	bl	8000c9c <_ZN2OP3OFFEv>
		motion.BREAK();
 800072a:	480f      	ldr	r0, [pc, #60]	@ (8000768 <_Z9uart_READPv+0x10c>)
 800072c:	f7ff fdb1 	bl	8000292 <_ZN7Control5BREAKEv>
 8000730:	e79a      	b.n	8000668 <_Z9uart_READPv+0xc>
//vTaskDelay(200/portTICK_RATE_MS);
	}
	else
	{
		LED_B.ON();
 8000732:	480a      	ldr	r0, [pc, #40]	@ (800075c <_Z9uart_READPv+0x100>)
 8000734:	f000 fa9c 	bl	8000c70 <_ZN2OP2ONEv>
		LED_R.ON();
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <_Z9uart_READPv+0x104>)
 800073a:	f000 fa99 	bl	8000c70 <_ZN2OP2ONEv>
		LED_G.OFF();
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <_Z9uart_READPv+0xfc>)
 8000740:	f000 faac 	bl	8000c9c <_ZN2OP3OFFEv>
		BUZZ.OFF();
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <_Z9uart_READPv+0x108>)
 8000746:	f000 faa9 	bl	8000c9c <_ZN2OP3OFFEv>
		motion.BREAK();
 800074a:	4807      	ldr	r0, [pc, #28]	@ (8000768 <_Z9uart_READPv+0x10c>)
 800074c:	f7ff fda1 	bl	8000292 <_ZN7Control5BREAKEv>
	xQueueReceive(xQueue, &reading, portMAX_DELAY);
 8000750:	e78a      	b.n	8000668 <_Z9uart_READPv+0xc>
 8000752:	bf00      	nop
 8000754:	200028a8 	.word	0x200028a8
 8000758:	20002914 	.word	0x20002914
 800075c:	20002908 	.word	0x20002908
 8000760:	20002920 	.word	0x20002920
 8000764:	2000292c 	.word	0x2000292c
 8000768:	20002900 	.word	0x20002900

0800076c <main>:
}
}
///< UART Tasks ENDS	>

int main()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af02      	add	r7, sp, #8
///<configurations BEGINS>
config port;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fcf3 	bl	8000160 <_ZN6configC1Ev>
port.ENPB();//enable RCC for port B
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd13 	bl	80001a8 <_ZN6config4ENPBEv>
port.ENPA();//enable RCC for port A
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fcfd 	bl	8000184 <_ZN6config4ENPAEv>
   oled.setDisplayOptions(1, 1, 0); // Set display options (fontSize, fontColor, orientation)
   oled.display("Hello, World!"); // Send a string to the OLED screen at (0, 0) coordinates
*/
///<Activating OLED ENDS>
///<Activating RTOS BEGINS>
xQueue =xQueueCreate(10, sizeof(char));
 800078a:	2200      	movs	r2, #0
 800078c:	2101      	movs	r1, #1
 800078e:	200a      	movs	r0, #10
 8000790:	f000 fc4a 	bl	8001028 <xQueueGenericCreate>
 8000794:	4603      	mov	r3, r0
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <main+0x6c>)
 8000798:	6013      	str	r3, [r2, #0]
if(xQueue != NULL)
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <main+0x6c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d018      	beq.n	80007d4 <main+0x68>
{
	xTaskCreate(uartTimerCallback,"uart_com",400,NULL,3,NULL); //Receiving Data from (HC-05//TTL) and send it to Queue
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2303      	movs	r3, #3
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007b0:	490a      	ldr	r1, [pc, #40]	@ (80007dc <main+0x70>)
 80007b2:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <main+0x74>)
 80007b4:	f000 ff90 	bl	80016d8 <xTaskCreate>
	xTaskCreate(uart_READ,"uart_rec",400,NULL,3,NULL); // Fetching Data From Queue and Execute
 80007b8:	2300      	movs	r3, #0
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2303      	movs	r3, #3
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007c6:	4907      	ldr	r1, [pc, #28]	@ (80007e4 <main+0x78>)
 80007c8:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <main+0x7c>)
 80007ca:	f000 ff85 	bl	80016d8 <xTaskCreate>
	vTaskStartScheduler();
 80007ce:	f001 f91f 	bl	8001a10 <vTaskStartScheduler>
}
///<Activating RTOS ENDS>
while(1)
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <main+0x68>
 80007d8:	200028a8 	.word	0x200028a8
 80007dc:	08002c98 	.word	0x08002c98
 80007e0:	08000615 	.word	0x08000615
 80007e4:	08002ca4 	.word	0x08002ca4
 80007e8:	0800065d 	.word	0x0800065d

080007ec <_ZN11Moto_ConfigD1Ev>:
#define INC_MOTOR_H_
#include "op.h"


///<Struct for Pins to be configured as O/P
struct Moto_Config
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3318      	adds	r3, #24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fa66 	bl	8000cca <_ZN2OPD1Ev>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	330c      	adds	r3, #12
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fa61 	bl	8000cca <_ZN2OPD1Ev>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fa5d 	bl	8000cca <_ZN2OPD1Ev>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <_Z41__static_initialization_and_destruction_0ii>:
{
	//not needed infinte loop
}
return 0;
}
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d16c      	bne.n	8000906 <_Z41__static_initialization_and_destruction_0ii+0xea>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000832:	4293      	cmp	r3, r2
 8000834:	d167      	bne.n	8000906 <_Z41__static_initialization_and_destruction_0ii+0xea>
	UART2INS = 0x40004400,
	UART3INS = 0x40004800,

};
const double USART_div = FOSC/(BAUD);
const std::string msg= "NO UART with this address is Available!! \r\n" ;
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4618      	mov	r0, r3
 800083c:	f001 ffd3 	bl	80027e6 <_ZNSaIcEC1Ev>
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	461a      	mov	r2, r3
 8000846:	4940      	ldr	r1, [pc, #256]	@ (8000948 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8000848:	4840      	ldr	r0, [pc, #256]	@ (800094c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800084a:	f002 f839 	bl	80028c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4618      	mov	r0, r3
 8000854:	f001 ffc8 	bl	80027e8 <_ZNSaIcED1Ev>
 UART* bl_test = new(UART1INS) UART(UART1INS);
 8000858:	493d      	ldr	r1, [pc, #244]	@ (8000950 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800085a:	201c      	movs	r0, #28
 800085c:	f001 ff51 	bl	8002702 <_ZN4UARTnwEj13UART_Instance>
 8000860:	4604      	mov	r4, r0
 8000862:	493b      	ldr	r1, [pc, #236]	@ (8000950 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8000864:	4620      	mov	r0, r4
 8000866:	f001 fe57 	bl	8002518 <_ZN4UARTC1Ei>
 800086a:	4b3a      	ldr	r3, [pc, #232]	@ (8000954 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800086c:	601c      	str	r4, [r3, #0]
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {gpiob, 1,MODE::Gen}, {GPIOA, 6,MODE::Gen}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 800086e:	2303      	movs	r3, #3
 8000870:	2205      	movs	r2, #5
 8000872:	4939      	ldr	r1, [pc, #228]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8000874:	4839      	ldr	r0, [pc, #228]	@ (800095c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8000876:	f000 f8f9 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 800087a:	4b39      	ldr	r3, [pc, #228]	@ (8000960 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800087c:	6819      	ldr	r1, [r3, #0]
 800087e:	2303      	movs	r3, #3
 8000880:	2201      	movs	r2, #1
 8000882:	4838      	ldr	r0, [pc, #224]	@ (8000964 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8000884:	f000 f8f2 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000888:	2303      	movs	r3, #3
 800088a:	2206      	movs	r2, #6
 800088c:	4932      	ldr	r1, [pc, #200]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800088e:	4836      	ldr	r0, [pc, #216]	@ (8000968 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8000890:	f000 f8ec 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {gpiob, 0,MODE::Gen}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 8000894:	2303      	movs	r3, #3
 8000896:	2204      	movs	r2, #4
 8000898:	492f      	ldr	r1, [pc, #188]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800089a:	4834      	ldr	r0, [pc, #208]	@ (800096c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800089c:	f000 f8e6 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 80008a0:	2303      	movs	r3, #3
 80008a2:	2200      	movs	r2, #0
 80008a4:	492c      	ldr	r1, [pc, #176]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80008a6:	4832      	ldr	r0, [pc, #200]	@ (8000970 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80008a8:	f000 f8e0 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 80008ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000960 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80008ae:	6819      	ldr	r1, [r3, #0]
 80008b0:	2303      	movs	r3, #3
 80008b2:	2200      	movs	r2, #0
 80008b4:	482f      	ldr	r0, [pc, #188]	@ (8000974 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80008b6:	f000 f8d9 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	Motor M1(&m1_c); /// OBJ Motor has the name M1 and the address of m1_c
 80008ba:	4928      	ldr	r1, [pc, #160]	@ (800095c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80008bc:	482e      	ldr	r0, [pc, #184]	@ (8000978 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80008be:	f000 f879 	bl	80009b4 <_ZN5MotorC1EP11Moto_Config>
	Motor M2(&m2_c); /// OBJ Motor has the name M2 and the address of m2_c
 80008c2:	492a      	ldr	r1, [pc, #168]	@ (800096c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80008c4:	482d      	ldr	r0, [pc, #180]	@ (800097c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80008c6:	f000 f875 	bl	80009b4 <_ZN5MotorC1EP11Moto_Config>
	Control motion(&M1,&M2); // controlling both motors with motion go forward, backward,right or left
 80008ca:	4a2c      	ldr	r2, [pc, #176]	@ (800097c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80008cc:	492a      	ldr	r1, [pc, #168]	@ (8000978 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80008ce:	482c      	ldr	r0, [pc, #176]	@ (8000980 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80008d0:	f7ff fc7c 	bl	80001cc <_ZN7ControlC1EP5MotorS1_>
	OP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 80008d4:	2303      	movs	r3, #3
 80008d6:	2201      	movs	r2, #1
 80008d8:	491f      	ldr	r1, [pc, #124]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80008da:	482a      	ldr	r0, [pc, #168]	@ (8000984 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80008dc:	f000 f8c6 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP LED_G(GPIOA,2,MODE::Gen); // PIN A2 is a 50MHZ Output (Green LED)
 80008e0:	2303      	movs	r3, #3
 80008e2:	2202      	movs	r2, #2
 80008e4:	491c      	ldr	r1, [pc, #112]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80008e6:	4828      	ldr	r0, [pc, #160]	@ (8000988 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80008e8:	f000 f8c0 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 80008ec:	2303      	movs	r3, #3
 80008ee:	2203      	movs	r2, #3
 80008f0:	4919      	ldr	r1, [pc, #100]	@ (8000958 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80008f2:	4826      	ldr	r0, [pc, #152]	@ (800098c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80008f4:	f000 f8ba 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
	OP BUZZ(gpiob,9,MODE::Gen);// PIN B9 is a 50MHZ output (Buzzer)
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	2303      	movs	r3, #3
 80008fe:	2209      	movs	r2, #9
 8000900:	4823      	ldr	r0, [pc, #140]	@ (8000990 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8000902:	f000 f8b3 	bl	8000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d119      	bne.n	8000940 <_Z41__static_initialization_and_destruction_0ii+0x124>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000912:	4293      	cmp	r3, r2
 8000914:	d114      	bne.n	8000940 <_Z41__static_initialization_and_destruction_0ii+0x124>
 8000916:	481e      	ldr	r0, [pc, #120]	@ (8000990 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8000918:	f000 f9d7 	bl	8000cca <_ZN2OPD1Ev>
	OP LED_R(GPIOA,3,MODE::Gen); // PIN A3 is a 50MHZ Output (Red LED)
 800091c:	481b      	ldr	r0, [pc, #108]	@ (800098c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800091e:	f000 f9d4 	bl	8000cca <_ZN2OPD1Ev>
	OP LED_G(GPIOA,2,MODE::Gen); // PIN A2 is a 50MHZ Output (Green LED)
 8000922:	4819      	ldr	r0, [pc, #100]	@ (8000988 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8000924:	f000 f9d1 	bl	8000cca <_ZN2OPD1Ev>
	OP LED_B(GPIOA,1,MODE::Gen); // PIN A1 is a 50MHZ Output (Blue LED)
 8000928:	4816      	ldr	r0, [pc, #88]	@ (8000984 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800092a:	f000 f9ce 	bl	8000cca <_ZN2OPD1Ev>
	Moto_Config m2_c = {{GPIOA, 4,MODE::Gen}, {GPIOA, 0,MODE::Gen}, {gpiob, 0,MODE::Gen}};// activating motor 2 driver as Pin A4 is ins1, A0 is ins2, B0 is Enable (50MHZ output)
 800092e:	480f      	ldr	r0, [pc, #60]	@ (800096c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8000930:	f7ff ff5c 	bl	80007ec <_ZN11Moto_ConfigD1Ev>
	Moto_Config m1_c = {{GPIOA, 5,MODE::Gen}, {gpiob, 1,MODE::Gen}, {GPIOA, 6,MODE::Gen}}; // activating motor 1 driver as Pin A5 is ins1, B1 is ins2, A6 is Enable (50MHZ output)
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8000936:	f7ff ff59 	bl	80007ec <_ZN11Moto_ConfigD1Ev>
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800093c:	f001 ff9c 	bl	8002878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	08002cb0 	.word	0x08002cb0
 800094c:	20002890 	.word	0x20002890
 8000950:	40013800 	.word	0x40013800
 8000954:	200028ac 	.word	0x200028ac
 8000958:	40010800 	.word	0x40010800
 800095c:	200028b0 	.word	0x200028b0
 8000960:	20000004 	.word	0x20000004
 8000964:	200028bc 	.word	0x200028bc
 8000968:	200028c8 	.word	0x200028c8
 800096c:	200028d4 	.word	0x200028d4
 8000970:	200028e0 	.word	0x200028e0
 8000974:	200028ec 	.word	0x200028ec
 8000978:	200028f8 	.word	0x200028f8
 800097c:	200028fc 	.word	0x200028fc
 8000980:	20002900 	.word	0x20002900
 8000984:	20002908 	.word	0x20002908
 8000988:	20002914 	.word	0x20002914
 800098c:	20002920 	.word	0x20002920
 8000990:	2000292c 	.word	0x2000292c

08000994 <_GLOBAL__sub_I_xQueue>:
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
 8000998:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff ff3d 	bl	800081c <_Z41__static_initialization_and_destruction_0ii>
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_GLOBAL__sub_D_xQueue>:
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff35 	bl	800081c <_Z41__static_initialization_and_destruction_0ii>
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_ZN5MotorC1EP11Moto_Config>:
 *      Author: AHMED ABDELAZIZ
 */

#include "motor.h"

Motor::Motor(Moto_Config * config) : Config_{config}
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	601a      	str	r2, [r3, #0]
{
STOP();
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f837 	bl	8000a38 <_ZN5Motor4STOPEv>
}
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_ZN5Motor2CWEv>:

void Motor::CW()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	Config_->in1.ON();
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f945 	bl	8000c70 <_ZN2OP2ONEv>
	Config_->in2.OFF();
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	330c      	adds	r3, #12
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f955 	bl	8000c9c <_ZN2OP3OFFEv>
	Config_->en.ON();
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3318      	adds	r3, #24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f939 	bl	8000c70 <_ZN2OP2ONEv>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_ZN5Motor3CCWEv>:
void Motor::CCW()
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	Config_->in1.OFF();
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f942 	bl	8000c9c <_ZN2OP3OFFEv>
	Config_->in2.ON();
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f926 	bl	8000c70 <_ZN2OP2ONEv>
	Config_->en.ON();
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3318      	adds	r3, #24
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f920 	bl	8000c70 <_ZN2OP2ONEv>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_ZN5Motor4STOPEv>:

void Motor::STOP()
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	Config_->in1.OFF();
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f929 	bl	8000c9c <_ZN2OP3OFFEv>
	Config_->in2.OFF();
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	330c      	adds	r3, #12
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f923 	bl	8000c9c <_ZN2OP3OFFEv>
	Config_->en.OFF();
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f91d 	bl	8000c9c <_ZN2OP3OFFEv>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE>:
#include "op.h"

uint8_t OP::CountA;
uint8_t OP::CountB;

OP::OP(GPIO_TypeDef * GPIO, uint8_t pin, MODE mode) : Port_{GPIO}, Pin_{pin}, mode_{mode}
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	711a      	strb	r2, [r3, #4]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	609a      	str	r2, [r3, #8]
	{
		if(GPIO == GPIOA)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	4a73      	ldr	r2, [pc, #460]	@ (8000c60 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1f4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d16c      	bne.n	8000b70 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x104>
		{

			if(mode == MODE::Gen)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d132      	bne.n	8000b02 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x96>

		{
			if(CountA ==0)
 8000a9c:	4b71      	ldr	r3, [pc, #452]	@ (8000c64 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1f8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x48>
			{
				Port_->CRL = 0x00000000;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
			}
			CountA++;
 8000ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8000c64 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1f8>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b69      	ldr	r3, [pc, #420]	@ (8000c64 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1f8>)
 8000abe:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	791b      	ldrb	r3, [r3, #4]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d80c      	bhi.n	8000ae2 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x76>
			{
				Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6819      	ldr	r1, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e0b5      	b.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
			}
			else
			{
				Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6859      	ldr	r1, [r3, #4]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000af0:	3b08      	subs	r3, #8
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	2203      	movs	r2, #3
 8000af6:	409a      	lsls	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	e0a5      	b.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
			}
		}

		else if (mode == MODE::AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b0b      	cmp	r3, #11
 8000b06:	f040 80a2 	bne.w	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
		{
			if(CountA ==0)
 8000b0a:	4b56      	ldr	r3, [pc, #344]	@ (8000c64 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1f8>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d107      	bne.n	8000b22 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xb6>
			{
				Port_->CRL = 0x00000000;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
				Port_->CRH = 0x00000000;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
			}
			CountA++;
 8000b22:	4b50      	ldr	r3, [pc, #320]	@ (8000c64 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1f8>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000c64 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1f8>)
 8000b2c:	701a      	strb	r2, [r3, #0]
			if(Pin_<PIN_per_REG)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	791b      	ldrb	r3, [r3, #4]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d80c      	bhi.n	8000b50 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0xe4>
			{
				Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220b      	movs	r2, #11
 8000b44:	409a      	lsls	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e07e      	b.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
			}
			else
			{
				Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6859      	ldr	r1, [r3, #4]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	791b      	ldrb	r3, [r3, #4]
 8000b5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b5e:	3b08      	subs	r3, #8
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	220b      	movs	r2, #11
 8000b64:	409a      	lsls	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	e06e      	b.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
			}
		}

	}		else if(GPIO == GPIOB)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1fc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d16a      	bne.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
	{

		if(mode == MODE::Gen)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d132      	bne.n	8000be4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x178>

	{
		if(CountB ==0)
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x200>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d107      	bne.n	8000b96 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x12a>
		{
			Port_->CRL = 0x00000000;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
			Port_->CRH = 0x00000000;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
		}
		CountB++;
 8000b96:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x200>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b33      	ldr	r3, [pc, #204]	@ (8000c6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x200>)
 8000ba0:	701a      	strb	r2, [r3, #0]
		if(Pin_<PIN_per_REG)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	2b07      	cmp	r3, #7
 8000ba8:	d80c      	bhi.n	8000bc4 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x158>
		{
			Port_->CRL	|=(OP_50MHZ<<(Pin_ * BIT_per_PIN));
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6819      	ldr	r1, [r3, #0]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	791b      	ldrb	r3, [r3, #4]
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e044      	b.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
		}
		else
		{
			Port_->CRH |=(OP_50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6859      	ldr	r1, [r3, #4]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000bd2:	3b08      	subs	r3, #8
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	e034      	b.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
		}
	}

	else if (mode == MODE::AF)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2b0b      	cmp	r3, #11
 8000be8:	d131      	bne.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
	{
		if(CountB ==0)
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x200>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d107      	bne.n	8000c02 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x196>
		{
			Port_->CRL = 0x00000000;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
			Port_->CRH = 0x00000000;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
		}
		CountB++;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x200>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x200>)
 8000c0c:	701a      	strb	r2, [r3, #0]
		if(Pin_<PIN_per_REG)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	791b      	ldrb	r3, [r3, #4]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d80c      	bhi.n	8000c30 <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1c4>
		{
			Port_->CRL	|=(OP_AF50MHZ<<(Pin_ * BIT_per_PIN));
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220b      	movs	r2, #11
 8000c24:	409a      	lsls	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e00e      	b.n	8000c4e <_ZN2OPC1EP12GPIO_TypeDefh4MODE+0x1e2>
		}
		else
		{
			Port_->CRH |=(OP_AF50MHZ<<((Pin_ * BIT_per_PIN)-BIT_per_REG));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6859      	ldr	r1, [r3, #4]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220b      	movs	r2, #11
 8000c44:	409a      	lsls	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	605a      	str	r2, [r3, #4]
		}
	}

}
			OFF();
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f000 f824 	bl	8000c9c <_ZN2OP3OFFEv>
		}
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40010800 	.word	0x40010800
 8000c64:	20002938 	.word	0x20002938
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	20002939 	.word	0x20002939

08000c70 <_ZN2OP2ONEv>:


	void OP::ON()
	{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
		Port_->ODR|=(1<<Pin_);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	4619      	mov	r1, r3
 8000c84:	2301      	movs	r3, #1
 8000c86:	408b      	lsls	r3, r1
 8000c88:	4619      	mov	r1, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	60da      	str	r2, [r3, #12]
	}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <_ZN2OP3OFFEv>:
	void OP::OFF()
	{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
		Port_->ODR&=~(1<<Pin_);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	791b      	ldrb	r3, [r3, #4]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	408b      	lsls	r3, r1
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	60da      	str	r2, [r3, #12]
	}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <_ZN2OPD1Ev>:
	void OP::TOGGLE()
	{
		Port_->ODR ^=(1<<Pin_);
	}

	OP::~OP()
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	{
		OFF();
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffe2 	bl	8000c9c <_ZN2OP3OFFEv>
	}
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3b04      	subs	r3, #4
 8000d02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	f023 0201 	bic.w	r2, r3, #1
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3b04      	subs	r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000d14:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <pxPortInitialiseStack+0x54>)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3b14      	subs	r3, #20
 8000d1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3b20      	subs	r3, #32
 8000d2a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	08000d3d 	.word	0x08000d3d

08000d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000d46:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8000d4a:	f383 8811 	msr	BASEPRI, r3
 8000d4e:	f3bf 8f6f 	isb	sy
 8000d52:	f3bf 8f4f 	dsb	sy
 8000d56:	607b      	str	r3, [r7, #4]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000d58:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000d5a:	bf00      	nop
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0fc      	beq.n	8000d5c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
	...

08000d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <pxCurrentTCBConst2>)
 8000d72:	6819      	ldr	r1, [r3, #0]
 8000d74:	6808      	ldr	r0, [r1, #0]
 8000d76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d7a:	f380 8809 	msr	PSP, r0
 8000d7e:	f3bf 8f6f 	isb	sy
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	f380 8811 	msr	BASEPRI, r0
 8000d8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000d8e:	4770      	bx	lr

08000d90 <pxCurrentTCBConst2>:
 8000d90:	20002940 	.word	0x20002940
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop

08000d98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000d98:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <prvPortStartFirstTask+0x1c>)
 8000d9a:	6800      	ldr	r0, [r0, #0]
 8000d9c:	6800      	ldr	r0, [r0, #0]
 8000d9e:	f380 8808 	msr	MSP, r0
 8000da2:	b662      	cpsie	i
 8000da4:	b661      	cpsie	f
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	f3bf 8f6f 	isb	sy
 8000dae:	df00      	svc	0
 8000db0:	bf00      	nop
 8000db2:	0000      	.short	0x0000
 8000db4:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop

08000dbc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <xPortStartScheduler+0x4c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <xPortStartScheduler+0x50>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8000e0c <xPortStartScheduler+0x50>)
 8000dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8000dd2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <xPortStartScheduler+0x50>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e0c <xPortStartScheduler+0x50>)
 8000dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000dde:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <xPortStartScheduler+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000de6:	f000 f891 	bl	8000f0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <xPortStartScheduler+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000df0:	f7ff ffd2 	bl	8000d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000df4:	f001 f848 	bl	8001e88 <vTaskSwitchContext>
    prvTaskExitError();
 8000df8:	f7ff ffa0 	bl	8000d3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000ed08 	.word	0xe000ed08
 8000e0c:	e000ed20 	.word	0xe000ed20
 8000e10:	e000ed1c 	.word	0xe000ed1c
 8000e14:	20000008 	.word	0x20000008

08000e18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
    __asm volatile
 8000e1e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
 8000e2e:	607b      	str	r3, [r7, #4]
}
 8000e30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <vPortEnterCritical+0x30>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a03      	ldr	r2, [pc, #12]	@ (8000e48 <vPortEnterCritical+0x30>)
 8000e3a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <vPortExitCritical+0x30>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <vPortExitCritical+0x30>)
 8000e5a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000e5c:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <vPortExitCritical+0x30>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d105      	bne.n	8000e70 <vPortExitCritical+0x24>
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000e6e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008

08000e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000e80:	f3ef 8009 	mrs	r0, PSP
 8000e84:	f3bf 8f6f 	isb	sy
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <pxCurrentTCBConst>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e90:	6010      	str	r0, [r2, #0]
 8000e92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000e96:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8000e9a:	f380 8811 	msr	BASEPRI, r0
 8000e9e:	f000 fff3 	bl	8001e88 <vTaskSwitchContext>
 8000ea2:	f04f 0000 	mov.w	r0, #0
 8000ea6:	f380 8811 	msr	BASEPRI, r0
 8000eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	6808      	ldr	r0, [r1, #0]
 8000eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000eb6:	f380 8809 	msr	PSP, r0
 8000eba:	f3bf 8f6f 	isb	sy
 8000ebe:	4770      	bx	lr

08000ec0 <pxCurrentTCBConst>:
 8000ec0:	20002940 	.word	0x20002940
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop

08000ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
    __asm volatile
 8000ece:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8000ed2:	f383 8811 	msr	BASEPRI, r3
 8000ed6:	f3bf 8f6f 	isb	sy
 8000eda:	f3bf 8f4f 	dsb	sy
 8000ede:	607b      	str	r3, [r7, #4]
}
 8000ee0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000ee2:	f000 fec9 	bl	8001c78 <xTaskIncrementTick>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <SysTick_Handler+0x40>)
 8000eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f383 8811 	msr	BASEPRI, r3
}
 8000efe:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	e000ed04 	.word	0xe000ed04

08000f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <vPortSetupTimerInterrupt+0x28>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <vPortSetupTimerInterrupt+0x2c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <vPortSetupTimerInterrupt+0x30>)
 8000f1e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f22:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <vPortSetupTimerInterrupt+0x28>)
 8000f26:	2207      	movs	r2, #7
 8000f28:	601a      	str	r2, [r3, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010
 8000f38:	e000e018 	.word	0xe000e018
 8000f3c:	e000e014 	.word	0xe000e014

08000f40 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d05d      	beq.n	8001014 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d059      	beq.n	8001014 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f68:	2100      	movs	r1, #0
 8000f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d000      	beq.n	8000f74 <xQueueGenericReset+0x34>
 8000f72:	2101      	movs	r1, #1
 8000f74:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d14c      	bne.n	8001014 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8000f7a:	f7ff ff4d 	bl	8000e18 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000f8a:	fb01 f303 	mul.w	r3, r1, r3
 8000f8e:	441a      	add	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2200      	movs	r2, #0
 8000f98:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000faa:	3b01      	subs	r3, #1
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000fb0:	fb01 f303 	mul.w	r3, r1, r3
 8000fb4:	441a      	add	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	22ff      	movs	r2, #255	@ 0xff
 8000fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	22ff      	movs	r2, #255	@ 0xff
 8000fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d114      	bne.n	8000ffa <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d01a      	beq.n	800100e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3310      	adds	r3, #16
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 ffaf 	bl	8001f40 <xTaskRemoveFromEventList>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d012      	beq.n	800100e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <xQueueGenericReset+0xe4>)
 8000fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	f3bf 8f6f 	isb	sy
 8000ff8:	e009      	b.n	800100e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3310      	adds	r3, #16
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa7c 	bl	80004fc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	3324      	adds	r3, #36	@ 0x24
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa77 	bl	80004fc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800100e:	f7ff ff1d 	bl	8000e4c <vPortExitCritical>
 8001012:	e001      	b.n	8001018 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8001018:	68fb      	ldr	r3, [r7, #12]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000ed04 	.word	0xe000ed04

08001028 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af02      	add	r7, sp, #8
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	4613      	mov	r3, r2
 8001034:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d02d      	beq.n	800109c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001040:	2100      	movs	r1, #0
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	fba3 2302 	umull	r2, r3, r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d000      	beq.n	8001050 <xQueueGenericCreate+0x28>
 800104e:	2101      	movs	r1, #1
 8001050:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001052:	2b00      	cmp	r3, #0
 8001054:	d122      	bne.n	800109c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800105e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001062:	d81b      	bhi.n	800109c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	3350      	adds	r3, #80	@ 0x50
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f920 	bl	80002b8 <pvPortMalloc>
 8001078:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00d      	beq.n	800109c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3350      	adds	r3, #80	@ 0x50
 8001088:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f805 	bl	80010a6 <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800109c:	69fb      	ldr	r3, [r7, #28]
    }
 800109e:	4618      	mov	r0, r3
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e002      	b.n	80010c8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010d4:	2101      	movs	r1, #1
 80010d6:	69b8      	ldr	r0, [r7, #24]
 80010d8:	f7ff ff32 	bl	8000f40 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	78fa      	ldrb	r2, [r7, #3]
 80010e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001102:	f7ff fe89 	bl	8000e18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800110e:	429a      	cmp	r2, r3
 8001110:	d302      	bcc.n	8001118 <xQueueGenericSend+0x2c>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d129      	bne.n	800116c <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	6a38      	ldr	r0, [r7, #32]
 800111e:	f000 f931 	bl	8001384 <prvCopyDataToQueue>
 8001122:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	2b00      	cmp	r3, #0
 800112a:	d010      	beq.n	800114e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	3324      	adds	r3, #36	@ 0x24
 8001130:	4618      	mov	r0, r3
 8001132:	f000 ff05 	bl	8001f40 <xTaskRemoveFromEventList>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800113c:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <xQueueGenericSend+0x150>)
 800113e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	f3bf 8f4f 	dsb	sy
 8001148:	f3bf 8f6f 	isb	sy
 800114c:	e00a      	b.n	8001164 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001154:	4b39      	ldr	r3, [pc, #228]	@ (800123c <xQueueGenericSend+0x150>)
 8001156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001164:	f7ff fe72 	bl	8000e4c <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8001168:	2301      	movs	r3, #1
 800116a:	e063      	b.n	8001234 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001172:	f7ff fe6b 	bl	8000e4c <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8001176:	2300      	movs	r3, #0
 8001178:	e05c      	b.n	8001234 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f000 ffa5 	bl	80020d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800118a:	2301      	movs	r3, #1
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800118e:	f7ff fe5d 	bl	8000e4c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001192:	f000 fc6b 	bl	8001a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001196:	f7ff fe3f 	bl	8000e18 <vPortEnterCritical>
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a6:	d103      	bne.n	80011b0 <xQueueGenericSend+0xc4>
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d103      	bne.n	80011c6 <xQueueGenericSend+0xda>
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011c6:	f7ff fe41 	bl	8000e4c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011ca:	1d3a      	adds	r2, r7, #4
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 ff94 	bl	8002100 <xTaskCheckForTimeOut>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d124      	bne.n	8001228 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80011de:	6a38      	ldr	r0, [r7, #32]
 80011e0:	f000 f9c8 	bl	8001574 <prvIsQueueFull>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d018      	beq.n	800121c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	3310      	adds	r3, #16
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fe8e 	bl	8001f14 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80011f8:	6a38      	ldr	r0, [r7, #32]
 80011fa:	f000 f953 	bl	80014a4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80011fe:	f000 fc43 	bl	8001a88 <xTaskResumeAll>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f af7c 	bne.w	8001102 <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <xQueueGenericSend+0x150>)
 800120c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	f3bf 8f4f 	dsb	sy
 8001216:	f3bf 8f6f 	isb	sy
 800121a:	e772      	b.n	8001102 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800121c:	6a38      	ldr	r0, [r7, #32]
 800121e:	f000 f941 	bl	80014a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001222:	f000 fc31 	bl	8001a88 <xTaskResumeAll>
 8001226:	e76c      	b.n	8001102 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001228:	6a38      	ldr	r0, [r7, #32]
 800122a:	f000 f93b 	bl	80014a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800122e:	f000 fc2b 	bl	8001a88 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8001232:	2300      	movs	r3, #0
        }
    }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3728      	adds	r7, #40	@ 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	e000ed04 	.word	0xe000ed04

08001240 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001254:	f7ff fde0 	bl	8000e18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800125c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01f      	beq.n	80012a4 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6a38      	ldr	r0, [r7, #32]
 8001268:	f000 f8f6 	bl	8001458 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00f      	beq.n	800129c <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	3310      	adds	r3, #16
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fe5d 	bl	8001f40 <xTaskRemoveFromEventList>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800128c:	4b3c      	ldr	r3, [pc, #240]	@ (8001380 <xQueueReceive+0x140>)
 800128e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f3bf 8f4f 	dsb	sy
 8001298:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800129c:	f7ff fdd6 	bl	8000e4c <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e069      	b.n	8001378 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80012aa:	f7ff fdcf 	bl	8000e4c <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e062      	b.n	8001378 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 ff09 	bl	80020d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80012c2:	2301      	movs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80012c6:	f7ff fdc1 	bl	8000e4c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80012ca:	f000 fbcf 	bl	8001a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80012ce:	f7ff fda3 	bl	8000e18 <vPortEnterCritical>
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012de:	d103      	bne.n	80012e8 <xQueueReceive+0xa8>
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d103      	bne.n	80012fe <xQueueReceive+0xbe>
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80012fe:	f7ff fda5 	bl	8000e4c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001302:	1d3a      	adds	r2, r7, #4
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fef8 	bl	8002100 <xTaskCheckForTimeOut>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d123      	bne.n	800135e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001316:	6a38      	ldr	r0, [r7, #32]
 8001318:	f000 f916 	bl	8001548 <prvIsQueueEmpty>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d017      	beq.n	8001352 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	3324      	adds	r3, #36	@ 0x24
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fdf2 	bl	8001f14 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001330:	6a38      	ldr	r0, [r7, #32]
 8001332:	f000 f8b7 	bl	80014a4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001336:	f000 fba7 	bl	8001a88 <xTaskResumeAll>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d189      	bne.n	8001254 <xQueueReceive+0x14>
                {
                    taskYIELD_WITHIN_API();
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <xQueueReceive+0x140>)
 8001342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f3bf 8f4f 	dsb	sy
 800134c:	f3bf 8f6f 	isb	sy
 8001350:	e780      	b.n	8001254 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001352:	6a38      	ldr	r0, [r7, #32]
 8001354:	f000 f8a6 	bl	80014a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001358:	f000 fb96 	bl	8001a88 <xTaskResumeAll>
 800135c:	e77a      	b.n	8001254 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800135e:	6a38      	ldr	r0, [r7, #32]
 8001360:	f000 f8a0 	bl	80014a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001364:	f000 fb90 	bl	8001a88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001368:	6a38      	ldr	r0, [r7, #32]
 800136a:	f000 f8ed 	bl	8001548 <prvIsQueueEmpty>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	f43f af6f 	beq.w	8001254 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001376:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001378:	4618      	mov	r0, r3
 800137a:	3728      	adds	r7, #40	@ 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	e000ed04 	.word	0xe000ed04

08001384 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001398:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d14d      	bne.n	8001446 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 ffac 	bl	800230c <xTaskPriorityDisinherit>
 80013b4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e043      	b.n	8001446 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d119      	bne.n	80013f8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6858      	ldr	r0, [r3, #4]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	461a      	mov	r2, r3
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	f001 fc00 	bl	8002bd4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	441a      	add	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d32b      	bcc.n	8001446 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	e026      	b.n	8001446 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	68d8      	ldr	r0, [r3, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	461a      	mov	r2, r3
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	f001 fbe6 	bl	8002bd4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	425b      	negs	r3, r3
 8001412:	441a      	add	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	425b      	negs	r3, r3
 800142e:	441a      	add	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d105      	bne.n	8001446 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	3b01      	subs	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800144e:	697b      	ldr	r3, [r7, #20]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	2b00      	cmp	r3, #0
 8001468:	d018      	beq.n	800149c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	441a      	add	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	429a      	cmp	r2, r3
 8001482:	d303      	bcc.n	800148c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68d9      	ldr	r1, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	461a      	mov	r2, r3
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f001 fb9c 	bl	8002bd4 <memcpy>
    }
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80014ac:	f7ff fcb4 	bl	8000e18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014b6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80014b8:	e011      	b.n	80014de <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d012      	beq.n	80014e8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3324      	adds	r3, #36	@ 0x24
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd3a 	bl	8001f40 <xTaskRemoveFromEventList>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80014d2:	f000 fe5f 	bl	8002194 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3b01      	subs	r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	dce9      	bgt.n	80014ba <prvUnlockQueue+0x16>
 80014e6:	e000      	b.n	80014ea <prvUnlockQueue+0x46>
                    break;
 80014e8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	22ff      	movs	r2, #255	@ 0xff
 80014ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80014f2:	f7ff fcab 	bl	8000e4c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80014f6:	f7ff fc8f 	bl	8000e18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001500:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001502:	e011      	b.n	8001528 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d012      	beq.n	8001532 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3310      	adds	r3, #16
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fd15 	bl	8001f40 <xTaskRemoveFromEventList>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800151c:	f000 fe3a 	bl	8002194 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	3b01      	subs	r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800152c:	2b00      	cmp	r3, #0
 800152e:	dce9      	bgt.n	8001504 <prvUnlockQueue+0x60>
 8001530:	e000      	b.n	8001534 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001532:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	22ff      	movs	r2, #255	@ 0xff
 8001538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800153c:	f7ff fc86 	bl	8000e4c <vPortExitCritical>
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001550:	f7ff fc62 	bl	8000e18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800155c:	2301      	movs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e001      	b.n	8001566 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001566:	f7ff fc71 	bl	8000e4c <vPortExitCritical>

    return xReturn;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800157c:	f7ff fc4c 	bl	8000e18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001588:	429a      	cmp	r2, r3
 800158a:	d102      	bne.n	8001592 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800158c:	2301      	movs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	e001      	b.n	8001596 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001596:	f7ff fc59 	bl	8000e4c <vPortExitCritical>

    return xReturn;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <_kill>:

int _kill(int pid, int sig)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015bc:	f001 fade 	bl	8002b7c <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2216      	movs	r2, #22
 80015c4:	601a      	str	r2, [r3, #0]
  return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_exit>:

void _exit (int status)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015da:	f04f 31ff 	mov.w	r1, #4294967295
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffe7 	bl	80015b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <_exit+0x12>

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f001 fab0 	bl	8002b7c <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20005000 	.word	0x20005000
 8001648:	00000400 	.word	0x00000400
 800164c:	2000293c 	.word	0x2000293c
 8001650:	20002bc0 	.word	0x20002bc0

08001654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	@ 0x28
 8001664:	af04      	add	r7, sp, #16
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fe20 	bl	80002b8 <pvPortMalloc>
 8001678:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001680:	205c      	movs	r0, #92	@ 0x5c
 8001682:	f7fe fe19 	bl	80002b8 <pvPortMalloc>
 8001686:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800168e:	225c      	movs	r2, #92	@ 0x5c
 8001690:	2100      	movs	r1, #0
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f001 fa16 	bl	8002ac4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	631a      	str	r2, [r3, #48]	@ 0x30
 800169e:	e005      	b.n	80016ac <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80016a0:	6938      	ldr	r0, [r7, #16]
 80016a2:	f7fe feb7 	bl	8000414 <vPortFree>
 80016a6:	e001      	b.n	80016ac <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00d      	beq.n	80016ce <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80016b2:	2300      	movs	r3, #0
 80016b4:	9303      	str	r3, [sp, #12]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f828 	bl	800171e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80016ce:	697b      	ldr	r3, [r7, #20]
    }
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af02      	add	r7, sp, #8
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff ffb3 	bl	8001660 <prvCreateTask>
 80016fa:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001702:	6938      	ldr	r0, [r7, #16]
 8001704:	f000 f87c 	bl	8001800 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e002      	b.n	8001714 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001714:	697b      	ldr	r3, [r7, #20]
    }
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800172c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	21a5      	movs	r1, #165	@ 0xa5
 8001738:	f001 f9c4 	bl	8002ac4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800173c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001746:	3b01      	subs	r3, #1
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f023 0307 	bic.w	r3, r3, #7
 8001754:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01e      	beq.n	800179a <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e012      	b.n	8001788 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	4413      	add	r3, r2
 8001768:	7819      	ldrb	r1, [r3, #0]
 800176a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4413      	add	r3, r2
 8001770:	3334      	adds	r3, #52	@ 0x34
 8001772:	460a      	mov	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	d9e9      	bls.n	8001762 <prvInitialiseNewTask+0x44>
 800178e:	e000      	b.n	8001792 <prvInitialiseNewTask+0x74>
            {
                break;
 8001790:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d901      	bls.n	80017a4 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80017a0:	2305      	movs	r3, #5
 80017a2:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80017a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a6:	6a3a      	ldr	r2, [r7, #32]
 80017a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80017aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ac:	6a3a      	ldr	r2, [r7, #32]
 80017ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	3304      	adds	r3, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fec0 	bl	800053a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80017ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017bc:	3318      	adds	r3, #24
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe febb 	bl	800053a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017c8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f1c3 0206 	rsb	r2, r3, #6
 80017d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	6938      	ldr	r0, [r7, #16]
 80017e0:	f7ff fa80 	bl	8000ce4 <pxPortInitialiseStack>
 80017e4:	4602      	mov	r2, r0
 80017e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001808:	f7ff fb06 	bl	8000e18 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800180c:	4b41      	ldr	r3, [pc, #260]	@ (8001914 <prvAddNewTaskToReadyList+0x114>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	4a40      	ldr	r2, [pc, #256]	@ (8001914 <prvAddNewTaskToReadyList+0x114>)
 8001814:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001816:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <prvAddNewTaskToReadyList+0x118>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800181e:	4a3e      	ldr	r2, [pc, #248]	@ (8001918 <prvAddNewTaskToReadyList+0x118>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001824:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <prvAddNewTaskToReadyList+0x114>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d110      	bne.n	800184e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800182c:	f000 fcd6 	bl	80021dc <prvInitialiseTaskLists>
 8001830:	e00d      	b.n	800184e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001832:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <prvAddNewTaskToReadyList+0x11c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800183a:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <prvAddNewTaskToReadyList+0x118>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	429a      	cmp	r2, r3
 8001846:	d802      	bhi.n	800184e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001848:	4a33      	ldr	r2, [pc, #204]	@ (8001918 <prvAddNewTaskToReadyList+0x118>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800184e:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <prvAddNewTaskToReadyList+0x120>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a32      	ldr	r2, [pc, #200]	@ (8001920 <prvAddNewTaskToReadyList+0x120>)
 8001856:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001858:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <prvAddNewTaskToReadyList+0x120>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	2201      	movs	r2, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	4b2e      	ldr	r3, [pc, #184]	@ (8001924 <prvAddNewTaskToReadyList+0x124>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	4a2d      	ldr	r2, [pc, #180]	@ (8001924 <prvAddNewTaskToReadyList+0x124>)
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001876:	492c      	ldr	r1, [pc, #176]	@ (8001928 <prvAddNewTaskToReadyList+0x128>)
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	3304      	adds	r3, #4
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	3204      	adds	r2, #4
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001928 <prvAddNewTaskToReadyList+0x128>)
 80018b6:	441a      	add	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c0:	4919      	ldr	r1, [pc, #100]	@ (8001928 <prvAddNewTaskToReadyList+0x128>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	4814      	ldr	r0, [pc, #80]	@ (8001928 <prvAddNewTaskToReadyList+0x128>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4403      	add	r3, r0
 80018e0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80018e2:	f7ff fab3 	bl	8000e4c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <prvAddNewTaskToReadyList+0x11c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00e      	beq.n	800190c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <prvAddNewTaskToReadyList+0x118>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <prvAddNewTaskToReadyList+0x10c>
 80018fc:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <prvAddNewTaskToReadyList+0x12c>)
 80018fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20002a2c 	.word	0x20002a2c
 8001918:	20002940 	.word	0x20002940
 800191c:	20002a38 	.word	0x20002a38
 8001920:	20002a48 	.word	0x20002a48
 8001924:	20002a34 	.word	0x20002a34
 8001928:	20002944 	.word	0x20002944
 800192c:	e000ed04 	.word	0xe000ed04

08001930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 8001942:	f000 f893 	bl	8001a6c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001946:	2100      	movs	r1, #0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fd63 	bl	8002414 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800194e:	f000 f89b 	bl	8001a88 <xTaskResumeAll>
 8001952:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <vTaskDelay+0x44>)
 800195c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f3bf 8f4f 	dsb	sy
 8001966:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000ed04 	.word	0xe000ed04

08001978 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800197e:	2301      	movs	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e011      	b.n	80019b0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800198c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a04 <prvCreateIdleTasks+0x8c>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4413      	add	r3, r2
 8001992:	7819      	ldrb	r1, [r3, #0]
 8001994:	463a      	mov	r2, r7
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	4413      	add	r3, r2
 800199a:	460a      	mov	r2, r1
 800199c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800199e:	463a      	mov	r2, r7
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	ddea      	ble.n	800198c <prvCreateIdleTasks+0x14>
 80019b6:	e000      	b.n	80019ba <prvCreateIdleTasks+0x42>
        {
            break;
 80019b8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	e016      	b.n	80019ee <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <prvCreateIdleTasks+0x90>)
 80019c2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4a10      	ldr	r2, [pc, #64]	@ (8001a0c <prvCreateIdleTasks+0x94>)
 80019ca:	4413      	add	r3, r2
 80019cc:	4639      	mov	r1, r7
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019da:	6938      	ldr	r0, [r7, #16]
 80019dc:	f7ff fe7c 	bl	80016d8 <xTaskCreate>
 80019e0:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	3301      	adds	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	dde5      	ble.n	80019c0 <prvCreateIdleTasks+0x48>
 80019f4:	e000      	b.n	80019f8 <prvCreateIdleTasks+0x80>
        {
            break;
 80019f6:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80019f8:	69fb      	ldr	r3, [r7, #28]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	08002cdc 	.word	0x08002cdc
 8001a08:	080021ad 	.word	0x080021ad
 8001a0c:	20002a50 	.word	0x20002a50

08001a10 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001a16:	f7ff ffaf 	bl	8001978 <prvCreateIdleTasks>
 8001a1a:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d115      	bne.n	8001a4e <vTaskStartScheduler+0x3e>
    __asm volatile
 8001a22:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8001a26:	f383 8811 	msr	BASEPRI, r3
 8001a2a:	f3bf 8f6f 	isb	sy
 8001a2e:	f3bf 8f4f 	dsb	sy
 8001a32:	603b      	str	r3, [r7, #0]
}
 8001a34:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <vTaskStartScheduler+0x4c>)
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <vTaskStartScheduler+0x50>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <vTaskStartScheduler+0x54>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001a4a:	f7ff f9b7 	bl	8000dbc <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <vTaskStartScheduler+0x58>)
 8001a50:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20002a4c 	.word	0x20002a4c
 8001a60:	20002a38 	.word	0x20002a38
 8001a64:	20002a30 	.word	0x20002a30
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001a70:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <vTaskSuspendAll+0x18>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <vTaskSuspendAll+0x18>)
 8001a78:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20002a54 	.word	0x20002a54

08001a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001a96:	f7ff f9bf 	bl	8000e18 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c54 <xTaskResumeAll+0x1cc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	4a6b      	ldr	r2, [pc, #428]	@ (8001c54 <xTaskResumeAll+0x1cc>)
 8001aa6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c54 <xTaskResumeAll+0x1cc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 80ca 	bne.w	8001c46 <xTaskResumeAll+0x1be>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ab2:	4b69      	ldr	r3, [pc, #420]	@ (8001c58 <xTaskResumeAll+0x1d0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80c5 	beq.w	8001c46 <xTaskResumeAll+0x1be>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001abc:	e08e      	b.n	8001bdc <xTaskResumeAll+0x154>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001abe:	4b67      	ldr	r3, [pc, #412]	@ (8001c5c <xTaskResumeAll+0x1d4>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	6a12      	ldr	r2, [r2, #32]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	69d2      	ldr	r2, [r2, #28]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d103      	bne.n	8001af4 <xTaskResumeAll+0x6c>
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	6a1a      	ldr	r2, [r3, #32]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	68d2      	ldr	r2, [r2, #12]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	6892      	ldr	r2, [r2, #8]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d103      	bne.n	8001b32 <xTaskResumeAll+0xaa>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	2201      	movs	r2, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	4b45      	ldr	r3, [pc, #276]	@ (8001c60 <xTaskResumeAll+0x1d8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	4a43      	ldr	r2, [pc, #268]	@ (8001c60 <xTaskResumeAll+0x1d8>)
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b58:	4942      	ldr	r1, [pc, #264]	@ (8001c64 <xTaskResumeAll+0x1dc>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3304      	adds	r3, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	3204      	adds	r2, #4
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	1d1a      	adds	r2, r3, #4
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4a33      	ldr	r2, [pc, #204]	@ (8001c64 <xTaskResumeAll+0x1dc>)
 8001b98:	441a      	add	r2, r3
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba2:	4930      	ldr	r1, [pc, #192]	@ (8001c64 <xTaskResumeAll+0x1dc>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	482b      	ldr	r0, [pc, #172]	@ (8001c64 <xTaskResumeAll+0x1dc>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4403      	add	r3, r0
 8001bc2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <xTaskResumeAll+0x1e0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d904      	bls.n	8001bdc <xTaskResumeAll+0x154>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001bd2:	4a26      	ldr	r2, [pc, #152]	@ (8001c6c <xTaskResumeAll+0x1e4>)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <xTaskResumeAll+0x1d4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f af6c 	bne.w	8001abe <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <xTaskResumeAll+0x168>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001bec:	f000 fb74 	bl	80022d8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <xTaskResumeAll+0x1e8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <xTaskResumeAll+0x19a>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001bfc:	f000 f83c 	bl	8001c78 <xTaskIncrementTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <xTaskResumeAll+0x188>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001c06:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <xTaskResumeAll+0x1e4>)
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ef      	bne.n	8001bfc <xTaskResumeAll+0x174>

                            xPendedTicks = 0;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <xTaskResumeAll+0x1e8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <xTaskResumeAll+0x1e4>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <xTaskResumeAll+0x1be>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001c32:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <xTaskResumeAll+0x1e0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <xTaskResumeAll+0x1ec>)
 8001c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001c46:	f7ff f901 	bl	8000e4c <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001c4a:	69bb      	ldr	r3, [r7, #24]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20002a54 	.word	0x20002a54
 8001c58:	20002a2c 	.word	0x20002a2c
 8001c5c:	200029ec 	.word	0x200029ec
 8001c60:	20002a34 	.word	0x20002a34
 8001c64:	20002944 	.word	0x20002944
 8001c68:	20002940 	.word	0x20002940
 8001c6c:	20002a40 	.word	0x20002a40
 8001c70:	20002a3c 	.word	0x20002a3c
 8001c74:	e000ed04 	.word	0xe000ed04

08001c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001c82:	4b76      	ldr	r3, [pc, #472]	@ (8001e5c <xTaskIncrementTick+0x1e4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 80de 	bne.w	8001e48 <xTaskIncrementTick+0x1d0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c8c:	4b74      	ldr	r3, [pc, #464]	@ (8001e60 <xTaskIncrementTick+0x1e8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001c94:	4a72      	ldr	r2, [pc, #456]	@ (8001e60 <xTaskIncrementTick+0x1e8>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d110      	bne.n	8001cc2 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ca0:	4b70      	ldr	r3, [pc, #448]	@ (8001e64 <xTaskIncrementTick+0x1ec>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	4b70      	ldr	r3, [pc, #448]	@ (8001e68 <xTaskIncrementTick+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6e      	ldr	r2, [pc, #440]	@ (8001e64 <xTaskIncrementTick+0x1ec>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4a6e      	ldr	r2, [pc, #440]	@ (8001e68 <xTaskIncrementTick+0x1f0>)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b6d      	ldr	r3, [pc, #436]	@ (8001e6c <xTaskIncrementTick+0x1f4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a6c      	ldr	r2, [pc, #432]	@ (8001e6c <xTaskIncrementTick+0x1f4>)
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	f000 fb0b 	bl	80022d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8001e70 <xTaskIncrementTick+0x1f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f0c0 80a8 	bcc.w	8001e1e <xTaskIncrementTick+0x1a6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cce:	4b65      	ldr	r3, [pc, #404]	@ (8001e64 <xTaskIncrementTick+0x1ec>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001cd8:	4b65      	ldr	r3, [pc, #404]	@ (8001e70 <xTaskIncrementTick+0x1f8>)
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295
 8001cde:	601a      	str	r2, [r3, #0]
                    break;
 8001ce0:	e09d      	b.n	8001e1e <xTaskIncrementTick+0x1a6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ce2:	4b60      	ldr	r3, [pc, #384]	@ (8001e64 <xTaskIncrementTick+0x1ec>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d203      	bcs.n	8001d02 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001cfa:	4a5d      	ldr	r2, [pc, #372]	@ (8001e70 <xTaskIncrementTick+0x1f8>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6013      	str	r3, [r2, #0]
                        break;
 8001d00:	e08d      	b.n	8001e1e <xTaskIncrementTick+0x1a6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68d2      	ldr	r2, [r2, #12]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	6892      	ldr	r2, [r2, #8]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3304      	adds	r3, #4
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d103      	bne.n	8001d30 <xTaskIncrementTick+0xb8>
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01e      	beq.n	8001d86 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	6a12      	ldr	r2, [r2, #32]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	69d2      	ldr	r2, [r2, #28]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d103      	bne.n	8001d76 <xTaskIncrementTick+0xfe>
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6a1a      	ldr	r2, [r3, #32]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <xTaskIncrementTick+0x1fc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	4a37      	ldr	r2, [pc, #220]	@ (8001e74 <xTaskIncrementTick+0x1fc>)
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d9c:	4936      	ldr	r1, [pc, #216]	@ (8001e78 <xTaskIncrementTick+0x200>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	3204      	adds	r2, #4
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4a27      	ldr	r2, [pc, #156]	@ (8001e78 <xTaskIncrementTick+0x200>)
 8001ddc:	441a      	add	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de6:	4924      	ldr	r1, [pc, #144]	@ (8001e78 <xTaskIncrementTick+0x200>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	481f      	ldr	r0, [pc, #124]	@ (8001e78 <xTaskIncrementTick+0x200>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4403      	add	r3, r0
 8001e06:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <xTaskIncrementTick+0x204>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	429a      	cmp	r2, r3
 8001e14:	f67f af5b 	bls.w	8001cce <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e1c:	e757      	b.n	8001cce <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <xTaskIncrementTick+0x204>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e24:	4914      	ldr	r1, [pc, #80]	@ (8001e78 <xTaskIncrementTick+0x200>)
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d901      	bls.n	8001e3a <xTaskIncrementTick+0x1c2>
                {
                    xSwitchRequired = pdTRUE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <xTaskIncrementTick+0x208>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <xTaskIncrementTick+0x1da>
                {
                    xSwitchRequired = pdTRUE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e004      	b.n	8001e52 <xTaskIncrementTick+0x1da>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <xTaskIncrementTick+0x20c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <xTaskIncrementTick+0x20c>)
 8001e50:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001e52:	69fb      	ldr	r3, [r7, #28]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20002a54 	.word	0x20002a54
 8001e60:	20002a30 	.word	0x20002a30
 8001e64:	200029e4 	.word	0x200029e4
 8001e68:	200029e8 	.word	0x200029e8
 8001e6c:	20002a44 	.word	0x20002a44
 8001e70:	20002a4c 	.word	0x20002a4c
 8001e74:	20002a34 	.word	0x20002a34
 8001e78:	20002944 	.word	0x20002944
 8001e7c:	20002940 	.word	0x20002940
 8001e80:	20002a40 	.word	0x20002a40
 8001e84:	20002a3c 	.word	0x20002a3c

08001e88 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <vTaskSwitchContext+0x78>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <vTaskSwitchContext+0x7c>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001e9c:	e02b      	b.n	8001ef6 <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <vTaskSwitchContext+0x7c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <vTaskSwitchContext+0x80>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f1c3 031f 	rsb	r3, r3, #31
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4a11      	ldr	r2, [pc, #68]	@ (8001f0c <vTaskSwitchContext+0x84>)
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	3308      	adds	r3, #8
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d103      	bne.n	8001ee8 <vTaskSwitchContext+0x60>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <vTaskSwitchContext+0x88>)
 8001ef0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <vTaskSwitchContext+0x88>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
    }
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20002a54 	.word	0x20002a54
 8001f04:	20002a40 	.word	0x20002a40
 8001f08:	20002a34 	.word	0x20002a34
 8001f0c:	20002944 	.word	0x20002944
 8001f10:	20002940 	.word	0x20002940

08001f14 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <vTaskPlaceOnEventList+0x28>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3318      	adds	r3, #24
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fb13 	bl	8000552 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f000 fa70 	bl	8002414 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20002940 	.word	0x20002940

08001f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	6a12      	ldr	r2, [r2, #32]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	69d2      	ldr	r2, [r2, #28]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	3318      	adds	r3, #24
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d103      	bne.n	8001f7e <xTaskRemoveFromEventList+0x3e>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6a1a      	ldr	r2, [r3, #32]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2200      	movs	r2, #0
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80020bc <xTaskRemoveFromEventList+0x17c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d160      	bne.n	8002058 <xTaskRemoveFromEventList+0x118>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	68d2      	ldr	r2, [r2, #12]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d103      	bne.n	8001fc4 <xTaskRemoveFromEventList+0x84>
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	1e5a      	subs	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	2201      	movs	r2, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <xTaskRemoveFromEventList+0x180>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	4a37      	ldr	r2, [pc, #220]	@ (80020c0 <xTaskRemoveFromEventList+0x180>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fea:	4936      	ldr	r1, [pc, #216]	@ (80020c4 <xTaskRemoveFromEventList+0x184>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	3204      	adds	r2, #4
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1d1a      	adds	r2, r3, #4
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4a26      	ldr	r2, [pc, #152]	@ (80020c4 <xTaskRemoveFromEventList+0x184>)
 800202a:	441a      	add	r2, r3
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	615a      	str	r2, [r3, #20]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002034:	4923      	ldr	r1, [pc, #140]	@ (80020c4 <xTaskRemoveFromEventList+0x184>)
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	481e      	ldr	r0, [pc, #120]	@ (80020c4 <xTaskRemoveFromEventList+0x184>)
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4403      	add	r3, r0
 8002054:	6019      	str	r1, [r3, #0]
 8002056:	e01b      	b.n	8002090 <xTaskRemoveFromEventList+0x150>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002058:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <xTaskRemoveFromEventList+0x188>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	61da      	str	r2, [r3, #28]
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	621a      	str	r2, [r3, #32]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	3218      	adds	r2, #24
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f103 0218 	add.w	r2, r3, #24
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	4a11      	ldr	r2, [pc, #68]	@ (80020c8 <xTaskRemoveFromEventList+0x188>)
 8002084:	629a      	str	r2, [r3, #40]	@ 0x28
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <xTaskRemoveFromEventList+0x188>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <xTaskRemoveFromEventList+0x188>)
 800208e:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002094:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <xTaskRemoveFromEventList+0x18c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	429a      	cmp	r2, r3
 800209c:	d905      	bls.n	80020aa <xTaskRemoveFromEventList+0x16a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800209e:	2301      	movs	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <xTaskRemoveFromEventList+0x190>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e001      	b.n	80020ae <xTaskRemoveFromEventList+0x16e>
        }
        else
        {
            xReturn = pdFALSE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80020ae:	69fb      	ldr	r3, [r7, #28]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3724      	adds	r7, #36	@ 0x24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20002a54 	.word	0x20002a54
 80020c0:	20002a34 	.word	0x20002a34
 80020c4:	20002944 	.word	0x20002944
 80020c8:	200029ec 	.word	0x200029ec
 80020cc:	20002940 	.word	0x20002940
 80020d0:	20002a40 	.word	0x20002a40

080020d4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <vTaskInternalSetTimeOutState+0x24>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <vTaskInternalSetTimeOutState+0x28>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20002a44 	.word	0x20002a44
 80020fc:	20002a30 	.word	0x20002a30

08002100 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800210a:	f7fe fe85 	bl	8000e18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800210e:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <xTaskCheckForTimeOut+0x8c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d102      	bne.n	800212e <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e026      	b.n	800217c <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <xTaskCheckForTimeOut+0x90>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d00a      	beq.n	8002150 <xTaskCheckForTimeOut+0x50>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d305      	bcc.n	8002150 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002144:	2301      	movs	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e015      	b.n	800217c <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	429a      	cmp	r2, r3
 8002158:	d20b      	bcs.n	8002172 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffb4 	bl	80020d4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e004      	b.n	800217c <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800217c:	f7fe fe66 	bl	8000e4c <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002180:	697b      	ldr	r3, [r7, #20]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20002a30 	.word	0x20002a30
 8002190:	20002a44 	.word	0x20002a44

08002194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002198:	4b03      	ldr	r3, [pc, #12]	@ (80021a8 <vTaskMissedYield+0x14>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20002a40 	.word	0x20002a40

080021ac <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80021b4:	f000 f852 	bl	800225c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <prvIdleTask+0x28>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d9f9      	bls.n	80021b4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <prvIdleTask+0x2c>)
 80021c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80021d0:	e7f0      	b.n	80021b4 <prvIdleTask+0x8>
 80021d2:	bf00      	nop
 80021d4:	20002944 	.word	0x20002944
 80021d8:	e000ed04 	.word	0xe000ed04

080021dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	e00c      	b.n	8002202 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <prvInitialiseTaskLists+0x60>)
 80021f4:	4413      	add	r3, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f980 	bl	80004fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3301      	adds	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d9ef      	bls.n	80021e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002208:	480d      	ldr	r0, [pc, #52]	@ (8002240 <prvInitialiseTaskLists+0x64>)
 800220a:	f7fe f977 	bl	80004fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800220e:	480d      	ldr	r0, [pc, #52]	@ (8002244 <prvInitialiseTaskLists+0x68>)
 8002210:	f7fe f974 	bl	80004fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <prvInitialiseTaskLists+0x6c>)
 8002216:	f7fe f971 	bl	80004fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800221a:	480c      	ldr	r0, [pc, #48]	@ (800224c <prvInitialiseTaskLists+0x70>)
 800221c:	f7fe f96e 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002220:	480b      	ldr	r0, [pc, #44]	@ (8002250 <prvInitialiseTaskLists+0x74>)
 8002222:	f7fe f96b 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <prvInitialiseTaskLists+0x78>)
 8002228:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <prvInitialiseTaskLists+0x64>)
 800222a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <prvInitialiseTaskLists+0x7c>)
 800222e:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <prvInitialiseTaskLists+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20002944 	.word	0x20002944
 8002240:	200029bc 	.word	0x200029bc
 8002244:	200029d0 	.word	0x200029d0
 8002248:	200029ec 	.word	0x200029ec
 800224c:	20002a00 	.word	0x20002a00
 8002250:	20002a18 	.word	0x20002a18
 8002254:	200029e4 	.word	0x200029e4
 8002258:	200029e8 	.word	0x200029e8

0800225c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002262:	e019      	b.n	8002298 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002264:	f7fe fdd8 	bl	8000e18 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <prvCheckTasksWaitingTermination+0x50>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f9a4 	bl	80005c2 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800227a:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <prvCheckTasksWaitingTermination+0x54>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <prvCheckTasksWaitingTermination+0x54>)
 8002282:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <prvCheckTasksWaitingTermination+0x58>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3b01      	subs	r3, #1
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <prvCheckTasksWaitingTermination+0x58>)
 800228c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800228e:	f7fe fddd 	bl	8000e4c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f810 	bl	80022b8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <prvCheckTasksWaitingTermination+0x58>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e1      	bne.n	8002264 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20002a00 	.word	0x20002a00
 80022b0:	20002a2c 	.word	0x20002a2c
 80022b4:	20002a14 	.word	0x20002a14

080022b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f8a5 	bl	8000414 <vPortFree>
            vPortFree( pxTCB );
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe f8a2 	bl	8000414 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <prvResetNextTaskUnblockTime+0x2c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d104      	bne.n	80022f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <prvResetNextTaskUnblockTime+0x30>)
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022ee:	e005      	b.n	80022fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022f0:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <prvResetNextTaskUnblockTime+0x2c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a03      	ldr	r2, [pc, #12]	@ (8002308 <prvResetNextTaskUnblockTime+0x30>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	200029e4 	.word	0x200029e4
 8002308:	20002a4c 	.word	0x20002a4c

0800230c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d06e      	beq.n	8002400 <xTaskPriorityDisinherit+0xf4>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002326:	1e5a      	subs	r2, r3, #1
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	429a      	cmp	r2, r3
 8002336:	d063      	beq.n	8002400 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233c:	2b00      	cmp	r3, #0
 800233e:	d15f      	bne.n	8002400 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	3304      	adds	r3, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f93c 	bl	80005c2 <uxListRemove>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	2201      	movs	r2, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <xTaskPriorityDisinherit+0x100>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4013      	ands	r3, r2
 8002362:	4a2a      	ldr	r2, [pc, #168]	@ (800240c <xTaskPriorityDisinherit+0x100>)
 8002364:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	f1c3 0206 	rsb	r2, r3, #6
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	2201      	movs	r2, #1
 8002380:	409a      	lsls	r2, r3
 8002382:	4b22      	ldr	r3, [pc, #136]	@ (800240c <xTaskPriorityDisinherit+0x100>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	4a20      	ldr	r2, [pc, #128]	@ (800240c <xTaskPriorityDisinherit+0x100>)
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002390:	491f      	ldr	r1, [pc, #124]	@ (8002410 <xTaskPriorityDisinherit+0x104>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	3204      	adds	r2, #4
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1d1a      	adds	r2, r3, #4
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4a10      	ldr	r2, [pc, #64]	@ (8002410 <xTaskPriorityDisinherit+0x104>)
 80023d0:	441a      	add	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	615a      	str	r2, [r3, #20]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023da:	490d      	ldr	r1, [pc, #52]	@ (8002410 <xTaskPriorityDisinherit+0x104>)
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023ec:	1c59      	adds	r1, r3, #1
 80023ee:	4808      	ldr	r0, [pc, #32]	@ (8002410 <xTaskPriorityDisinherit+0x104>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4403      	add	r3, r0
 80023fa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002400:	697b      	ldr	r3, [r7, #20]
    }
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20002a34 	.word	0x20002a34
 8002410:	20002944 	.word	0x20002944

08002414 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002424:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <prvAddCurrentTaskToDelayedList+0xec>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800242a:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <prvAddCurrentTaskToDelayedList+0xf0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002430:	4b35      	ldr	r3, [pc, #212]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3304      	adds	r3, #4
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f8c3 	bl	80005c2 <uxListRemove>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10b      	bne.n	800245a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002442:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	2201      	movs	r2, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	4b2e      	ldr	r3, [pc, #184]	@ (800250c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4013      	ands	r3, r2
 8002456:	4a2d      	ldr	r2, [pc, #180]	@ (800250c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002458:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d124      	bne.n	80024ac <prvAddCurrentTaskToDelayedList+0x98>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d021      	beq.n	80024ac <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002468:	4b29      	ldr	r3, [pc, #164]	@ (8002510 <prvAddCurrentTaskToDelayedList+0xfc>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	3204      	adds	r2, #4
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	4b1e      	ldr	r3, [pc, #120]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1d1a      	adds	r2, r3, #4
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <prvAddCurrentTaskToDelayedList+0xfc>)
 800249c:	615a      	str	r2, [r3, #20]
 800249e:	4b1c      	ldr	r3, [pc, #112]	@ (8002510 <prvAddCurrentTaskToDelayedList+0xfc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002510 <prvAddCurrentTaskToDelayedList+0xfc>)
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80024aa:	e022      	b.n	80024f2 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80024c4:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3304      	adds	r3, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	6978      	ldr	r0, [r7, #20]
 80024ce:	f7fe f840 	bl	8000552 <vListInsert>
}
 80024d2:	e00e      	b.n	80024f2 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <prvAddCurrentTaskToDelayedList+0xf4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3304      	adds	r3, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	69b8      	ldr	r0, [r7, #24]
 80024de:	f7fe f838 	bl	8000552 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <prvAddCurrentTaskToDelayedList+0x100>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d202      	bcs.n	80024f2 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80024ec:	4a09      	ldr	r2, [pc, #36]	@ (8002514 <prvAddCurrentTaskToDelayedList+0x100>)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6013      	str	r3, [r2, #0]
}
 80024f2:	bf00      	nop
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20002a30 	.word	0x20002a30
 8002500:	200029e4 	.word	0x200029e4
 8002504:	200029e8 	.word	0x200029e8
 8002508:	20002940 	.word	0x20002940
 800250c:	20002a34 	.word	0x20002a34
 8002510:	20002a18 	.word	0x20002a18
 8002514:	20002a4c 	.word	0x20002a4c

08002518 <_ZN4UARTC1Ei>:
 *      Author: AHMED ABDELAZIZ
 */

#include "uart.h"

	UART::UART(int data)
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
	{
		if(this == reinterpret_cast<UART*>(UART1INS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a11      	ldr	r2, [pc, #68]	@ (800256c <_ZN4UARTC1Ei+0x54>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d104      	bne.n	8002534 <_ZN4UARTC1Ei+0x1c>
		{
			INIT(1);
 800252a:	2101      	movs	r1, #1
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f825 	bl	800257c <_ZN4UART4INITEi>
 8002532:	e015      	b.n	8002560 <_ZN4UARTC1Ei+0x48>
		}
		else if (this == reinterpret_cast<UART*>(UART2INS))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0e      	ldr	r2, [pc, #56]	@ (8002570 <_ZN4UARTC1Ei+0x58>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d104      	bne.n	8002546 <_ZN4UARTC1Ei+0x2e>
		{
			INIT(2);
 800253c:	2102      	movs	r1, #2
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f81c 	bl	800257c <_ZN4UART4INITEi>
 8002544:	e00c      	b.n	8002560 <_ZN4UARTC1Ei+0x48>
		}
		else if(this == reinterpret_cast<UART*>(UART3INS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <_ZN4UARTC1Ei+0x5c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d104      	bne.n	8002558 <_ZN4UARTC1Ei+0x40>
		{
			INIT(3);
 800254e:	2103      	movs	r1, #3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f813 	bl	800257c <_ZN4UART4INITEi>
 8002556:	e003      	b.n	8002560 <_ZN4UARTC1Ei+0x48>
		}
		else
		{
			Send(msg);
 8002558:	4907      	ldr	r1, [pc, #28]	@ (8002578 <_ZN4UARTC1Ei+0x60>)
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8b6 	bl	80026cc <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
		}
	}
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40013800 	.word	0x40013800
 8002570:	40004400 	.word	0x40004400
 8002574:	40004800 	.word	0x40004800
 8002578:	20002a58 	.word	0x20002a58

0800257c <_ZN4UART4INITEi>:
	void UART::INIT(int UART_NUMBER)
	{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
		switch(UART_NUMBER)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d047      	beq.n	800261c <_ZN4UART4INITEi+0xa0>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b03      	cmp	r3, #3
 8002590:	dc60      	bgt.n	8002654 <_ZN4UART4INITEi+0xd8>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d003      	beq.n	80025a0 <_ZN4UART4INITEi+0x24>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d022      	beq.n	80025e4 <_ZN4UART4INITEi+0x68>
			//Enable Transmission and Receiving
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
			CR1|=(1<<13); // USART Enable
			break;
	}
	}
 800259e:	e059      	b.n	8002654 <_ZN4UART4INITEi+0xd8>
			RCC->APB2ENR |= (1<<0) | (1<<2) | (1<<14);
 80025a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 80025a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025aa:	f043 0305 	orr.w	r3, r3, #5
 80025ae:	6193      	str	r3, [r2, #24]
			GPIOA->CRH |= (0x000B<<4); // PA9 OutPut AFIO TX
 80025b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002664 <_ZN4UART4INITEi+0xe8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002664 <_ZN4UART4INITEi+0xe8>)
 80025b6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80025ba:	6053      	str	r3, [r2, #4]
			GPIOA->CRH |= (1<<10); //PA10 InPut Floating RX
 80025bc:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <_ZN4UART4INITEi+0xe8>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a28      	ldr	r2, [pc, #160]	@ (8002664 <_ZN4UART4INITEi+0xe8>)
 80025c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025c6:	6053      	str	r3, [r2, #4]
			BRR = USART_div;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f240 3241 	movw	r2, #833	@ 0x341
 80025ce:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	220c      	movs	r2, #12
 80025d4:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60da      	str	r2, [r3, #12]
			break;
 80025e2:	e037      	b.n	8002654 <_ZN4UART4INITEi+0xd8>
			RCC->APB1ENR =(1<<17); // USART2
 80025e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 80025e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025ea:	61da      	str	r2, [r3, #28]
			RCC->APB2ENR |= (1<<0) | (1<<2); //  AFIO and PortA
 80025ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 80025f2:	f043 0305 	orr.w	r3, r3, #5
 80025f6:	6193      	str	r3, [r2, #24]
			GPIOA->CRL =(0x004B<<8);
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <_ZN4UART4INITEi+0xe8>)
 80025fa:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80025fe:	601a      	str	r2, [r3, #0]
			BRR=USART_div;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f240 3241 	movw	r2, #833	@ 0x341
 8002606:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	220c      	movs	r2, #12
 800260c:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60da      	str	r2, [r3, #12]
			break;
 800261a:	e01b      	b.n	8002654 <_ZN4UART4INITEi+0xd8>
			RCC->APB1ENR =(1<<18); // USART3
 800261c:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 800261e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002622:	61da      	str	r2, [r3, #28]
			RCC->APB2ENR |=(1<<0) | (1<<3); //AFIO & Port B
 8002624:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a0d      	ldr	r2, [pc, #52]	@ (8002660 <_ZN4UART4INITEi+0xe4>)
 800262a:	f043 0309 	orr.w	r3, r3, #9
 800262e:	6193      	str	r3, [r2, #24]
			GPIOB->CRH =(0x004B<<8); //
 8002630:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <_ZN4UART4INITEi+0xec>)
 8002632:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002636:	605a      	str	r2, [r3, #4]
			BRR=USART_div;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f240 3241 	movw	r2, #833	@ 0x341
 800263e:	609a      	str	r2, [r3, #8]
			CR1= (1<<2) |(1<<3); //Receiver Enable || Transmitter Enable
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	220c      	movs	r2, #12
 8002644:	60da      	str	r2, [r3, #12]
			CR1|=(1<<13); // USART Enable
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60da      	str	r2, [r3, #12]
			break;
 8002652:	bf00      	nop
	}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	40010800 	.word	0x40010800
 8002668:	40010c00 	.word	0x40010c00

0800266c <_ZN4UART4ReadEv>:
	char UART::Read()
	{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
		while(!(SR&(1<<5))); //Bit 5 RXNE: Read data register not empty
 8002674:	bf00      	nop
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f9      	beq.n	8002676 <_ZN4UART4ReadEv+0xa>
		unsigned char mread=USART1->DR &0x00ff;
 8002682:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <_ZN4UART4ReadEv+0x28>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	73fb      	strb	r3, [r7, #15]
		return mread; //DR &0x00FF;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
	}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40013800 	.word	0x40013800

08002698 <_ZN4UART4SendEc>:
	void UART::Send (char data)
	{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
		unsigned char mread=USART1->DR=data &0x00FF;
 80026a4:	4a08      	ldr	r2, [pc, #32]	@ (80026c8 <_ZN4UART4SendEc+0x30>)
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	6053      	str	r3, [r2, #4]
 80026aa:	73fb      	strb	r3, [r7, #15]
		while(!(SR&(1<<7)));
 80026ac:	bf00      	nop
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f9      	beq.n	80026ae <_ZN4UART4SendEc+0x16>
	}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40013800 	.word	0x40013800

080026cc <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	void UART::Send(const std::string& data) // (std::string data) Succeed
	// (std::string_view data) // (char* data) Failed ??!
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
		auto i{0};
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
		while(i!='\0')
 80026da:	e00a      	b.n	80026f2 <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
		{
			Send(data[i]);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4619      	mov	r1, r3
 80026e0:	6838      	ldr	r0, [r7, #0]
 80026e2:	f000 f8cf 	bl	8002884 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80026e6:	4603      	mov	r3, r0
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffd3 	bl	8002698 <_ZN4UART4SendEc>
		while(i!='\0')
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f1      	bne.n	80026dc <_ZN4UART4SendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
		}
	}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZN4UARTnwEj13UART_Instance>:
	void* UART::operator new(size_t, UART_Instance uart)
	{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
		return reinterpret_cast<void*>(uart); // return uart-instance as a pointer not as an Address.
 800270c:	683b      	ldr	r3, [r7, #0]
	}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <_Z41__static_initialization_and_destruction_0ii>:
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d115      	bne.n	8002754 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800272e:	4293      	cmp	r3, r2
 8002730:	d110      	bne.n	8002754 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f855 	bl	80027e6 <_ZNSaIcEC1Ev>
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	461a      	mov	r2, r3
 8002742:	490c      	ldr	r1, [pc, #48]	@ (8002774 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002744:	480c      	ldr	r0, [pc, #48]	@ (8002778 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002746:	f000 f8bb 	bl	80028c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f84a 	bl	80027e8 <_ZNSaIcED1Ev>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d107      	bne.n	800276a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002760:	4293      	cmp	r3, r2
 8002762:	d102      	bne.n	800276a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8002764:	4804      	ldr	r0, [pc, #16]	@ (8002778 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002766:	f000 f887 	bl	8002878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	08002ce4 	.word	0x08002ce4
 8002778:	20002a58 	.word	0x20002a58

0800277c <_GLOBAL__sub_I__ZN4UARTC2Ei>:
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
 8002780:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002784:	2001      	movs	r0, #1
 8002786:	f7ff ffc7 	bl	8002718 <_Z41__static_initialization_and_destruction_0ii>
 800278a:	bd80      	pop	{r7, pc}

0800278c <_GLOBAL__sub_D__ZN4UARTC2Ei>:
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
 8002790:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002794:	2000      	movs	r0, #0
 8002796:	f7ff ffbf 	bl	8002718 <_Z41__static_initialization_and_destruction_0ii>
 800279a:	bd80      	pop	{r7, pc}

0800279c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800279c:	f7fe ff5a 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a0:	480b      	ldr	r0, [pc, #44]	@ (80027d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027a2:	490c      	ldr	r1, [pc, #48]	@ (80027d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027a4:	4a0c      	ldr	r2, [pc, #48]	@ (80027d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a09      	ldr	r2, [pc, #36]	@ (80027dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027b8:	4c09      	ldr	r4, [pc, #36]	@ (80027e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027c6:	f000 f9df 	bl	8002b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ca:	f7fd ffcf 	bl	800076c <main>
  bx lr
 80027ce:	4770      	bx	lr
  ldr r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80027d8:	08002d7c 	.word	0x08002d7c
  ldr r2, =_sbss
 80027dc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80027e0:	20002bbc 	.word	0x20002bbc

080027e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC1_2_IRQHandler>

080027e6 <_ZNSaIcEC1Ev>:
 80027e6:	4770      	bx	lr

080027e8 <_ZNSaIcED1Ev>:
 80027e8:	4770      	bx	lr

080027ea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80027ea:	b10a      	cbz	r2, 80027f0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80027ec:	f000 b9f2 	b.w	8002bd4 <memcpy>
 80027f0:	4770      	bx	lr

080027f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80027f2:	f850 3b08 	ldr.w	r3, [r0], #8
 80027f6:	1a1b      	subs	r3, r3, r0
 80027f8:	4258      	negs	r0, r3
 80027fa:	4158      	adcs	r0, r3
 80027fc:	4770      	bx	lr
	...

08002800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002800:	b508      	push	{r3, lr}
 8002802:	680b      	ldr	r3, [r1, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002808:	d302      	bcc.n	8002810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800280a:	480d      	ldr	r0, [pc, #52]	@ (8002840 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800280c:	f000 f889 	bl	8002922 <_ZSt20__throw_length_errorPKc>
 8002810:	4293      	cmp	r3, r2
 8002812:	d90b      	bls.n	800282c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002814:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002818:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800281c:	d206      	bcs.n	800282c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800281e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002822:	bf2a      	itet	cs
 8002824:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8002828:	6008      	strcc	r0, [r1, #0]
 800282a:	600b      	strcs	r3, [r1, #0]
 800282c:	6808      	ldr	r0, [r1, #0]
 800282e:	3001      	adds	r0, #1
 8002830:	d501      	bpl.n	8002836 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8002832:	f000 f870 	bl	8002916 <_ZSt17__throw_bad_allocv>
 8002836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800283a:	f000 b85b 	b.w	80028f4 <_Znwj>
 800283e:	bf00      	nop
 8002840:	08002d10 	.word	0x08002d10

08002844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002844:	b510      	push	{r4, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	f7ff ffd3 	bl	80027f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800284c:	b920      	cbnz	r0, 8002858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002854:	f000 b84c 	b.w	80028f0 <_ZdlPv>
 8002858:	bd10      	pop	{r4, pc}

0800285a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800285a:	2a01      	cmp	r2, #1
 800285c:	b410      	push	{r4}
 800285e:	d103      	bne.n	8002868 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 8002860:	780a      	ldrb	r2, [r1, #0]
 8002862:	bc10      	pop	{r4}
 8002864:	7002      	strb	r2, [r0, #0]
 8002866:	4770      	bx	lr
 8002868:	bc10      	pop	{r4}
 800286a:	f7ff bfbe 	b.w	80027ea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800286e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800286e:	b508      	push	{r3, lr}
 8002870:	1a52      	subs	r2, r2, r1
 8002872:	f7ff fff2 	bl	800285a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002876:	bd08      	pop	{r3, pc}

08002878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002878:	b510      	push	{r4, lr}
 800287a:	4604      	mov	r4, r0
 800287c:	f7ff ffe2 	bl	8002844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002880:	4620      	mov	r0, r4
 8002882:	bd10      	pop	{r4, pc}

08002884 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8002884:	6800      	ldr	r0, [r0, #0]
 8002886:	4408      	add	r0, r1
 8002888:	4770      	bx	lr

0800288a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800288a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800288c:	1a53      	subs	r3, r2, r1
 800288e:	2b0f      	cmp	r3, #15
 8002890:	4604      	mov	r4, r0
 8002892:	460d      	mov	r5, r1
 8002894:	4616      	mov	r6, r2
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	d906      	bls.n	80028a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800289a:	2200      	movs	r2, #0
 800289c:	a901      	add	r1, sp, #4
 800289e:	f7ff ffaf 	bl	8002800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80028a2:	9b01      	ldr	r3, [sp, #4]
 80028a4:	6020      	str	r0, [r4, #0]
 80028a6:	60a3      	str	r3, [r4, #8]
 80028a8:	4632      	mov	r2, r6
 80028aa:	4629      	mov	r1, r5
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	f7ff ffde 	bl	800286e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80028b2:	2100      	movs	r1, #0
 80028b4:	9b01      	ldr	r3, [sp, #4]
 80028b6:	6822      	ldr	r2, [r4, #0]
 80028b8:	6063      	str	r3, [r4, #4]
 80028ba:	54d1      	strb	r1, [r2, r3]
 80028bc:	b002      	add	sp, #8
 80028be:	bd70      	pop	{r4, r5, r6, pc}

080028c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	f100 0308 	add.w	r3, r0, #8
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	6003      	str	r3, [r0, #0]
 80028cc:	b911      	cbnz	r1, 80028d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 80028ce:	4807      	ldr	r0, [pc, #28]	@ (80028ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 80028d0:	f000 f824 	bl	800291c <_ZSt19__throw_logic_errorPKc>
 80028d4:	4608      	mov	r0, r1
 80028d6:	f7fd fc3b 	bl	8000150 <strlen>
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	182a      	adds	r2, r5, r0
 80028e0:	4629      	mov	r1, r5
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff ffd1 	bl	800288a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80028e8:	4620      	mov	r0, r4
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	08002d28 	.word	0x08002d28

080028f0 <_ZdlPv>:
 80028f0:	f000 b832 	b.w	8002958 <free>

080028f4 <_Znwj>:
 80028f4:	2801      	cmp	r0, #1
 80028f6:	bf38      	it	cc
 80028f8:	2001      	movcc	r0, #1
 80028fa:	b510      	push	{r4, lr}
 80028fc:	4604      	mov	r4, r0
 80028fe:	4620      	mov	r0, r4
 8002900:	f000 f822 	bl	8002948 <malloc>
 8002904:	b100      	cbz	r0, 8002908 <_Znwj+0x14>
 8002906:	bd10      	pop	{r4, pc}
 8002908:	f000 f80e 	bl	8002928 <_ZSt15get_new_handlerv>
 800290c:	b908      	cbnz	r0, 8002912 <_Znwj+0x1e>
 800290e:	f000 f813 	bl	8002938 <abort>
 8002912:	4780      	blx	r0
 8002914:	e7f3      	b.n	80028fe <_Znwj+0xa>

08002916 <_ZSt17__throw_bad_allocv>:
 8002916:	b508      	push	{r3, lr}
 8002918:	f000 f80e 	bl	8002938 <abort>

0800291c <_ZSt19__throw_logic_errorPKc>:
 800291c:	b508      	push	{r3, lr}
 800291e:	f000 f80b 	bl	8002938 <abort>

08002922 <_ZSt20__throw_length_errorPKc>:
 8002922:	b508      	push	{r3, lr}
 8002924:	f000 f808 	bl	8002938 <abort>

08002928 <_ZSt15get_new_handlerv>:
 8002928:	4b02      	ldr	r3, [pc, #8]	@ (8002934 <_ZSt15get_new_handlerv+0xc>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f3bf 8f5b 	dmb	ish
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20002a70 	.word	0x20002a70

08002938 <abort>:
 8002938:	2006      	movs	r0, #6
 800293a:	b508      	push	{r3, lr}
 800293c:	f000 f8f2 	bl	8002b24 <raise>
 8002940:	2001      	movs	r0, #1
 8002942:	f7fe fe46 	bl	80015d2 <_exit>
	...

08002948 <malloc>:
 8002948:	4b02      	ldr	r3, [pc, #8]	@ (8002954 <malloc+0xc>)
 800294a:	4601      	mov	r1, r0
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f000 b82d 	b.w	80029ac <_malloc_r>
 8002952:	bf00      	nop
 8002954:	20000010 	.word	0x20000010

08002958 <free>:
 8002958:	4b02      	ldr	r3, [pc, #8]	@ (8002964 <free+0xc>)
 800295a:	4601      	mov	r1, r0
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	f000 b947 	b.w	8002bf0 <_free_r>
 8002962:	bf00      	nop
 8002964:	20000010 	.word	0x20000010

08002968 <sbrk_aligned>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4e0f      	ldr	r6, [pc, #60]	@ (80029a8 <sbrk_aligned+0x40>)
 800296c:	460c      	mov	r4, r1
 800296e:	6831      	ldr	r1, [r6, #0]
 8002970:	4605      	mov	r5, r0
 8002972:	b911      	cbnz	r1, 800297a <sbrk_aligned+0x12>
 8002974:	f000 f8f2 	bl	8002b5c <_sbrk_r>
 8002978:	6030      	str	r0, [r6, #0]
 800297a:	4621      	mov	r1, r4
 800297c:	4628      	mov	r0, r5
 800297e:	f000 f8ed 	bl	8002b5c <_sbrk_r>
 8002982:	1c43      	adds	r3, r0, #1
 8002984:	d103      	bne.n	800298e <sbrk_aligned+0x26>
 8002986:	f04f 34ff 	mov.w	r4, #4294967295
 800298a:	4620      	mov	r0, r4
 800298c:	bd70      	pop	{r4, r5, r6, pc}
 800298e:	1cc4      	adds	r4, r0, #3
 8002990:	f024 0403 	bic.w	r4, r4, #3
 8002994:	42a0      	cmp	r0, r4
 8002996:	d0f8      	beq.n	800298a <sbrk_aligned+0x22>
 8002998:	1a21      	subs	r1, r4, r0
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f8de 	bl	8002b5c <_sbrk_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d1f2      	bne.n	800298a <sbrk_aligned+0x22>
 80029a4:	e7ef      	b.n	8002986 <sbrk_aligned+0x1e>
 80029a6:	bf00      	nop
 80029a8:	20002a74 	.word	0x20002a74

080029ac <_malloc_r>:
 80029ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029b0:	1ccd      	adds	r5, r1, #3
 80029b2:	f025 0503 	bic.w	r5, r5, #3
 80029b6:	3508      	adds	r5, #8
 80029b8:	2d0c      	cmp	r5, #12
 80029ba:	bf38      	it	cc
 80029bc:	250c      	movcc	r5, #12
 80029be:	2d00      	cmp	r5, #0
 80029c0:	4606      	mov	r6, r0
 80029c2:	db01      	blt.n	80029c8 <_malloc_r+0x1c>
 80029c4:	42a9      	cmp	r1, r5
 80029c6:	d904      	bls.n	80029d2 <_malloc_r+0x26>
 80029c8:	230c      	movs	r3, #12
 80029ca:	6033      	str	r3, [r6, #0]
 80029cc:	2000      	movs	r0, #0
 80029ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002aa8 <_malloc_r+0xfc>
 80029d6:	f000 f869 	bl	8002aac <__malloc_lock>
 80029da:	f8d8 3000 	ldr.w	r3, [r8]
 80029de:	461c      	mov	r4, r3
 80029e0:	bb44      	cbnz	r4, 8002a34 <_malloc_r+0x88>
 80029e2:	4629      	mov	r1, r5
 80029e4:	4630      	mov	r0, r6
 80029e6:	f7ff ffbf 	bl	8002968 <sbrk_aligned>
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	4604      	mov	r4, r0
 80029ee:	d158      	bne.n	8002aa2 <_malloc_r+0xf6>
 80029f0:	f8d8 4000 	ldr.w	r4, [r8]
 80029f4:	4627      	mov	r7, r4
 80029f6:	2f00      	cmp	r7, #0
 80029f8:	d143      	bne.n	8002a82 <_malloc_r+0xd6>
 80029fa:	2c00      	cmp	r4, #0
 80029fc:	d04b      	beq.n	8002a96 <_malloc_r+0xea>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	4639      	mov	r1, r7
 8002a02:	4630      	mov	r0, r6
 8002a04:	eb04 0903 	add.w	r9, r4, r3
 8002a08:	f000 f8a8 	bl	8002b5c <_sbrk_r>
 8002a0c:	4581      	cmp	r9, r0
 8002a0e:	d142      	bne.n	8002a96 <_malloc_r+0xea>
 8002a10:	6821      	ldr	r1, [r4, #0]
 8002a12:	4630      	mov	r0, r6
 8002a14:	1a6d      	subs	r5, r5, r1
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7ff ffa6 	bl	8002968 <sbrk_aligned>
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	d03a      	beq.n	8002a96 <_malloc_r+0xea>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	442b      	add	r3, r5
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	f8d8 3000 	ldr.w	r3, [r8]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	bb62      	cbnz	r2, 8002a88 <_malloc_r+0xdc>
 8002a2e:	f8c8 7000 	str.w	r7, [r8]
 8002a32:	e00f      	b.n	8002a54 <_malloc_r+0xa8>
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	1b52      	subs	r2, r2, r5
 8002a38:	d420      	bmi.n	8002a7c <_malloc_r+0xd0>
 8002a3a:	2a0b      	cmp	r2, #11
 8002a3c:	d917      	bls.n	8002a6e <_malloc_r+0xc2>
 8002a3e:	1961      	adds	r1, r4, r5
 8002a40:	42a3      	cmp	r3, r4
 8002a42:	6025      	str	r5, [r4, #0]
 8002a44:	bf18      	it	ne
 8002a46:	6059      	strne	r1, [r3, #4]
 8002a48:	6863      	ldr	r3, [r4, #4]
 8002a4a:	bf08      	it	eq
 8002a4c:	f8c8 1000 	streq.w	r1, [r8]
 8002a50:	5162      	str	r2, [r4, r5]
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	4630      	mov	r0, r6
 8002a56:	f000 f82f 	bl	8002ab8 <__malloc_unlock>
 8002a5a:	f104 000b 	add.w	r0, r4, #11
 8002a5e:	1d23      	adds	r3, r4, #4
 8002a60:	f020 0007 	bic.w	r0, r0, #7
 8002a64:	1ac2      	subs	r2, r0, r3
 8002a66:	bf1c      	itt	ne
 8002a68:	1a1b      	subne	r3, r3, r0
 8002a6a:	50a3      	strne	r3, [r4, r2]
 8002a6c:	e7af      	b.n	80029ce <_malloc_r+0x22>
 8002a6e:	6862      	ldr	r2, [r4, #4]
 8002a70:	42a3      	cmp	r3, r4
 8002a72:	bf0c      	ite	eq
 8002a74:	f8c8 2000 	streq.w	r2, [r8]
 8002a78:	605a      	strne	r2, [r3, #4]
 8002a7a:	e7eb      	b.n	8002a54 <_malloc_r+0xa8>
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	6864      	ldr	r4, [r4, #4]
 8002a80:	e7ae      	b.n	80029e0 <_malloc_r+0x34>
 8002a82:	463c      	mov	r4, r7
 8002a84:	687f      	ldr	r7, [r7, #4]
 8002a86:	e7b6      	b.n	80029f6 <_malloc_r+0x4a>
 8002a88:	461a      	mov	r2, r3
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	d1fb      	bne.n	8002a88 <_malloc_r+0xdc>
 8002a90:	2300      	movs	r3, #0
 8002a92:	6053      	str	r3, [r2, #4]
 8002a94:	e7de      	b.n	8002a54 <_malloc_r+0xa8>
 8002a96:	230c      	movs	r3, #12
 8002a98:	4630      	mov	r0, r6
 8002a9a:	6033      	str	r3, [r6, #0]
 8002a9c:	f000 f80c 	bl	8002ab8 <__malloc_unlock>
 8002aa0:	e794      	b.n	80029cc <_malloc_r+0x20>
 8002aa2:	6005      	str	r5, [r0, #0]
 8002aa4:	e7d6      	b.n	8002a54 <_malloc_r+0xa8>
 8002aa6:	bf00      	nop
 8002aa8:	20002a78 	.word	0x20002a78

08002aac <__malloc_lock>:
 8002aac:	4801      	ldr	r0, [pc, #4]	@ (8002ab4 <__malloc_lock+0x8>)
 8002aae:	f000 b88f 	b.w	8002bd0 <__retarget_lock_acquire_recursive>
 8002ab2:	bf00      	nop
 8002ab4:	20002bb8 	.word	0x20002bb8

08002ab8 <__malloc_unlock>:
 8002ab8:	4801      	ldr	r0, [pc, #4]	@ (8002ac0 <__malloc_unlock+0x8>)
 8002aba:	f000 b88a 	b.w	8002bd2 <__retarget_lock_release_recursive>
 8002abe:	bf00      	nop
 8002ac0:	20002bb8 	.word	0x20002bb8

08002ac4 <memset>:
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4402      	add	r2, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <_raise_r>:
 8002ad4:	291f      	cmp	r1, #31
 8002ad6:	b538      	push	{r3, r4, r5, lr}
 8002ad8:	4605      	mov	r5, r0
 8002ada:	460c      	mov	r4, r1
 8002adc:	d904      	bls.n	8002ae8 <_raise_r+0x14>
 8002ade:	2316      	movs	r3, #22
 8002ae0:	6003      	str	r3, [r0, #0]
 8002ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae6:	bd38      	pop	{r3, r4, r5, pc}
 8002ae8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002aea:	b112      	cbz	r2, 8002af2 <_raise_r+0x1e>
 8002aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002af0:	b94b      	cbnz	r3, 8002b06 <_raise_r+0x32>
 8002af2:	4628      	mov	r0, r5
 8002af4:	f000 f830 	bl	8002b58 <_getpid_r>
 8002af8:	4622      	mov	r2, r4
 8002afa:	4601      	mov	r1, r0
 8002afc:	4628      	mov	r0, r5
 8002afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b02:	f000 b817 	b.w	8002b34 <_kill_r>
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d00a      	beq.n	8002b20 <_raise_r+0x4c>
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	d103      	bne.n	8002b16 <_raise_r+0x42>
 8002b0e:	2316      	movs	r3, #22
 8002b10:	6003      	str	r3, [r0, #0]
 8002b12:	2001      	movs	r0, #1
 8002b14:	e7e7      	b.n	8002ae6 <_raise_r+0x12>
 8002b16:	2100      	movs	r1, #0
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002b1e:	4798      	blx	r3
 8002b20:	2000      	movs	r0, #0
 8002b22:	e7e0      	b.n	8002ae6 <_raise_r+0x12>

08002b24 <raise>:
 8002b24:	4b02      	ldr	r3, [pc, #8]	@ (8002b30 <raise+0xc>)
 8002b26:	4601      	mov	r1, r0
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	f7ff bfd3 	b.w	8002ad4 <_raise_r>
 8002b2e:	bf00      	nop
 8002b30:	20000010 	.word	0x20000010

08002b34 <_kill_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	2300      	movs	r3, #0
 8002b38:	4d06      	ldr	r5, [pc, #24]	@ (8002b54 <_kill_r+0x20>)
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	f7fe fd36 	bl	80015b2 <_kill>
 8002b46:	1c43      	adds	r3, r0, #1
 8002b48:	d102      	bne.n	8002b50 <_kill_r+0x1c>
 8002b4a:	682b      	ldr	r3, [r5, #0]
 8002b4c:	b103      	cbz	r3, 8002b50 <_kill_r+0x1c>
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	bd38      	pop	{r3, r4, r5, pc}
 8002b52:	bf00      	nop
 8002b54:	20002bb4 	.word	0x20002bb4

08002b58 <_getpid_r>:
 8002b58:	f7fe bd24 	b.w	80015a4 <_getpid>

08002b5c <_sbrk_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	2300      	movs	r3, #0
 8002b60:	4d05      	ldr	r5, [pc, #20]	@ (8002b78 <_sbrk_r+0x1c>)
 8002b62:	4604      	mov	r4, r0
 8002b64:	4608      	mov	r0, r1
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	f7fe fd3e 	bl	80015e8 <_sbrk>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d102      	bne.n	8002b76 <_sbrk_r+0x1a>
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	b103      	cbz	r3, 8002b76 <_sbrk_r+0x1a>
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	20002bb4 	.word	0x20002bb4

08002b7c <__errno>:
 8002b7c:	4b01      	ldr	r3, [pc, #4]	@ (8002b84 <__errno+0x8>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000010 	.word	0x20000010

08002b88 <__libc_init_array>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	4d0c      	ldr	r5, [pc, #48]	@ (8002bc0 <__libc_init_array+0x38>)
 8002b8e:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc4 <__libc_init_array+0x3c>)
 8002b90:	1b64      	subs	r4, r4, r5
 8002b92:	10a4      	asrs	r4, r4, #2
 8002b94:	42a6      	cmp	r6, r4
 8002b96:	d109      	bne.n	8002bac <__libc_init_array+0x24>
 8002b98:	f000 f872 	bl	8002c80 <_init>
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	4d0a      	ldr	r5, [pc, #40]	@ (8002bc8 <__libc_init_array+0x40>)
 8002ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8002bcc <__libc_init_array+0x44>)
 8002ba2:	1b64      	subs	r4, r4, r5
 8002ba4:	10a4      	asrs	r4, r4, #2
 8002ba6:	42a6      	cmp	r6, r4
 8002ba8:	d105      	bne.n	8002bb6 <__libc_init_array+0x2e>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb0:	4798      	blx	r3
 8002bb2:	3601      	adds	r6, #1
 8002bb4:	e7ee      	b.n	8002b94 <__libc_init_array+0xc>
 8002bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bba:	4798      	blx	r3
 8002bbc:	3601      	adds	r6, #1
 8002bbe:	e7f2      	b.n	8002ba6 <__libc_init_array+0x1e>
 8002bc0:	08002d64 	.word	0x08002d64
 8002bc4:	08002d64 	.word	0x08002d64
 8002bc8:	08002d64 	.word	0x08002d64
 8002bcc:	08002d70 	.word	0x08002d70

08002bd0 <__retarget_lock_acquire_recursive>:
 8002bd0:	4770      	bx	lr

08002bd2 <__retarget_lock_release_recursive>:
 8002bd2:	4770      	bx	lr

08002bd4 <memcpy>:
 8002bd4:	440a      	add	r2, r1
 8002bd6:	4291      	cmp	r1, r2
 8002bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bdc:	d100      	bne.n	8002be0 <memcpy+0xc>
 8002bde:	4770      	bx	lr
 8002be0:	b510      	push	{r4, lr}
 8002be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002be6:	4291      	cmp	r1, r2
 8002be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bec:	d1f9      	bne.n	8002be2 <memcpy+0xe>
 8002bee:	bd10      	pop	{r4, pc}

08002bf0 <_free_r>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	2900      	cmp	r1, #0
 8002bf6:	d040      	beq.n	8002c7a <_free_r+0x8a>
 8002bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bfc:	1f0c      	subs	r4, r1, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bfb8      	it	lt
 8002c02:	18e4      	addlt	r4, r4, r3
 8002c04:	f7ff ff52 	bl	8002aac <__malloc_lock>
 8002c08:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <_free_r+0x8c>)
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	b933      	cbnz	r3, 8002c1c <_free_r+0x2c>
 8002c0e:	6063      	str	r3, [r4, #4]
 8002c10:	6014      	str	r4, [r2, #0]
 8002c12:	4628      	mov	r0, r5
 8002c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c18:	f7ff bf4e 	b.w	8002ab8 <__malloc_unlock>
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	d908      	bls.n	8002c32 <_free_r+0x42>
 8002c20:	6820      	ldr	r0, [r4, #0]
 8002c22:	1821      	adds	r1, r4, r0
 8002c24:	428b      	cmp	r3, r1
 8002c26:	bf01      	itttt	eq
 8002c28:	6819      	ldreq	r1, [r3, #0]
 8002c2a:	685b      	ldreq	r3, [r3, #4]
 8002c2c:	1809      	addeq	r1, r1, r0
 8002c2e:	6021      	streq	r1, [r4, #0]
 8002c30:	e7ed      	b.n	8002c0e <_free_r+0x1e>
 8002c32:	461a      	mov	r2, r3
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	b10b      	cbz	r3, 8002c3c <_free_r+0x4c>
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d9fa      	bls.n	8002c32 <_free_r+0x42>
 8002c3c:	6811      	ldr	r1, [r2, #0]
 8002c3e:	1850      	adds	r0, r2, r1
 8002c40:	42a0      	cmp	r0, r4
 8002c42:	d10b      	bne.n	8002c5c <_free_r+0x6c>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	4401      	add	r1, r0
 8002c48:	1850      	adds	r0, r2, r1
 8002c4a:	4283      	cmp	r3, r0
 8002c4c:	6011      	str	r1, [r2, #0]
 8002c4e:	d1e0      	bne.n	8002c12 <_free_r+0x22>
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4408      	add	r0, r1
 8002c56:	6010      	str	r0, [r2, #0]
 8002c58:	6053      	str	r3, [r2, #4]
 8002c5a:	e7da      	b.n	8002c12 <_free_r+0x22>
 8002c5c:	d902      	bls.n	8002c64 <_free_r+0x74>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	602b      	str	r3, [r5, #0]
 8002c62:	e7d6      	b.n	8002c12 <_free_r+0x22>
 8002c64:	6820      	ldr	r0, [r4, #0]
 8002c66:	1821      	adds	r1, r4, r0
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	bf01      	itttt	eq
 8002c6c:	6819      	ldreq	r1, [r3, #0]
 8002c6e:	685b      	ldreq	r3, [r3, #4]
 8002c70:	1809      	addeq	r1, r1, r0
 8002c72:	6021      	streq	r1, [r4, #0]
 8002c74:	6063      	str	r3, [r4, #4]
 8002c76:	6054      	str	r4, [r2, #4]
 8002c78:	e7cb      	b.n	8002c12 <_free_r+0x22>
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	20002a78 	.word	0x20002a78

08002c80 <_init>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	bf00      	nop
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr

08002c8c <_fini>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	bf00      	nop
 8002c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c92:	bc08      	pop	{r3}
 8002c94:	469e      	mov	lr, r3
 8002c96:	4770      	bx	lr
